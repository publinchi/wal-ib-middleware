
    /************************************************************/
    /*                     IMPORTANTE                           */
    /*   Esta aplicacion es parte de los  paquetes bancarios    */
    /*   propiedad de COBISCORP.                                */
    /*   Su uso no autorizado queda  expresamente  prohibido    */
    /*   asi como cualquier alteracion o agregado hecho  por    */
    /*   alguno de sus usuarios sin el debido consentimiento    */
    /*   por escrito de COBISCORP.                              */
    /*   Este programa esta protegido por la ley de derechos    */
    /*   de autor y por las y por las convenciones              */
    /*   internacionales de  propiedad intelectual. Su uso no   */
    /*   autorizado dara  derecho a  COBISCORP para obtener     */
    /*   ordenes de  secuestro o retencion y  para perseguir    */
    /*   penalmente a los autores de cualquier infraccion.      */
    /************************************************************/
    /*   This code was generated by CEN-SG.                     */
    /*   Changes to this file may cause incorrect behavior      */
    /*   and will be lost if the code is regenerated.           */
    /************************************************************/
    
    package  cobiscorp.ecobis.servicecontractoperations.service.rest;
    
    import com.cobiscorp.cobis.cts.rest.client.api.exception.CTSRestException;
    
    import cobiscorp.ecobis.servicecontractoperations.service.IServiceContractOperationsApiService;
    import cobiscorp.ecobis.datacontractoperations.dto.CreateCustomerRequest;
    import cobiscorp.ecobis.datacontractoperations.dto.CreateCustomerResponse;
    import cobiscorp.ecobis.datacontractoperations.dto.Message;
    import cobiscorp.ecobis.datacontractoperations.dto.RequestCreateSavingAccount;
    import cobiscorp.ecobis.datacontractoperations.dto.ResponseCreateSavingAccount;
    import cobiscorp.ecobis.datacontractoperations.dto.RequestEncriptData;
    import cobiscorp.ecobis.datacontractoperations.dto.ResponseEncriptData;
    import cobiscorp.ecobis.datacontractoperations.dto.RequestOtp;
    import cobiscorp.ecobis.datacontractoperations.dto.ResponseOtp;
    import cobiscorp.ecobis.datacontractoperations.dto.RequestCatalog;
    import cobiscorp.ecobis.datacontractoperations.dto.ResponseCatalog;
    import cobiscorp.ecobis.datacontractoperations.dto.CatalogueItems;
    import cobiscorp.ecobis.datacontractoperations.dto.RequestGetUserEntityInformation;
    import cobiscorp.ecobis.datacontractoperations.dto.ResponseGetUserEntityInformation;
    import cobiscorp.ecobis.datacontractoperations.dto.RegisterBeneficiaryRequest;
    import cobiscorp.ecobis.datacontractoperations.dto.RegisterBeneficiaryResponse;
    import cobiscorp.ecobis.datacontractoperations.dto.SearchZipCodeRequest;
    import cobiscorp.ecobis.datacontractoperations.dto.SearchZipCodeResponse;
    import cobiscorp.ecobis.datacontractoperations.dto.RequestUpdateProfile;
    import cobiscorp.ecobis.datacontractoperations.dto.ResponseUpdateProfile;
    import cobiscorp.ecobis.datacontractoperations.dto.RequestValidateCustomerIdentityCard;
    import cobiscorp.ecobis.datacontractoperations.dto.ResponseValidateCustomerIdentityCard;
    import cobiscorp.ecobis.datacontractoperations.dto.RequestValidateIdentity;
    import cobiscorp.ecobis.datacontractoperations.dto.ResponseValidateIdentity;
    
    import org.apache.felix.scr.annotations.*;
    import com.cobiscorp.cobis.commons.log.ILogger;
    import com.cobiscorp.cobis.commons.log.LogFactory;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Null;
    import javax.ws.rs.*;
    import javax.ws.rs.core.Response;
    import java.util.ArrayList;
    import java.util.List;
    import java.io.PrintWriter;
    import java.io.StringWriter;
    @Path("/cobis/api/Waltmart/ServiceContractOperations")
    @Component
    @Service({ServiceContractOperationsApiRest.class})
    public class ServiceContractOperationsApiRest {

    @Reference(name = "iServiceContractOperationsApiService", referenceInterface = IServiceContractOperationsApiService.class,
    bind = "setiServiceContractOperationsApiService", unbind = "unsetiServiceContractOperationsApiService", cardinality = ReferenceCardinality.MANDATORY_UNARY,
    policy = ReferencePolicy.DYNAMIC)
    IServiceContractOperationsApiService iServiceContractOperationsApiService;
    private static final ILogger LOGGER = LogFactory.getLogger(ServiceContractOperationsApiRest.class);
    protected void setiServiceContractOperationsApiService(IServiceContractOperationsApiService iServiceContractOperationsApiService){
    this.iServiceContractOperationsApiService = iServiceContractOperationsApiService;
    }

    protected void unsetiServiceContractOperationsApiService(IServiceContractOperationsApiService iServiceContractOperationsApiService){
    this.iServiceContractOperationsApiService = null;
    }
    
          /**
          * Create new customers
          */
        @POST
      @Path("/apiOperations/customer/createCustomer")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  createCustomer(CreateCustomerRequest inCreateCustomerRequest ){
	  LOGGER.logDebug("Start service execution REST: createCustomer");
      CreateCustomerResponse outCreateCustomerResponse  = new CreateCustomerResponse();
          
      if(!validateMandatory(new Data("activity", inCreateCustomerRequest.getActivity()), new Data("referenceAddress", inCreateCustomerRequest.getReferenceAddress()), new Data("addressTypeCode", inCreateCustomerRequest.getAddressTypeCode()), new Data("amountTransaction", inCreateCustomerRequest.getAmountTransaction()), new Data("averageBalance", inCreateCustomerRequest.getAverageBalance()), new Data("birthDate", inCreateCustomerRequest.getBirthDate()), new Data("city", inCreateCustomerRequest.getCity()), new Data("civilStatus", inCreateCustomerRequest.getCivilStatus()), new Data("companyName", inCreateCustomerRequest.getCompanyName()), new Data("countryBirth", inCreateCustomerRequest.getCountryBirth()), new Data("economicSector", inCreateCustomerRequest.getEconomicSector()), new Data("electronicTransfer", inCreateCustomerRequest.getElectronicTransfer()), new Data("externalNumber", inCreateCustomerRequest.getExternalNumber()), new Data("gender", inCreateCustomerRequest.getGender()), new Data("geolocalizationLatitude", inCreateCustomerRequest.getGeolocalizationLatitude()), new Data("geolocalizationLongitude", inCreateCustomerRequest.getGeolocalizationLongitude()), new Data("idNumber", inCreateCustomerRequest.getIdNumber()), new Data("identityValidated", inCreateCustomerRequest.getIdentityValidated()), new Data("incomeLevel", inCreateCustomerRequest.getIncomeLevel()), new Data("incomeLevelEntity", inCreateCustomerRequest.getIncomeLevelEntity()), new Data("internalNumber", inCreateCustomerRequest.getInternalNumber()), new Data("lastName", inCreateCustomerRequest.getLastName()), new Data("legalIncomeSource", inCreateCustomerRequest.getLegalIncomeSource()), new Data("email", inCreateCustomerRequest.getEmail()), new Data("firstName", inCreateCustomerRequest.getFirstName()), new Data("nationality", inCreateCustomerRequest.getNationality()), new Data("noConnectionIllegalNetworks", inCreateCustomerRequest.getNoConnectionIllegalNetworks()), new Data("phoneNumber", inCreateCustomerRequest.getPhoneNumber()), new Data("numberTransaction", inCreateCustomerRequest.getNumberTransaction()), new Data("occupation", inCreateCustomerRequest.getOccupation()), new Data("operationType", inCreateCustomerRequest.getOperationType()), new Data("otherMexicanAccount", inCreateCustomerRequest.getOtherMexicanAccount()), new Data("secondLastName", inCreateCustomerRequest.getSecondLastName()), new Data("secondName", inCreateCustomerRequest.getSecondName()), new Data("paymentCard", inCreateCustomerRequest.getPaymentCard()), new Data("paymentRecharge", inCreateCustomerRequest.getPaymentRecharge()), new Data("servicesPay", inCreateCustomerRequest.getServicesPay()), new Data("propertyTypeCode", inCreateCustomerRequest.getPropertyTypeCode()), new Data("province", inCreateCustomerRequest.getProvince()), new Data("provinceBirth", inCreateCustomerRequest.getProvinceBirth()), new Data("provisionCash", inCreateCustomerRequest.getProvisionCash()), new Data("rfc", inCreateCustomerRequest.getRfc()), new Data("identificationNumber", inCreateCustomerRequest.getIdentificationNumber()), new Data("identificationType", inCreateCustomerRequest.getIdentificationType()), new Data("street", inCreateCustomerRequest.getStreet()), new Data("subdivisioncode", inCreateCustomerRequest.getSubdivisioncode()), new Data("timeCurrentRecide", inCreateCustomerRequest.getTimeCurrentRecide()), new Data("townCode", inCreateCustomerRequest.getTownCode()), new Data("validityDate", inCreateCustomerRequest.getValidityDate()), new Data("zipcode", inCreateCustomerRequest.getZipcode()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outCreateCustomerResponse=iServiceContractOperationsApiService.createCustomer( inCreateCustomerRequest );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: createCustomer");
          return Response.ok(outCreateCustomerResponse).build();
        
      }
    
          /**
          * Service to create a savings account for an existing customer
          */
        @POST
      @Path("/apiOperations/customer/createSavingAccount")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  createSavingAccount(RequestCreateSavingAccount inRequestCreateSavingAccount ){
	  LOGGER.logDebug("Start service execution REST: createSavingAccount");
      ResponseCreateSavingAccount outResponseCreateSavingAccount  = new ResponseCreateSavingAccount();
          
      if(!validateMandatory(new Data("customerId", inRequestCreateSavingAccount.getCustomerId()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outResponseCreateSavingAccount=iServiceContractOperationsApiService.createSavingAccount( inRequestCreateSavingAccount );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: createSavingAccount");
          return Response.ok(outResponseCreateSavingAccount).build();
        
      }
    
          /**
          * Encrypt Data
          */
        @POST
      @Path("/apiOperations/security/encryptData")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  encryptData(RequestEncriptData inRequestEncriptData ){
	  LOGGER.logDebug("Start service execution REST: encryptData");
      List<ResponseEncriptData> outSingleResponseEncriptData  = new ArrayList<>();
          
      if(!validateMandatory(new Data("externalCustomerId", inRequestEncriptData.getExternalCustomerId()), new Data("password", inRequestEncriptData.getPassword()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outSingleResponseEncriptData=iServiceContractOperationsApiService.encryptData( inRequestEncriptData );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: encryptData");
          return Response.ok(outSingleResponseEncriptData).build();
        
      }
    
          /**
          * Service to generate and send an OTP to the client
          */
        @POST
      @Path("/apiOperations/password/generateTransactionFactor")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  generateTransactionFactor(RequestOtp inRequestOtp ){
	  LOGGER.logDebug("Start service execution REST: generateTransactionFactor");
      ResponseOtp outSingleResponseOtp  = new ResponseOtp();
          
      if(!validateMandatory(new Data("externalCustomerId", inRequestOtp.getExternalCustomerId()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outSingleResponseOtp=iServiceContractOperationsApiService.generateTransactionFactor( inRequestOtp );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: generateTransactionFactor");
          return Response.ok(outSingleResponseOtp).build();
        
      }
    
          /**
          * Get catalog
          */
        @POST
      @Path("/apiOperations/common/getCatalog")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  getCatalog(RequestCatalog inRequestCatalog ){
	  LOGGER.logDebug("Start service execution REST: getCatalog");
      ResponseCatalog outResponseCatalog  = new ResponseCatalog();
          
      if(!validateMandatory(new Data("catalogueTable", inRequestCatalog.getCatalogueTable()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outResponseCatalog=iServiceContractOperationsApiService.getCatalog( inRequestCatalog );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: getCatalog");
          return Response.ok(outResponseCatalog).build();
        
      }
    
          /**
          * View Customer Information
          */
        @POST
      @Path("/apiOperations/enrollment/getUserEntityInformation")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  getUserEntityInformation(RequestGetUserEntityInformation inRequestGetUserEntityInformation ){
	  LOGGER.logDebug("Start service execution REST: getUserEntityInformation");
      ResponseGetUserEntityInformation outResponseGetUserEntityInformation  = new ResponseGetUserEntityInformation();
          
      if(!validateMandatory(new Data("externalCustomerId", inRequestGetUserEntityInformation.getExternalCustomerId()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outResponseGetUserEntityInformation=iServiceContractOperationsApiService.getUserEntityInformation( inRequestGetUserEntityInformation );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: getUserEntityInformation");
          return Response.ok(outResponseGetUserEntityInformation).build();
        
      }
    
          /**
          * Register Beneficiary Saving Account
          */
        @POST
      @Path("/apiOperations/onboarding/registerBeneficiary")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  registerBeneficiary(RegisterBeneficiaryRequest inRegisterBeneficiaryRequest ){
	  LOGGER.logDebug("Start service execution REST: registerBeneficiary");
      RegisterBeneficiaryResponse outRegisterBeneficiaryResponse  = new RegisterBeneficiaryResponse();
          
      if(!validateMandatory(new Data("beneficiaries.lastName", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.secondLastName", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.street", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.city", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.zipcode", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("externalCustomerId", inRegisterBeneficiaryRequest.getExternalCustomerId()), new Data("beneficiaries.birthDate", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.location", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.names", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.externalNumber", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.internalNumber", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("account", inRegisterBeneficiaryRequest.getAccount()), new Data("beneficiaries.relationship", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.colony", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.percentage", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.province", inRegisterBeneficiaryRequest.getBeneficiaries()), new Data("beneficiaries.phoneNumber", inRegisterBeneficiaryRequest.getBeneficiaries()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outRegisterBeneficiaryResponse=iServiceContractOperationsApiService.registerBeneficiary( inRegisterBeneficiaryRequest );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: registerBeneficiary");
          return Response.ok(outRegisterBeneficiaryResponse).build();
        
      }

      /**
          * Search Zip Code API
          */
        @POST
      @Path("/onboarding/searchZipCode")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  searchZipCode(SearchZipCodeRequest inSearchZipCodeRequest ){
	  LOGGER.logDebug("Start service execution REST: searchZipCode");
      SearchZipCodeResponse outSingleSearchZipCodeResponse  = new SearchZipCodeResponse();
          
      if(!validateMandatory(new Data("zipCode", inSearchZipCodeRequest.getZipCode()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outSingleSearchZipCodeResponse=iServiceContractOperationsApiService.searchZipCode( inSearchZipCodeRequest );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: searchZipCode");
          return Response.ok(outSingleSearchZipCodeResponse).build();
        
      }
    
          /**
          * Service to Update Profile
          */
        @POST
      @Path("/apiOperations/enrollment/updateProfile")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  updateProfile(RequestUpdateProfile inRequestUpdateProfile ){
	  LOGGER.logDebug("Start service execution REST: updateProfile");
      List<ResponseUpdateProfile> outSingleResponseUpdateProfile  = new ArrayList<>();
          
      if(!validateMandatory(new Data("externalCustomerId", inRequestUpdateProfile.getExternalCustomerId()), new Data("email", inRequestUpdateProfile.getEmail()), new Data("phoneNumber", inRequestUpdateProfile.getPhoneNumber()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outSingleResponseUpdateProfile=iServiceContractOperationsApiService.updateProfile( inRequestUpdateProfile );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: updateProfile");
          return Response.ok(outSingleResponseUpdateProfile).build();
        
      }
    @POST
      @Path("/apiOperations/onbording/validateCustomerIdentityCard")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  validateCustomerIdentityCard(RequestValidateCustomerIdentityCard inRequestValidateCustomerIdentityCard ){
	  LOGGER.logDebug("Start service execution REST: validateCustomerIdentityCard");
      ResponseValidateCustomerIdentityCard outResponseValidateCustomerIdentityCard  = new ResponseValidateCustomerIdentityCard();
          
      if(!validateMandatory(new Data("identityCard", inRequestValidateCustomerIdentityCard.getIdentityCard()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outResponseValidateCustomerIdentityCard=iServiceContractOperationsApiService.validateCustomerIdentityCard( inRequestValidateCustomerIdentityCard );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: validateCustomerIdentityCard");
          return Response.ok(outResponseValidateCustomerIdentityCard).build();
        
      }
    
          /**
          * Validate Identity
          */
        @POST
      @Path("/apiOperations/onbording/sendImagesToMati")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  validateIdentity(RequestValidateIdentity inRequestValidateIdentity ){
	  LOGGER.logDebug("Start service execution REST: validateIdentity");
      ResponseValidateIdentity outResponseValidateIdentity  = new ResponseValidateIdentity();
          
      if(!validateMandatory(new Data("type", inRequestValidateIdentity.getType()), new Data("imageAnverso", inRequestValidateIdentity.getImageAnverso()), new Data("imageReverso", inRequestValidateIdentity.getImageReverso()), new Data("imageDomicile", inRequestValidateIdentity.getImageDomicile()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outResponseValidateIdentity=iServiceContractOperationsApiService.validateIdentity( inRequestValidateIdentity );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: validateIdentity");
          return Response.ok(outResponseValidateIdentity).build();
        
      }
    
    private class Data {
      private String name;
      private Object value;
      public Data(String name, Object value) {
        super();
        this.name = name;
        this.value = value;
      }
      public String getName() {
        return name;
      }
      public Object getValue() {
        return value;
      }
    }

    private boolean validateMandatory(Data... args) {
      boolean res = true;
      for (Data arg : args) {
        if ( arg.getValue() == null ) {
          LOGGER.logError("Attribute " + arg.getName() + " is null");
          res = false;
        }
      }
      return res;
    }
    
    }
  