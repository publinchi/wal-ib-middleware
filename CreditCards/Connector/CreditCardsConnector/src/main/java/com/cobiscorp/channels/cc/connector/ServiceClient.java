package com.cobiscorp.channels.cc.connector;


import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.util.ArrayList;

import com.cobiscorp.channels.cc.connector.dto.ConnectionParameters;
import com.cobiscorp.channels.cc.connector.dto.CreditCard;
import com.cobiscorp.channels.cc.connector.dto.CreditCardRequest;
import com.cobiscorp.channels.cc.connector.dto.CreditCardResponse;
import com.cobiscorp.channels.cc.connector.dto.Movement;
import com.cobiscorp.channels.cc.connector.dto.MovementsResponse;
import com.cobiscorp.cobis.commons.log.ILogger;
import com.cobiscorp.cobis.commons.log.LogFactory;

public class ServiceClient implements ICreditCardServiceClient{

	private final ILogger logger = LogFactory.getLogger(ServiceClient.class);

	public URL initializeService(final ConnectionParameters connectionParameters) throws MalformedURLException {

		if(logger.isInfoEnabled()){			
			logger.logInfo("Empieza encodeService");
			logger.logInfo("connectionTimeout:" + connectionParameters.getConnectionTimeout());
			logger.logInfo("Empieza readTimeout:" + connectionParameters.getReadTimeout());
		}

		if (logger.isInfoEnabled()){
			logger.logInfo("ServiceClient - initializeService - Obteniendo URL");
		}
		
		URL endpoint = new URL(null,
				connectionParameters.getUrl(),
				new URLStreamHandler() {
			@Override
			protected URLConnection openConnection(URL url) throws IOException {
				URL target = new URL(url.toString());
				//Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("192.168.65.253", 8080));
				URLConnection connection = target.openConnection();
				connection.setConnectTimeout(connectionParameters.getConnectionTimeout()); // 20 sec
				connection.setReadTimeout(connectionParameters.getReadTimeout()); // 1 min
				return (connection);
			}
		});

		if (logger.isInfoEnabled()){
			logger.logInfo("ServiceClient - initializeService - endpoint: " + endpoint);
		}
		return endpoint;
	}

	public CreditCardResponse queryCreditCards(CreditCardRequest creditCardRequest)
			throws CreditCardConnectorServiceException {

		URL endpoint;

		if (logger.isInfoEnabled()){
			logger.logInfo("ServiceClient - queryCreditCards");
		}
		
		try {
			endpoint =  initializeService(creditCardRequest.getConnectionParameters());
		} catch (MalformedURLException e) {
			logger.logError(e);
		}
		//1.- Se debe llamar a un método similar callServiceExample pasandole el objeto URL
		//2.- Se debe llamar a parsiar esa respuesta para que retorne el objeto correcto
		//3.- Llamar a consultar Saldo queryCreditCardBalance
		//4.- Retornar Lista de Tarjetas de crédito

		if (logger.isInfoEnabled()){
			logger.logInfo("ServiceClient - queryCreditCards - insertando data");
		}

		//Cabeceras de tarjetas
		ArrayList<CreditCard> cc_List = new ArrayList<CreditCard>();
		
		// productId, productName, productNumber, productAlias, aliasName, currencyId, currencySymbol, currencyName, accountingBalance, 
		// availableBalance, drawBalance, productAbbreviation, expirationDate, ownerName, ownerId, idLocalBank, rate
		cc_List.add(new CreditCard("83", "TC_CONN_1234", "1234123412341234", "", "data:image/jpeg;charset=utf-8;base64,", "2", "USD", "DOLAR", 5000.00, 1000.00, 4000.00, "83", "01/01/2019", "", "", "", 0));
		cc_List.add(new CreditCard("83", "TC_CONN_2345", "2345234523452345", "", "data:image/jpeg;charset=utf-8;base64,", "2", "USD", "DOLAR",10000.00, 5000.00, 5000.00, "83", "15/01/2019", "", "", "", 0));
		cc_List.add(new CreditCard("83", "TC_CONN_3456", "3456345634563456", "", "data:image/jpeg;charset=utf-8;base64,", "2", "USD", "DOLAR",15000.00, 1500.00, 13500.00, "83", "16/01/2019", "", "", "", 0));

		CreditCardResponse creditCardResponse = new CreditCardResponse();
		creditCardResponse.setCreditCardsList(cc_List);
		
		if (logger.isInfoEnabled()){
			logger.logInfo("ServiceClient - queryCreditCards - creditCardsResponse: " + creditCardResponse);
		}
		
		return creditCardResponse;
	}

	public CreditCardResponse queryCreditCardBalance(CreditCardRequest creditCardRequest)
			throws CreditCardConnectorServiceException {
	
		//1.- LLamar a web service que trae Saldo
		//2.- Devlopver la Respuesta a método queryCreditCards 
		return null;
	}

	public MovementsResponse queryMovements(CreditCardRequest creditCardRequest)
			throws CreditCardConnectorServiceException {
		URL endpoint;

		try {
			endpoint =  initializeService(creditCardRequest.getConnectionParameters());
		} catch (MalformedURLException e) {
			logger.logError(e);
		}

		ArrayList<Movement> movementsList = new ArrayList<Movement>();
		
		// account, cause, causeId, concept, creditsAmount, debitsAmount, alternateCode, 
		// description, reference, amount, accountingBalance, availableBalance, documentNumber, processDate, transactionDate, hour, image, internationalChecksBalance, 
		// localChecksBalance, numberOfMovements, office, operationType, ownChecksBalance, sequential, signDC, totalChecksBalance, type, typeDC, uniqueSequential
		
		movementsList.add(new Movement("1234123412341234","","","",0.00,0.00,0,"COMPRA 1 S.A.","450912OR",5000.00,500.00,4500.00,0,"08/12/2019","08/12/2019","08:21:00","",0,0,0,0,0,0,0,"D",0,"","",0));
		movementsList.add(new Movement("1234123412341234","","","",0.00,0.00,0,"COMPRA 2 S.A.","450912OR",5000.00,400.00,4100.00,0,"08/12/2019","08/12/2019","08:22:00","",0,0,0,0,0,0,0,"D",0,"","",0));
		movementsList.add(new Movement("1234123412341234","","","",0.00,0.00,0,"COMPRA 3 S.A.","450912OR",5000.00,100.00,4000.00,0,"08/12/2019","08/12/2019","08:23:00","",0,0,0,0,0,0,0,"D",0,"","",0));
		movementsList.add(new Movement("2345234523452345","","","",0.00,0.00,0,"COMPRA 4 S.A.","450912OR",10000.00,5000.00,5000.00,0,"08/12/2019","08/12/2019","08:24:00","",0,0,0,0,0,0,0,"D",0,"","",0));
		movementsList.add(new Movement("3456345634563456","","","",0.00,0.00,0,"COMPRA 5 S.A.","450912OR",15000.00,13500.00,1500.00,0,"08/12/2019","08/12/2019","08:25:00","",0,0,0,0,0,0,0,"D",0,"","",0));
	
		MovementsResponse movementsResponse = new MovementsResponse();
		movementsResponse.setMovementsList(movementsList);
		
		if (logger.isInfoEnabled()){
			logger.logInfo("ServiceClient - queryMovements - MovementsResponse: " + movementsList);
		}
		
		return movementsResponse;

	}

}


/*private Map<String , String>  callServiceExample(String message, URL endpoint){
if(logger.isInfoEnabled())			
	logger.logInfo("Empieza callEncodeService");

Map<String, String> answerMap = null; 
StringBuilder xmlInput = new StringBuilder("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:web=\"http://webServicesExpress.servicios.multicamara.cliente.mc4.com/\">\n");
xmlInput.append("   <soapenv:Header/>\n");
xmlInput.append("   <soapenv:Body>\n");
xmlInput.append("      <web:cifrarBase64>\n");
xmlInput.append("         <mensaje>"+message+"</mensaje>\n");
xmlInput.append("      </web:cifrarBase64>\n");
xmlInput.append("   </soapenv:Body>\n");
xmlInput.append("</soapenv:Envelope>");


if(logger.isDebugEnabled())			
	logger.logDebug("Entrada:"+xmlInput.toString());

SOAPMessage soapMessage = SoapUtil.getSoapMessageFromString(xmlInput.toString());

if(logger.isInfoEnabled())	
	logger.logInfo("Entrada Transformada:"+SoapUtil.getStringFromSoapMessage(soapMessage));

try {
	String soapAction = "";
	Map map = SoapUtil.call(soapMessage, endpoint, null,soapAction);
	// Imprimimos el Map con un Iterador
	Iterator it = map.keySet().iterator();
	while(it.hasNext()){
		Object key = it.next();
		if(logger.isDebugEnabled())			
			logger.logDebug("Clave: " + key + " -> Valor: " + map.get(key));
	}
	SOAPMessage answer = (SOAPMessage) map.get("soapMessage");

	if(logger.isInfoEnabled()){			
		logger.logInfo("Trama Respuesta Transformada getStringFromSoapMessage:"+SoapUtil.getStringFromSoapMessage(answer));
	}	

	answerMap =  parseAnswerServiceCallXml(SoapUtil.getStringFromSoapMessage(answer));


} catch (SOAPException e) {
	logger.logError(e);
} catch (TransformerException e) {
	// TODO Auto-generated catch block
	logger.logError(e);
}     

return answerMap;
}*/



/*private  Map<String,String> parseAnswerServiceExampleCallXml(String xml) {

Map<String, String> answerMapCatalog = new HashMap<String, String>(); 
try {
	InputSource source = new InputSource(new StringReader(xml));
	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	DocumentBuilder db = dbf.newDocumentBuilder();
	Document doc = db.parse(source);
	doc.getDocumentElement().normalize();

	if(logger.isDebugEnabled())
		logger.logDebug("Root element :" + doc.getDocumentElement().getNodeName());

	NodeList nList = doc.getElementsByTagName("cifrar");

	if(logger.isDebugEnabled())
		logger.logDebug("----------------------------nList.length"+nList.getLength());

	for (int temp = 0; temp < nList.getLength(); temp++) {
		Node nNode = nList.item(temp);
		if(logger.isDebugEnabled())
			logger.logDebug("Current Element :" + nNode.getNodeName());

		if (nNode.getNodeType() == Node.ELEMENT_NODE) {
			Element eElement = (Element) nNode;

			String valueCode =  eElement.getElementsByTagName("codigoRespuesta").item(0).getTextContent();
			String valueDescriptionAnswer = eElement.getElementsByTagName("descripcionRespuesta").item(0).getTextContent();
			String valueMessage = eElement.getElementsByTagName("mensaje").item(0).getTextContent();
			answerMapCatalog.put("codigoRespuesta", valueCode);
			answerMapCatalog.put("descripcionRespuesta", valueDescriptionAnswer);
			answerMapCatalog.put("mensaje", valueMessage);
		}
	}
} catch (Exception e) {
	logger.logError(e);
	answerMapCatalog = null;
}

return answerMapCatalog;
}*/

