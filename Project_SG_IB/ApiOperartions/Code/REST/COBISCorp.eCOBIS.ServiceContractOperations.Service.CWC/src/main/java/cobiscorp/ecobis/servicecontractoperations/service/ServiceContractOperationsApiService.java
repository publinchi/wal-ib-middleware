
/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/

package cobiscorp.ecobis.servicecontractoperations.service;

import com.cobiscorp.cobis.cts.rest.client.api.exception.CTSRestException;
import com.cobiscorp.cobis.commons.log.ILogger;
import com.cobiscorp.cobis.commons.log.LogFactory;
import com.cobiscorp.cobis.cts.rest.client.api.RowMapper;
import com.cobiscorp.cobis.cts.rest.client.dto.MessageBlock;
import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureRequestAS;
import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureResponseAS;
import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureResponseParam;
import com.cobiscorp.cobis.cts.rest.client.mapper.MapperResultUtil;
import com.cobiscorp.cobis.cts.rest.client.mapper.ResultSetMapper;
import com.cobiscorp.cobis.cts.rest.client.util.ErrorUtil;
import com.cobiscorp.cobis.cwc.cts.rest.ICTSRestIntegrationService;
import com.cobiscorp.cobis.jaxrs.publisher.SessionManager;
import com.google.gson.Gson;

import org.apache.felix.scr.annotations.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

import com.cobiscorp.cobis.cts.rest.client.util.ConverterUtil;
import com.cobiscorp.cobis.cts.rest.client.util.ICTSTypes;

import cobiscorp.ecobis.servicecontractoperations.service.IServiceContractOperationsApiService;
import cobiscorp.ecobis.datacontractoperations.dto.*;

@Component
@Service({ IServiceContractOperationsApiService.class })
public class ServiceContractOperationsApiService implements IServiceContractOperationsApiService {

	@Reference(name = "ctsRestIntegrationService", referenceInterface = ICTSRestIntegrationService.class, bind = "setctsRestIntegrationService", unbind = "unsetctsRestIntegrationService", cardinality = ReferenceCardinality.MANDATORY_UNARY, policy = ReferencePolicy.DYNAMIC)
	private ICTSRestIntegrationService ctsRestIntegrationService;
	private static final ILogger LOGGER = LogFactory.getLogger(ServiceContractOperationsApiService.class);


	/**
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<AUTO GENERATED BY CONFLICT EXTENSION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< wal_dev_branch
          * Service to apply credit account
          */
         @Override
			// Return Dto
			public  CreditAccountResponse  creditOperation(CreditAccountRequest inCreditAccountRequest  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: creditOperation");
====================================AUTO GENERATED BY CONFLICT EXTENSION====================================
          * Service to apply crerdit account
          */
         @Override
			// Return DTO
			public  CreditAccountResponse  accountCreditOperation(CreditAccountRequest inCreditAccountRequest  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: accountCreditOperation");
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>AUTO GENERATED BY CONFLICT EXTENSION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Santiago_api_dev
      CreditAccountResponse outSingleCreditAccountResponse  = new CreditAccountResponse();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_credit_operation_api");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500111");
      procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inCreditAccountRequest.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_accountNumber",ICTSTypes.SQLVARCHAR,inCreditAccountRequest.getAccountNumber());
      procedureRequestAS.addInputParam("@i_amount",ICTSTypes.SQLNUMERIC,String.valueOf(inCreditAccountRequest.getAmount()));
      procedureRequestAS.addInputParam("@i_commission",ICTSTypes.SQLMONEY,String.valueOf(inCreditAccountRequest.getCommission()));
      procedureRequestAS.addInputParam("@i_latitude",ICTSTypes.SQLFLT8i,String.valueOf(inCreditAccountRequest.getLatitude()));
      procedureRequestAS.addInputParam("@i_longitude",ICTSTypes.SQLFLT8i,String.valueOf(inCreditAccountRequest.getLongitude()));
      procedureRequestAS.addInputParam("@i_referenceNumber",ICTSTypes.SQLVARCHAR,inCreditAccountRequest.getReferenceNumber());
      procedureRequestAS.addInputParam("@i_creditConcept",ICTSTypes.SQLVARCHAR,inCreditAccountRequest.getCreditConcept());
      procedureRequestAS.addInputParam("@i_originCode",ICTSTypes.SQLINT4,String.valueOf(inCreditAccountRequest.getOriginCode()));
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    CreditAccountResponse returnCreditAccountResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<CreditAccountResponse>() { 
                    @Override
                    public CreditAccountResponse mapRow(ResultSetMapper resultSetMapper, int index) {
                    CreditAccountResponse dto = new CreditAccountResponse();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                          dto.setReferenceCode(resultSetMapper.getString(4));
							dto.messageInstance().setCode(resultSetMapper.getInteger(2));
							dto.messageInstance().setMessage(resultSetMapper.getString(3));
                    return dto;
                    }
                    },false);
                    outSingleCreditAccountResponse=returnCreditAccountResponse ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: creditOperation");
        //returns data
        return outSingleCreditAccountResponse;
      }


	 /**
          * Afiliate Customer
          */
         @Override
			// Return List
			public  ResponseAffiliateCustomer affiliateCustomer(RequestAffiliateCustomer inRequestAffiliateCustomer  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: affiliateCustomer");
      ResponseAffiliateCustomer outSingleResponseAffiliateCustomer  = new ResponseAffiliateCustomer();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_affiliate_customer");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500101");
      procedureRequestAS.addInputParam("@i_external_customer_id",ICTSTypes.SQLINT4,String.valueOf(inRequestAffiliateCustomer.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_accountNumber",ICTSTypes.SQLVARCHAR,inRequestAffiliateCustomer.getAccountNumber());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    ResponseAffiliateCustomer returnResponseAffiliateCustomer = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseAffiliateCustomer>() { 
                    @Override
                    public ResponseAffiliateCustomer mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseAffiliateCustomer dto = new ResponseAffiliateCustomer();
                    
                          dto.setSuccess(resultSetMapper.getString(3));
                          dto.setLoginId(resultSetMapper.getInteger(1));
                          dto.setUserCreated(resultSetMapper.getString(2));
							dto.messageInstance().setMessage(resultSetMapper.getString(4));
							dto.messageInstance().setCode(resultSetMapper.getInteger(5));
                    return dto;
                    }
                    },false);
                    outSingleResponseAffiliateCustomer=returnResponseAffiliateCustomer ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: affiliateCustomer");
        //returns data
        return outSingleResponseAffiliateCustomer;
      }

	/**
	 * Create new customers
	 */
	@Override
	// Have DTO
	public CreateCustomerResponse createCustomer(CreateCustomerRequest inCreateCustomerRequest)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: createCustomer");
		CreateCustomerResponse outCreateCustomerResponse = new CreateCustomerResponse();

//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_api_create_customer");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500094");
		procedureRequestAS.addInputParam("@i_activity_code", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getActivity());
		procedureRequestAS.addInputParam("@i_address", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getReferenceAddress());
		procedureRequestAS.addInputParam("@i_address_type_code", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getAddressTypeCode());
		procedureRequestAS.addInputParam("@i_amount_transaction", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getAmountTransaction());
		procedureRequestAS.addInputParam("@i_average_balance", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getAverageBalance());
		procedureRequestAS.addInputParam("@i_birthdate", ICTSTypes.SQLVARCHAR, 
				inCreateCustomerRequest.getBirthDate());
		procedureRequestAS.addInputParam("@i_city_code", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getCity()));
		procedureRequestAS.addInputParam("@i_countrybirth_code", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getCountryBirth()));
		procedureRequestAS.addInputParam("@i_civil_status", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getCivilStatus());
		procedureRequestAS.addInputParam("@i_company_name", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getCompanyName());
		procedureRequestAS.addInputParam("@i_electronic_transfer", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getElectronicTransfer()));
		procedureRequestAS.addInputParam("@i_externalnumber", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getExternalNumber()));
		procedureRequestAS.addInputParam("@i_gender_code", ICTSTypes.SQLCHAR,
				String.valueOf(inCreateCustomerRequest.getGender()));
		procedureRequestAS.addInputParam("@i_geolocatization_latitude", ICTSTypes.SQLDECIMAL,
				String.valueOf(inCreateCustomerRequest.getGeolocalizationLatitude()));
		procedureRequestAS.addInputParam("@i_geolocatization_longitude", ICTSTypes.SQLDECIMAL,
				String.valueOf(inCreateCustomerRequest.getGeolocalizationLongitude()));
		procedureRequestAS.addInputParam("@i_identification_number", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getIdNumber());
		procedureRequestAS.addInputParam("@i_identity_validated", ICTSTypes.SQLCHAR,
				String.valueOf(inCreateCustomerRequest.getIdentityValidated()));
		procedureRequestAS.addInputParam("@i_incomelevel", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getIncomeLevel());
		procedureRequestAS.addInputParam("@i_incomelevel_entity", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getIncomeLevelEntity());
		procedureRequestAS.addInputParam("@i_internalnumber", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getInternalNumber()));
		procedureRequestAS.addInputParam("@i_lastname", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getLastName());
		procedureRequestAS.addInputParam("@i_legalincomesource", ICTSTypes.SQLCHAR,
				String.valueOf(inCreateCustomerRequest.getLegalIncomeSource()));
		procedureRequestAS.addInputParam("@i_mail", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getEmail());
		procedureRequestAS.addInputParam("@i_name", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getFirstName());
		procedureRequestAS.addInputParam("@i_nationality", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getNationality());
		procedureRequestAS.addInputParam("@i_noconnectiontoillegalnetworks", ICTSTypes.SQLCHAR,
				String.valueOf(inCreateCustomerRequest.getNoConnectionIllegalNetworks()));
		procedureRequestAS.addInputParam("@i_number", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getPhoneNumber());
		procedureRequestAS.addInputParam("@i_number_transaction", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getNumberTransaction());
		procedureRequestAS.addInputParam("@i_occupation_code", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getOccupation());
		procedureRequestAS.addInputParam("@i_operation_type", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getOperationType());
		procedureRequestAS.addInputParam("@i_other_mexican_account", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getOtherMexicanAccount());
		procedureRequestAS.addInputParam("@i_otherlastname", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getSecondLastName());
		procedureRequestAS.addInputParam("@i_othername", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getSecondName());
		procedureRequestAS.addInputParam("@i_payment_card", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getPaymentCard()));
		procedureRequestAS.addInputParam("@i_payment_recharge", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getPaymentRecharge()));
		procedureRequestAS.addInputParam("@i_payment_service", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getServicesPay()));
		procedureRequestAS.addInputParam("@i_propertytype_code", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getPropertyTypeCode());
		procedureRequestAS.addInputParam("@i_province_code", ICTSTypes.SQLINT2,
				String.valueOf(inCreateCustomerRequest.getProvince()));
		procedureRequestAS.addInputParam("@i_provincebirth_code", ICTSTypes.SQLINT2,
				String.valueOf(inCreateCustomerRequest.getProvinceBirth()));
		procedureRequestAS.addInputParam("@i_provision_cash", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getProvisionCash()));
		procedureRequestAS.addInputParam("@i_rfc", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getRfc());
		procedureRequestAS.addInputParam("@i_secondaryidentification_number", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getIdentificationNumber());
		procedureRequestAS.addInputParam("@i_secondaryidentification_type_code", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getIdentificationType());
		procedureRequestAS.addInputParam("@i_street", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getStreet());
		procedureRequestAS.addInputParam("@i_subdivision_code", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getSubdivisioncode()));
		procedureRequestAS.addInputParam("@i_timeincurrentresidence", ICTSTypes.SQLINT4,
				String.valueOf(inCreateCustomerRequest.getTimeCurrentRecide()));
		procedureRequestAS.addInputParam("@i_town_code", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getTownCode());
		procedureRequestAS.addInputParam("@i_validity_date", ICTSTypes.SQLVARCHAR, 
				inCreateCustomerRequest.getValidityDate());
		procedureRequestAS.addInputParam("@i_zipcode_code", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getZipcode());
		procedureRequestAS.addInputParam("@i_economic_sector", ICTSTypes.SQLVARCHAR,
				inCreateCustomerRequest.getEconomicSector());

//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
//throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
//Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			CreateCustomerResponse returnCreateCustomerResponse = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<CreateCustomerResponse>() {
						@Override
						public CreateCustomerResponse mapRow(ResultSetMapper resultSetMapper, int index) {
							CreateCustomerResponse dto = new CreateCustomerResponse();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outCreateCustomerResponse = returnCreateCustomerResponse;
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			CreateCustomerResponse returnCreateCustomerResponse = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<CreateCustomerResponse>() {
						@Override
						public CreateCustomerResponse mapRow(ResultSetMapper resultSetMapper, int index) {
							CreateCustomerResponse dto = new CreateCustomerResponse();

							dto.messageInstance().setCode(resultSetMapper.getInteger(1));
							dto.messageInstance().setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outCreateCustomerResponse.setMessage(returnCreateCustomerResponse.getMessage());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(2).getData().getRows().size() > 0) {
			// ---------NO Array
			CreateCustomerResponse returnCreateCustomerResponse = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<CreateCustomerResponse>() {
						@Override
						public CreateCustomerResponse mapRow(ResultSetMapper resultSetMapper, int index) {
							CreateCustomerResponse dto = new CreateCustomerResponse();

							dto.setCustomerCobisCode(resultSetMapper.getInteger(1));
							return dto;
						}
					}, false);

			outCreateCustomerResponse.setCustomerCobisCode(returnCreateCustomerResponse.getCustomerCobisCode());
			// break;

		} else {
			mapBlank++;

		}

//End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: createCustomer");
		// returns data
		return outCreateCustomerResponse;
	}

	/**
          * Encrypt Data
          */
         @Override
			// Return List
			public  ResponseEncriptData  encryptData(RequestEncriptData inRequestEncriptData  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: encryptData");
      ResponseEncriptData outSingleResponseEncriptData  = new ResponseEncriptData();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_encryptData");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500088");
      procedureRequestAS.addInputParam("@i_password",ICTSTypes.SQLVARCHAR,inRequestEncriptData.getPassword());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                	ResponseEncriptData returnResponseEncriptData = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseEncriptData>() { 
                    @Override
                    public ResponseEncriptData mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseEncriptData dto = new ResponseEncriptData();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                          dto.setPassword(resultSetMapper.getString(2));
							dto.messageInstance().setMessage(resultSetMapper.getString(3));
							dto.messageInstance().setCode(resultSetMapper.getInteger(4));
                    return dto;
                    }
                    },false);
                    outSingleResponseEncriptData=returnResponseEncriptData ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: encryptData");
        //returns data
        return outSingleResponseEncriptData;
      }

	/**
	 * Service to generate and send an OTP to the client
	 */
	@Override
	// Have only one return single result
	public ResponseOtp generateTransactionFactor(RequestOtp inRequestOtp) throws CTSRestException {
		LOGGER.logDebug("Start service execution: generateTransactionFactor");
		ResponseOtp outSingleResponseOtp = new ResponseOtp();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..administra_token");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500090");
		procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
				String.valueOf(inRequestOtp.getExternalCustomerId()));

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ----------------Assume SingleResult
			ResponseOtp returnResponseOtp = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0),
					new RowMapper<ResponseOtp>() {
						@Override
						public ResponseOtp mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseOtp dto = new ResponseOtp();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							dto.messageInstance().setCode(resultSetMapper.getInteger(2));
							dto.messageInstance().setMessage(resultSetMapper.getString(3));
							return dto;
						}
					}, false);
			outSingleResponseOtp = returnResponseOtp;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: generateTransactionFactor");
		// returns data
		return outSingleResponseOtp;
	}

	/**
          * Check Account Details
          */
         @Override
			// Return DTO
			public  ResponseGetBalancesDetail  getBalancesDetail(RequestGetBalancesDetail inRequestGetBalancesDetail  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: getBalancesDetail");
      ResponseGetBalancesDetail outSingleResponseGetBalancesDetail  = new ResponseGetBalancesDetail();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_get_balances_detail_api");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500102");
      procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inRequestGetBalancesDetail.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_accountNumber",ICTSTypes.SQLVARCHAR,inRequestGetBalancesDetail.getAccountNumber());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    ResponseGetBalancesDetail returnResponseGetBalancesDetail = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseGetBalancesDetail>() { 
                    @Override
                    public ResponseGetBalancesDetail mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseGetBalancesDetail dto = new ResponseGetBalancesDetail();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                          dto.setAccountName(resultSetMapper.getString(4));
                          dto.setAccountStatus(resultSetMapper.getString(5));
                          dto.setAvailableBalance(resultSetMapper.getBigDecimal(6));
                          dto.setAverageBalance(resultSetMapper.getBigDecimal(7));
                          dto.setCurrencyId(resultSetMapper.getInteger(8));
                          dto.setDeliveryAddress(resultSetMapper.getString(9));
                          dto.setFreezingsNumber(resultSetMapper.getInteger(10));
                          dto.setFrozenAmount(resultSetMapper.getBigDecimal(11));
                          dto.setLastCutoffBalance(resultSetMapper.getString(12));
                          dto.setLastOperationDate(resultSetMapper.getString(13));
                          dto.setOpeningDate(resultSetMapper.getString(14));
                          dto.setOverdraftAmount(resultSetMapper.getBigDecimal(15));
                          dto.setProductId(resultSetMapper.getInteger(16));
                          dto.setToDrawBalance(resultSetMapper.getBigDecimal(17));
                          dto.setAccountingBalance(resultSetMapper.getBigDecimal(18));
                          dto.setOfficial(resultSetMapper.getInteger(19));
                          dto.setClabeAccountNumber(resultSetMapper.getString(20));
                          dto.setIdDebitCard(resultSetMapper.getInteger(21));
                          dto.setDebitCardNumber(resultSetMapper.getString(22));
                          dto.setStateDebitCard(resultSetMapper.getString(23));
							dto.messageInstance().setCode(resultSetMapper.getInteger(2));
							dto.messageInstance().setMessage(resultSetMapper.getString(3));
                    return dto;
                    }
                    },false);
                    outSingleResponseGetBalancesDetail=returnResponseGetBalancesDetail ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: getBalancesDetail");
        //returns data
        return outSingleResponseGetBalancesDetail;
      }

	    /**
	    * Get Beneficiary Saving Account
	    */
	   @Override
		//Have DTO
		public GetBeneficiaryResponse getBeneficiary(GetBeneficiaryRequest inGetBeneficiaryRequest  )throws CTSRestException{
		LOGGER.logDebug("Start service execution: getBeneficiary");
		GetBeneficiaryResponse outGetBeneficiaryResponse  = new GetBeneficiaryResponse();
		    
		//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_bvirtual..sp_beneficiaries_mant_api");
		
		  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500099");
		procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inGetBeneficiaryRequest.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_numero_producto",ICTSTypes.SQLVARCHAR,inGetBeneficiaryRequest.getAccount());
		procedureRequestAS.addInputParam("@i_operacion",ICTSTypes.SQLCHAR,"S");
		
		//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		//throw error
		if(errors!= null && errors.size()> 0){
		LOGGER.logDebug("Procedure execution returns error");
		if ( LOGGER.isDebugEnabled() ) {
		for (int i = 0; i < errors.size(); i++) {
		LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		}
		}
		throw new CTSRestException("Procedure Response has errors", null, errors);
		}

		Integer index = response.getResultSets().size();
		//Init map returns
		int mapTotal=0;
		int mapBlank=0;
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(index - 2).getData().getRows().size()>0) {	
									//---------NO Array
									GetBeneficiaryResponse returnGetBeneficiaryResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(index - 2), new RowMapper<GetBeneficiaryResponse>() { 
		              @Override
		              public GetBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		              GetBeneficiaryResponse dto = new GetBeneficiaryResponse();
		              
		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		              return dto;
		              }
		              },false);
		
		              outGetBeneficiaryResponse.setSuccess(returnGetBeneficiaryResponse.isSuccess());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(index - 1).getData().getRows().size()>0) {	
									//---------NO Array
									GetBeneficiaryResponse returnGetBeneficiaryResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(index - 1), new RowMapper<GetBeneficiaryResponse>() { 
		              @Override
		              public GetBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		              GetBeneficiaryResponse dto = new GetBeneficiaryResponse();
		              
								dto.messageInstance().setCode(resultSetMapper.getInteger(1));
								dto.messageInstance().setMessage(resultSetMapper.getString(2));
		              return dto;
		              }
		              },false);
		
		              outGetBeneficiaryResponse.setMessage(returnGetBeneficiaryResponse.getMessage());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		      
		      if(index==3){
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									BeneficiariesResponse[] returnGetBeneficiaryResponse = MapperResultUtil.mapToArray(response.getResultSets().get(0), new RowMapper<BeneficiariesResponse>() { 
		              @Override
		              public BeneficiariesResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		            	  BeneficiariesResponse dto = new BeneficiariesResponse();
		              
		            	  		dto.setNames(resultSetMapper.getString(1));
		            	  		dto.setLastName(resultSetMapper.getString(2));
								dto.setSecondLastName(resultSetMapper.getString(3));
								dto.setBirthDate(resultSetMapper.getDate(4).toString());
								dto.setRelationship(resultSetMapper.getString(5));
								dto.setPhoneNumber(resultSetMapper.getString(6));
								dto.setZipcode(resultSetMapper.getString(7));
								dto.setProvince(resultSetMapper.getString(8));
								dto.setCity(resultSetMapper.getString(9));
								dto.setColony(resultSetMapper.getString(10));
								dto.setLocation(resultSetMapper.getString(11));
								dto.setAddress(resultSetMapper.getString(12));
								dto.setPercentage(resultSetMapper.getInteger(13));
		              return dto;
		              }
		              },false);
		
		              outGetBeneficiaryResponse.setBeneficiaries(returnGetBeneficiaryResponse);
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		      }
		    
		//End map returns
		if(mapBlank!=0&&mapBlank==mapTotal){
		LOGGER.logDebug("No data found");
		throw new CTSRestException("404",null);
		}
		
		  LOGGER.logDebug("Ends service execution: getBeneficiary");
		  //returns data
		  return outGetBeneficiaryResponse;
		}

	
	/**
	 * Get catalog
	 */
	@Override
	// Have DTO
	public ResponseCatalog getCatalog(RequestCatalog inRequestCatalog) throws CTSRestException {
		LOGGER.logDebug("Start service execution: getCatalog");
		ResponseCatalog outResponseCatalog = new ResponseCatalog();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_get_catalog_data");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500087");
		procedureRequestAS.addInputParam("@i_catalog", ICTSTypes.SQLVARCHAR, inRequestCatalog.getCatalogueTable());

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			CatalogueItems[] returnCatalogueItems = MapperResultUtil.mapToArray(response.getResultSets().get(0),
					new RowMapper<CatalogueItems>() {
						@Override
						public CatalogueItems mapRow(ResultSetMapper resultSetMapper, int index) {
							CatalogueItems dto = new CatalogueItems();

							dto.setCode(resultSetMapper.getString(1));
							dto.setName(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseCatalog.setCatalogueItems(returnCatalogueItems);
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			Message returnMessage = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1),
					new RowMapper<Message>() {
						@Override
						public Message mapRow(ResultSetMapper resultSetMapper, int index) {
							Message dto = new Message();

							dto.setCode(resultSetMapper.getInteger(1));
							dto.setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseCatalog.setMessage(returnMessage);
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(2).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseCatalog returnResponseCatalog = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2),
					new RowMapper<ResponseCatalog>() {
						@Override
						public ResponseCatalog mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseCatalog dto = new ResponseCatalog();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outResponseCatalog.setSuccess(true);
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: getCatalog");
		// returns data
		return outResponseCatalog;
	}
	
	    /**
	    * Service to obtain the detail of movements of an existing savings account
	    */
	   @Override
		//Have DTO
		public ResponseGetMovementsDetail getMovementsDetail(RequestGetMovementsDetail inRequestGetMovementsDetail  )throws CTSRestException{
		LOGGER.logDebug("Start service execution: getMovementsDetail");
		ResponseGetMovementsDetail outResponseGetMovementsDetail  = new ResponseGetMovementsDetail();

		//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_tr04_cons_mov_ah_api");

		  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500106");
		procedureRequestAS.addInputParam("@i_cta",ICTSTypes.SQLVARCHAR,inRequestGetMovementsDetail.getAccountNumber());
		procedureRequestAS.addInputParam("@i_fecha_ini",ICTSTypes.SQLVARCHAR,inRequestGetMovementsDetail.getMinDate());
		procedureRequestAS.addInputParam("@i_fecha_fin",ICTSTypes.SQLVARCHAR,inRequestGetMovementsDetail.getMaxDate());
		procedureRequestAS.addInputParam("@i_sec_unico",ICTSTypes.SQLINT4,String.valueOf(inRequestGetMovementsDetail.getSequential()));
		procedureRequestAS.addInputParam("@i_tipo",ICTSTypes.SQLCHAR,"T");
		procedureRequestAS.addInputParam("@i_servicio",ICTSTypes.SQLINT1,"8");
		procedureRequestAS.addInputParam("@i_cliente",ICTSTypes.SQLINT4,String.valueOf(inRequestGetMovementsDetail.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_operacion",ICTSTypes.SQLCHAR,"A");
		procedureRequestAS.addInputParam("@i_nro_registros",ICTSTypes.SQLINT4,String.valueOf(inRequestGetMovementsDetail.getNumberOfMovements()));
		procedureRequestAS.addInputParam("@i_mov_id",ICTSTypes.SQLINT4,String.valueOf(inRequestGetMovementsDetail.getMovementId()));

		//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		//throw error
		if(errors!= null && errors.size()> 0){
		LOGGER.logDebug("Procedure execution returns error");
		if ( LOGGER.isDebugEnabled() ) {
		for (int i = 0; i < errors.size(); i++) {
		LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		}
		}
		throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		//Init map returns
		int mapTotal=0;
		int mapBlank=0;

		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
									//---------NO Array
									ResponseGetMovementsDetail returnResponseGetMovementsDetail = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseGetMovementsDetail>() {
		              @Override
		              public ResponseGetMovementsDetail mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseGetMovementsDetail dto = new ResponseGetMovementsDetail();

		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		              return dto;
		              }
		              },false);

		              outResponseGetMovementsDetail.setSuccess(returnResponseGetMovementsDetail.isSuccess());
		                  // break;

		      }else {
		      mapBlank++;

		      }

		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {
									//---------NO Array
									ResponseGetMovementsDetail returnResponseGetMovementsDetail = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseGetMovementsDetail>() {
		              @Override
		              public ResponseGetMovementsDetail mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseGetMovementsDetail dto = new ResponseGetMovementsDetail();

								dto.messageInstance().setCode(resultSetMapper.getInteger(1));
								dto.messageInstance().setMessage(resultSetMapper.getString(2));
		              return dto;
		              }
		              },false);

		              outResponseGetMovementsDetail.setMessage(returnResponseGetMovementsDetail.getMessage());
		                  // break;

		      }else {
		      mapBlank++;

		      }

		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().size()>2&&response.getResultSets().get(2).getData().getRows().size()>0) {
									//---------NO Array
									ResponseGetMovementsDetail returnResponseGetMovementsDetail = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseGetMovementsDetail>() {
		              @Override
		              public ResponseGetMovementsDetail mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseGetMovementsDetail dto = new ResponseGetMovementsDetail();

		                    dto.setNumberOfResults(resultSetMapper.getInteger(1));
		              return dto;
		              }
		              },false);

		              outResponseGetMovementsDetail.setNumberOfResults(returnResponseGetMovementsDetail.getNumberOfResults());
		                  // break;

		      }else {
		      mapBlank++;

		      }

		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().size()>3&&response.getResultSets().get(3).getData().getRows().size()>0) {
									//---------NO Array
		      	AccountStatementArray[] returnResponseGetMovementsDetail = MapperResultUtil.mapToArray(response.getResultSets().get(3), new RowMapper<AccountStatementArray>() {
		              @Override
		              public AccountStatementArray mapRow(ResultSetMapper resultSetMapper, int index) {
		              	AccountStatementArray dto = new AccountStatementArray();

								dto.setAccountingBalance(resultSetMapper.getBigDecimal(1));
								dto.setAlternateCode(resultSetMapper.getInteger(2));
								dto.setAmount(resultSetMapper.getBigDecimal(3));
								dto.setAvailableBalance(resultSetMapper.getBigDecimal(4));
								dto.setConcept(resultSetMapper.getString(5));
								dto.setDescription(resultSetMapper.getString(6));
								dto.setHour(resultSetMapper.getString(7));
								dto.setTracking(resultSetMapper.getString(8));
								dto.setOperationType(resultSetMapper.getString(9));
								dto.setReference(resultSetMapper.getInteger(10));
								dto.setMovementId(resultSetMapper.getInteger(11));
								dto.setSignDC(resultSetMapper.getString(12));
								dto.setTransactionDate(resultSetMapper.getString(13));
								dto.setUniqueSequential(resultSetMapper.getInteger(14));
								dto.setProcessDate(resultSetMapper.getString(15));
								dto.setTarjetNumber(resultSetMapper.getString(16));
								dto.setDestinyAccount(resultSetMapper.getString(17));
								dto.setTypeAccount(resultSetMapper.getString(18));
								dto.setBeneficiary(resultSetMapper.getString(19));
								dto.setReferenceNumber(resultSetMapper.getString(20));
								dto.setCommission(resultSetMapper.getString(21));
								dto.setIva(resultSetMapper.getString(22));
		              return dto;
		              }
		              },false);

		              outResponseGetMovementsDetail.setAccountStatementArray(returnResponseGetMovementsDetail);
		                  // break;

		      }else {
		      mapBlank++;

		      }

		//End map returns
		if(mapBlank!=0&&mapBlank==mapTotal){
		LOGGER.logDebug("No data found");
		throw new CTSRestException("404",null);
		}

		  LOGGER.logDebug("Ends service execution: getMovementsDetail");
		  //returns data
		  return outResponseGetMovementsDetail;
		}

	/**
	 * Municipality By State
	 */
	@Override
	// Have DTO
	public ResponseMunicipalityByState getMunicipalityByState(RequestMunicipalityByState inRequestMunicipalityByState)throws CTSRestException {
		LOGGER.logDebug("Start service execution: getMunicipalityByState");
		ResponseMunicipalityByState outResponseMunicipalityByState = new ResponseMunicipalityByState();

//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_get_municipality_state_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500105");
		procedureRequestAS.addInputParam("@i_state_id", ICTSTypes.SQLVARCHAR,inRequestMunicipalityByState.getStateId());
		procedureRequestAS.addInputParam("@i_zip_code", ICTSTypes.SQLVARCHAR, inRequestMunicipalityByState.getZipCode());
		procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "XXX");
		procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "0");
		procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "0");

//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
//throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
//Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().size()>0  &&
				response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			MunicipalitiesItems[]  municipalities = MapperResultUtil
					.mapToArray(response.getResultSets().get(0), new RowMapper<MunicipalitiesItems>() {
						@Override
						public MunicipalitiesItems mapRow(ResultSetMapper resultSetMapper, int index) {
							MunicipalitiesItems dto = new MunicipalitiesItems();
							dto.setIdMunicipality(resultSetMapper.getString(1));
							dto.setMunicipality(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseMunicipalityByState.setMunicipalitiesItems(municipalities);
			// break;

		} else {
			mapBlank++;

		}



		Message message=new Message();
		message.setMessage(getOutValue(String.class, "@o_message", response.getParams()));
		message.setCode(getOutValue(Integer.class, "@o_code", response.getParams()));
		outResponseMunicipalityByState.setMessage(message);

		if (message != null && message.getCode() == 0) {
			outResponseMunicipalityByState.setSuccess(true);

		} else
			outResponseMunicipalityByState.setSuccess(false);






		LOGGER.logDebug("Ends service execution: getMunicipalityByState");
		// returns data
		return outResponseMunicipalityByState;
	}
    /**
    * Get Own Accounts View
    */
	   @Override
	   //Have DTO
	   public ResponseOwnAccountsView getOwnAccountsView(RequestOwnAccountsView inRequestOwnAccountsView  )throws CTSRestException{
		  LOGGER.logDebug("Start service execution: getOwnAccountsView");
	   ResponseOwnAccountsView outResponseOwnAccountsView  = new ResponseOwnAccountsView();
	       
	   //create procedure
	   ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_consulta_cuentas");
	   
	     procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500103");
	   procedureRequestAS.addInputParam("@i_customer_id",ICTSTypes.SQLINT4,String.valueOf(inRequestOwnAccountsView.getExternalCustomerId()));
	   
	   //execute procedure
	   ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
	
	   List<MessageBlock> errors = ErrorUtil.getErrors(response);
	   //throw error
	   if(errors!= null && errors.size()> 0){
	   LOGGER.logDebug("Procedure execution returns error");
	   if ( LOGGER.isDebugEnabled() ) {
	   for (int i = 0; i < errors.size(); i++) {
	   LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
	   }
	   }
	   throw new CTSRestException("Procedure Response has errors", null, errors);
	   }
	   LOGGER.logDebug("Procedure ok");
	   //Init map returns
	   int mapTotal=0;
	   int mapBlank=0;
	   
	         mapTotal++;
	         if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseOwnAccountsView returnResponseOwnAccountsView = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseOwnAccountsView>() { 
	                 @Override
	                 public ResponseOwnAccountsView mapRow(ResultSetMapper resultSetMapper, int index) {
	                 ResponseOwnAccountsView dto = new ResponseOwnAccountsView();
	                 
	                       dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
	                 return dto;
	                 }
	                 },false);
	
	                 outResponseOwnAccountsView.setSuccess(returnResponseOwnAccountsView.isSuccess());
	                     // break;
	                   
	         }else {
	         mapBlank++;
	
	         }
	       
	         mapTotal++;
	         if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseOwnAccountsView returnResponseOwnAccountsView = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseOwnAccountsView>() { 
	                 @Override
	                 public ResponseOwnAccountsView mapRow(ResultSetMapper resultSetMapper, int index) {
	                 ResponseOwnAccountsView dto = new ResponseOwnAccountsView();
	                 
								dto.messageInstance().setCode(resultSetMapper.getInteger(1));
								dto.messageInstance().setMessage(resultSetMapper.getString(2));
	                 return dto;
	                 }
	                 },false);
	
	                 outResponseOwnAccountsView.setMessage(returnResponseOwnAccountsView.getMessage());
	                     // break;
	                   
	         }else {
	         mapBlank++;
	
	         }
	       
	         mapTotal++;
	         if (response.getResultSets()!=null&&response.getResultSets().size()>2&&response.getResultSets().get(2).getData().getRows().size()>0) {	
									//---------NO Array
									AccountsArray[] returnResponseOwnAccountsView = MapperResultUtil.mapToArray(response.getResultSets().get(2), new RowMapper<AccountsArray>() { 
	                 @Override
	                 public AccountsArray mapRow(ResultSetMapper resultSetMapper, int index) {
	                	 AccountsArray dto = new AccountsArray();
	                	 
							dto.setAvailableBalance(resultSetMapper.getBigDecimal(1));
							dto.setDrawBalance(resultSetMapper.getBigDecimal(2));
							dto.setCurrencyId(resultSetMapper.getInteger(3));
							dto.setCurrencySymbol(resultSetMapper.getString(4));
							dto.setCurrencyName(resultSetMapper.getString(5));
							dto.setProductAlias(resultSetMapper.getString(6));
							dto.setProductId(resultSetMapper.getInteger(7));
							dto.setProductNumber(resultSetMapper.getString(8));
							dto.setProductName(resultSetMapper.getString(9));
							dto.setProductAbbreviation(resultSetMapper.getString(10));
							dto.setAccountingBalance(resultSetMapper.getBigDecimal(11));
							dto.setExpirationDate(resultSetMapper.getString(12));
							dto.setRate(resultSetMapper.getString(13));
							dto.setTotalCredit(resultSetMapper.getBigDecimal(14));
							dto.setClabeInterBank(resultSetMapper.getString(15));
	                 return dto;
	                 }
	                 },false);
	
	                 outResponseOwnAccountsView.setAccountsArray(returnResponseOwnAccountsView);
	                     // break;
	                   
	         }else {
	         mapBlank++;
	
	         }
	       
	   //End map returns
	   if(mapBlank!=0&&mapBlank==mapTotal){
	   LOGGER.logDebug("No data found");
	   throw new CTSRestException("404",null);
	   }
	   
	     LOGGER.logDebug("Ends service execution: getOwnAccountsView");
	     //returns data
	     return outResponseOwnAccountsView;
	   }
	   
	   
		/**
		 * Find State By zip Code API
		 */
		@Override
		// Have DTO
		public StateByZipCodeResponse getStateByZipCode(StateByZipCodeRequest inStateByZipCodeRequest)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: getStateByZipCode");
			StateByZipCodeResponse outStateByZipCodeResponse = new StateByZipCodeResponse();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_getzip_codestate_api");
			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500104");
			procedureRequestAS.addInputParam("@i_zip_code", ICTSTypes.SQLVARCHAR, inStateByZipCodeRequest.getZipCode());
			procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "XXX");
			procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "0");
			procedureRequestAS.addOutputParam("@o_id_state", ICTSTypes.SQLINT4, "0");
			procedureRequestAS.addOutputParam("@o_desc_state", ICTSTypes.SQLVARCHAR, "XXX");
			procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "0");

			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}
			
			Message message=new Message();
			
			message.setMessage(getOutValue(String.class, "@o_message", response.getParams()));
			message.setCode(getOutValue(Integer.class, "@o_code", response.getParams()));
			outStateByZipCodeResponse.setMessage(message);
			outStateByZipCodeResponse.setStateId(getOutValue(String.class, "@o_id_state", response.getParams()));
			outStateByZipCodeResponse
					.setStateDescription(getOutValue(String.class, "@o_desc_state", response.getParams()));
			outStateByZipCodeResponse.setSuccess(getOutValue(Boolean.class, "@o_success", response.getParams()));
			
			if (message != null && message.getCode() == 0) {
				outStateByZipCodeResponse.setSuccess(true);

			} else
				outStateByZipCodeResponse.setSuccess(false);
		
			

			LOGGER.logDebug("Ends service execution: getStateByZipCode");
			// returns data
			return outStateByZipCodeResponse;
		}   

	/**
	 * View Customer Information
	 */
	@Override
	// Have DTO
	public ResponseGetUserEntityInformation getUserEntityInformation(
			RequestGetUserEntityInformation inRequestGetUserEntityInformation) throws CTSRestException {
		LOGGER.logDebug("Start service execution: getUserEntityInformation");
		ResponseGetUserEntityInformation outResponseGetUserEntityInformation = new ResponseGetUserEntityInformation();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_getCustomer");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500092");
		procedureRequestAS.addInputParam("@i_externalCustomerId", ICTSTypes.SQLINT4,
				String.valueOf(inRequestGetUserEntityInformation.getExternalCustomerId()));

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseGetUserEntityInformation returnResponseGetUserEntityInformation = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0),
							new RowMapper<ResponseGetUserEntityInformation>() {
								@Override
								public ResponseGetUserEntityInformation mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseGetUserEntityInformation dto = new ResponseGetUserEntityInformation();

									dto.setSuccess(resultSetMapper.getBooleanWrapper(17));
									dto.setRegistrationDate(resultSetMapper.getCalendar(1));
									dto.setModifyDate(resultSetMapper.getCalendar(2));
									dto.setCompleteName(resultSetMapper.getString(3));
									dto.setEntityType(resultSetMapper.getString(4));
									dto.setIdentityCard(resultSetMapper.getString(5));
									dto.setFirstSurName(resultSetMapper.getString(6));
									dto.setSecondSurName(resultSetMapper.getString(7));
									dto.setGender(resultSetMapper.getString(8));
									dto.setBirthDate(resultSetMapper.getCalendar(9));
									dto.setFirstName(resultSetMapper.getString(10));
									dto.setSecondName(resultSetMapper.getString(11));
									dto.setRFC(resultSetMapper.getString(12));
									dto.setMail(resultSetMapper.getString(13));
									dto.setPhoneNumber(resultSetMapper.getString(14));
									dto.setCustomerLevel(resultSetMapper.getString(15));
									dto.setAddressId(resultSetMapper.getInteger(16));
									dto.messageInstance().setCode(resultSetMapper.getInteger(18));
									dto.messageInstance().setMessage(resultSetMapper.getString(19));
									return dto;
								}
							}, false);

			// outResponseGetUserEntityInformation.set(returnResponseGetUserEntityInformation);
			// break;
			outResponseGetUserEntityInformation = returnResponseGetUserEntityInformation;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: getUserEntityInformation");
		// returns data
		return outResponseGetUserEntityInformation;
	}

	/**
	 * Register Beneficiary Saving Account
	 */
	@Override
	// Have DTO
	public RegisterBeneficiaryResponse registerBeneficiary(RegisterBeneficiaryRequest inRegisterBeneficiaryRequest)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: registerBeneficiary");
		RegisterBeneficiaryResponse outRegisterBeneficiaryResponse = new RegisterBeneficiaryResponse();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_bvirtual..sp_beneficiaries_mant_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500096");
		procedureRequestAS.addInputParam("@i_ente", ICTSTypes.SQLINT4,
				String.valueOf(inRegisterBeneficiaryRequest.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_numero_producto", ICTSTypes.SQLVARCHAR,
				inRegisterBeneficiaryRequest.getAccount());
		procedureRequestAS.addInputParam("@i_operacion", ICTSTypes.SQLCHAR, "I");

		Gson gson = new Gson();
		String JSON = gson.toJson(inRegisterBeneficiaryRequest.getBeneficiaries());
		procedureRequestAS.addInputParam("@i_json_beneficiaries", ICTSTypes.SQLVARCHAR, JSON);

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			RegisterBeneficiaryResponse returnRegisterBeneficiaryResponse = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<RegisterBeneficiaryResponse>() {
						@Override
						public RegisterBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
							RegisterBeneficiaryResponse dto = new RegisterBeneficiaryResponse();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outRegisterBeneficiaryResponse.setSuccess(returnRegisterBeneficiaryResponse.isSuccess());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			RegisterBeneficiaryResponse returnRegisterBeneficiaryResponse = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<RegisterBeneficiaryResponse>() {
						@Override
						public RegisterBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
							RegisterBeneficiaryResponse dto = new RegisterBeneficiaryResponse();

							dto.messageInstance().setCode(resultSetMapper.getInteger(1));
							dto.messageInstance().setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outRegisterBeneficiaryResponse.setMessage(returnRegisterBeneficiaryResponse.getMessage());
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: registerBeneficiary");
		// returns data
		return outRegisterBeneficiaryResponse;
	}

	@Override
	// Have DTO
	public SearchZipCodeResponse searchZipCode(SearchZipCodeRequest inSearchZipCodeRequest) throws CTSRestException {
		LOGGER.logDebug("Start service execution: searchZipCode");

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_search_zipcode");

		SearchZipCodeResponse toReturn = new SearchZipCodeResponse();

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500098");
		procedureRequestAS.addInputParam("@i_zipCode", ICTSTypes.SQLVARCHAR, inSearchZipCodeRequest.getZipCode());
		procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "false");
		procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "XXXX");
		procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "000");

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ListZipCode[] returnListZipCode = MapperResultUtil.mapToArray(response.getResultSets().get(0),
					new RowMapper<ListZipCode>() {
						@Override
						public ListZipCode mapRow(ResultSetMapper resultSetMapper, int index) {
							ListZipCode dto = new ListZipCode();

							dto.setProvinceCode(resultSetMapper.getString(3));
							dto.setCityCode(resultSetMapper.getString(2));
							dto.setCodeColony(resultSetMapper.getString(1));
							return dto;
						}
					}, false);

			toReturn.setZipList(returnListZipCode);

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		toReturn.setSuccess(getOutValue(boolean.class, "@o_success", response.getParams()));
		Message message = new Message();
		message.setMessage(getOutValue(String.class, "@o_message", response.getParams()));
		message.setCode(getOutValue(Integer.class, "@o_code", response.getParams()));

		if (message != null && message.getCode() == 0) {
			toReturn.setSuccess(true);

		} else
			toReturn.setSuccess(false);

		toReturn.setMessage(message);

		LOGGER.logDebug("Ends service execution: searchZipCode");

		return toReturn;

	}
	
	    /**
	    * Update customer address
	    */
	   @Override
		//Have DTO
		public UpdateCustomerAddressResponse updateCustomerAddress(UpdateCustomerAddressRequest inUpdateCustomerAddressRequest  )throws CTSRestException{
		LOGGER.logDebug("Start service execution: updateCustomerAddress");
		UpdateCustomerAddressResponse outUpdateCustomerAddressResponse  = new UpdateCustomerAddressResponse();
		    
		//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_direccion_dml_api");
		
		  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500100");
		procedureRequestAS.addInputParam("@i_operacion",ICTSTypes.SQLCHAR,"U");
		procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_descripcion",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getReferenceAddress());
		procedureRequestAS.addInputParam("@i_tipo",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getAddressTypeCode());
		procedureRequestAS.addInputParam("@i_parroquia",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getTownCode()));
		procedureRequestAS.addInputParam("@i_ciudad",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getCity()));
		procedureRequestAS.addInputParam("@i_oficina",ICTSTypes.SQLINT2,"1");
		procedureRequestAS.addInputParam("@i_provincia",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getProvince()));
		procedureRequestAS.addInputParam("@i_tipo_prop",ICTSTypes.SQLCHAR,String.valueOf(inUpdateCustomerAddressRequest.getPropertyTypeCode()));
		procedureRequestAS.addInputParam("@i_codpostal",ICTSTypes.SQLCHAR,String.valueOf(inUpdateCustomerAddressRequest.getZipcode()));
		procedureRequestAS.addInputParam("@i_calle",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getStreet());
		procedureRequestAS.addInputParam("@i_tiempo_reside",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getTimeCurrentRecide()));
		procedureRequestAS.addInputParam("@i_nro",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getExternalNumber());
		procedureRequestAS.addInputParam("@i_nro_interno",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getInternalNumber());
		procedureRequestAS.addInputParam("@i_localidad",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getSubdivisioncode());
		procedureRequestAS.addInputParam("@i_direct",ICTSTypes.SQLVARCHAR,"S");
		
		//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		//throw error
		if(errors!= null && errors.size()> 0){
		LOGGER.logDebug("Procedure execution returns error");
		if ( LOGGER.isDebugEnabled() ) {
		for (int i = 0; i < errors.size(); i++) {
		LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		}
		}
		throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		//Init map returns
		int mapTotal=0;
		int mapBlank=0;
		
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									UpdateCustomerAddressResponse returnUpdateCustomerAddressResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<UpdateCustomerAddressResponse>() { 
		              @Override
		              public UpdateCustomerAddressResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		              UpdateCustomerAddressResponse dto = new UpdateCustomerAddressResponse();
		              
		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		              return dto;
		              }
		              },false);
		
		              outUpdateCustomerAddressResponse.setSuccess(returnUpdateCustomerAddressResponse.isSuccess());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									UpdateCustomerAddressResponse returnUpdateCustomerAddressResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<UpdateCustomerAddressResponse>() { 
		              @Override
		              public UpdateCustomerAddressResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		              UpdateCustomerAddressResponse dto = new UpdateCustomerAddressResponse();
		              
								dto.messageInstance().setCode(resultSetMapper.getInteger(1));
								dto.messageInstance().setMessage(resultSetMapper.getString(2));
		              return dto;
		              }
		              },false);
		
		              outUpdateCustomerAddressResponse.setMessage(returnUpdateCustomerAddressResponse.getMessage());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		//End map returns
		if(mapBlank!=0&&mapBlank==mapTotal){
		LOGGER.logDebug("No data found");
		throw new CTSRestException("404",null);
		}
		
		  LOGGER.logDebug("Ends service execution: updateCustomerAddress");
		  //returns data
		  return outUpdateCustomerAddressResponse;
		}

	/**
	 * Service to Update Profile
	 */
	@Override
	// Return List
	public List<ResponseUpdateProfile> updateProfile(RequestUpdateProfile inRequestUpdateProfile)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: updateProfile");
		List<ResponseUpdateProfile> outSingleResponseUpdateProfile = new ArrayList<>();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_updateProfile");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500095");
		procedureRequestAS.addInputParam("@i_externalCustomerId", ICTSTypes.SQLINT4,
				String.valueOf(inRequestUpdateProfile.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_email", ICTSTypes.SQLVARCHAR, inRequestUpdateProfile.getEmail());
		procedureRequestAS.addInputParam("@i_phoneNumber", ICTSTypes.SQLVARCHAR,
				inRequestUpdateProfile.getPhoneNumber());

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ----------------Assume Array return
			List<ResponseUpdateProfile> returnResponseUpdateProfile = MapperResultUtil
					.mapToList(response.getResultSets().get(0), new RowMapper<ResponseUpdateProfile>() {
						@Override
						public ResponseUpdateProfile mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseUpdateProfile dto = new ResponseUpdateProfile();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							dto.messageInstance().setMessage(resultSetMapper.getString(2));
							dto.messageInstance().setCode(resultSetMapper.getInteger(3));
							return dto;
						}
					}, false);
			outSingleResponseUpdateProfile = returnResponseUpdateProfile;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: updateProfile");
		// returns data
		return outSingleResponseUpdateProfile;
	}

	@Override
	// Have DTO
	public ResponseValidateCustomerIdentityCard validateCustomerIdentityCard(
			RequestValidateCustomerIdentityCard inRequestValidateCustomerIdentityCard) throws CTSRestException {
		LOGGER.logDebug("Start service execution: validateCustomerIdentityCard");
		ResponseValidateCustomerIdentityCard outResponseValidateCustomerIdentityCard = new ResponseValidateCustomerIdentityCard();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_validate_identity_card_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500093");
		procedureRequestAS.addInputParam("@curp", ICTSTypes.SQLVARCHAR,
				inRequestValidateCustomerIdentityCard.getIdentityCard());

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ----------------SingleResult
			ResponseValidateCustomerIdentityCard returnResponseValidateCustomerIdentityCard = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0),
							new RowMapper<ResponseValidateCustomerIdentityCard>() {
								// ----------------isOutDTO
								@Override
								public ResponseValidateCustomerIdentityCard mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseValidateCustomerIdentityCard dto = new ResponseValidateCustomerIdentityCard();

									dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
									return dto;
								}
							}, false);
			outResponseValidateCustomerIdentityCard.setSuccess(returnResponseValidateCustomerIdentityCard.isSuccess());
		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateCustomerIdentityCard returnResponseValidateCustomerIdentityCard = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(1),
							new RowMapper<ResponseValidateCustomerIdentityCard>() {
								@Override
								public ResponseValidateCustomerIdentityCard mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseValidateCustomerIdentityCard dto = new ResponseValidateCustomerIdentityCard();

									dto.messageInstance().setCode(resultSetMapper.getInteger(1));
									dto.messageInstance().setMessage(resultSetMapper.getString(2));
									return dto;
								}
							}, false);

			outResponseValidateCustomerIdentityCard.setMessage(returnResponseValidateCustomerIdentityCard.getMessage());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(2).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateCustomerIdentityCard returnResponseValidateCustomerIdentityCard = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(2),
							new RowMapper<ResponseValidateCustomerIdentityCard>() {
								@Override
								public ResponseValidateCustomerIdentityCard mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseValidateCustomerIdentityCard dto = new ResponseValidateCustomerIdentityCard();

									dto.setExternalCustomerId(resultSetMapper.getInteger(1));
									return dto;
								}
							}, false);

			outResponseValidateCustomerIdentityCard
					.setExternalCustomerId(returnResponseValidateCustomerIdentityCard.getExternalCustomerId());
			// break;

		} else {
			mapBlank++;

		}
		
		Message message=outResponseValidateCustomerIdentityCard.getMessage();
		
		if(message==null || message.getCode()>0 ) {
			
			outResponseValidateCustomerIdentityCard.setSuccess(false);
		}else {
			
			outResponseValidateCustomerIdentityCard.setSuccess(true);
		}
		

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: validateCustomerIdentityCard");
		// returns data
		return outResponseValidateCustomerIdentityCard;
	}
	
		    /**
		    * Service to register beneficiaries for spei transfers.
		    */
		   @Override
				//Have DTO
				public ResponseRegisterAccountSpei registerAccount(RequestRegisterAccountSpei inRequestRegisterAccountSpei  )throws CTSRestException{
		LOGGER.logDebug("Start service execution: registerAccount");
		ResponseRegisterAccountSpei outResponseRegisterAccountSpei  = new ResponseRegisterAccountSpei();
		    
		//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_register_account_api");
		
		  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500110");
		procedureRequestAS.addInputParam("@i_cta_des",ICTSTypes.SQLVARCHAR,inRequestRegisterAccountSpei.getAccountNumberDestination());
		procedureRequestAS.addInputParam("@i_prod",ICTSTypes.SQLINT1,String.valueOf(inRequestRegisterAccountSpei.getAccountNumber()));
		procedureRequestAS.addInputParam("@i_tipo_tercero",ICTSTypes.SQLCHAR,String.valueOf(inRequestRegisterAccountSpei.getTypeDestinationId()));
		procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inRequestRegisterAccountSpei.getExternalCustomerId()));
		
		//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		//throw error
		if(errors!= null && errors.size()> 0){
		LOGGER.logDebug("Procedure execution returns error");
		if ( LOGGER.isDebugEnabled() ) {
		for (int i = 0; i < errors.size(); i++) {
		LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		}
		}
		throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		//Init map returns
		int mapTotal=0;
		int mapBlank=0;
		
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseRegisterAccountSpei returnResponseRegisterAccountSpei = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseRegisterAccountSpei>() { 
		              @Override
		              public ResponseRegisterAccountSpei mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseRegisterAccountSpei dto = new ResponseRegisterAccountSpei();
		              
		                    dto.setStatusRegister(resultSetMapper.getString(1));
		              return dto;
		              }
		              },false);
		
		              outResponseRegisterAccountSpei.setStatusRegister(returnResponseRegisterAccountSpei.getStatusRegister());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseRegisterAccountSpei returnResponseRegisterAccountSpei = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseRegisterAccountSpei>() { 
		              @Override
		              public ResponseRegisterAccountSpei mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseRegisterAccountSpei dto = new ResponseRegisterAccountSpei();
		              
		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		              return dto;
		              }
		              },false);
		
		              outResponseRegisterAccountSpei.setSuccess(returnResponseRegisterAccountSpei.isSuccess());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(2).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseRegisterAccountSpei returnResponseRegisterAccountSpei = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseRegisterAccountSpei>() { 
		              @Override
		              public ResponseRegisterAccountSpei mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseRegisterAccountSpei dto = new ResponseRegisterAccountSpei();
		              
								dto.messageInstance().setCode(resultSetMapper.getInteger(1));
								dto.messageInstance().setMessage(resultSetMapper.getString(2));
		              return dto;
		              }
		              },false);
		
		              outResponseRegisterAccountSpei.setMessage(returnResponseRegisterAccountSpei.getMessage());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		//End map returns
		if(mapBlank!=0&&mapBlank==mapTotal){
		LOGGER.logDebug("No data found");
		throw new CTSRestException("404",null);
		}
		
		  LOGGER.logDebug("Ends service execution: registerAccount");
		  //returns data
		  return outResponseRegisterAccountSpei;
		}

	/**
	 * Service to create a savings account for an existing customer
	 */
	@Override
	// Have DTO
	public ResponseCreateSavingAccount createSavingAccount(RequestCreateSavingAccount inRequestCreateSavingAccount)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: createSavingAccount");

		ResponseCreateSavingAccount outResponseCreateSavingAccount = new ResponseCreateSavingAccount();

		Message message = new Message();
		outResponseCreateSavingAccount.setMessage(message);

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_apertura_aut_bv_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500097");
		procedureRequestAS.addInputParam("@i_customer", ICTSTypes.SQLINT4,
				String.valueOf(inRequestCreateSavingAccount.getCustomerId()));
		procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "XXXX");
		procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "00000");
		procedureRequestAS.addOutputParam("@o_account", ICTSTypes.SQLVARCHAR, "00000");
		procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "0");

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}
		message.setMessage(getOutValue(String.class, "@o_message", response.getParams()));
		message.setCode(getOutValue(Integer.class, "@o_code", response.getParams()));
		outResponseCreateSavingAccount.setMessage(message);
		outResponseCreateSavingAccount.setAccountNumber(getOutValue(String.class, "@o_account", response.getParams()));
		
		if(outResponseCreateSavingAccount.getAccountNumber()!=null && outResponseCreateSavingAccount.getAccountNumber()!="" && message.getCode()==0) {
			
			outResponseCreateSavingAccount.setSuccess(true);
			
		}else
		{
			
			outResponseCreateSavingAccount.setSuccess(false);
			
		}
		
		

		LOGGER.logDebug("Ends service execution: createSavingAccount");

		return outResponseCreateSavingAccount;

	}
	
	/**
	 * Catalogue Of Locations 
	 */
	@Override
	// Have DTO
	public ResponseSearchLocationCatalog searchLocationCatalog(
			RequestSearchLocationCatalog inRequestSearchLocationCatalog) throws CTSRestException {
		LOGGER.logDebug("Start service execution: searchLocationCatalog");
		ResponseSearchLocationCatalog outResponseSearchLocationCatalog = new ResponseSearchLocationCatalog();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_search_location_catalog_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500109");
		procedureRequestAS.addInputParam("@i_city_code", ICTSTypes.SQLVARCHAR,
				inRequestSearchLocationCatalog.getCity());
		procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "0");
		procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "XXX");
		procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "1");

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseSearchLocationCatalog_addressTypeItem [] returnResponseSearchLocationCatalog_addressTypeItem = MapperResultUtil
					.mapToArray(response.getResultSets().get(0),
							new RowMapper<ResponseSearchLocationCatalog_addressTypeItem>() {
								
								@Override
								public ResponseSearchLocationCatalog_addressTypeItem mapRow(
										ResultSetMapper resultSetMapper, int index) {
									ResponseSearchLocationCatalog_addressTypeItem dto = new ResponseSearchLocationCatalog_addressTypeItem();

									dto.setCode(resultSetMapper.getString(1));
									dto.setValue(resultSetMapper.getString(2));
									return dto;
								}
							}, false);

			outResponseSearchLocationCatalog.setAddressTypeItem(returnResponseSearchLocationCatalog_addressTypeItem);
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}
		
		Message message = new Message();
		
		message.setCode(getOutValue(Integer.class, "@o_code", response.getParams()));
		message.setMessage(getOutValue(String.class, "@o_message", response.getParams()));
		outResponseSearchLocationCatalog.setMessage(message);

		if (message != null && message.getCode() == 0) {
			outResponseSearchLocationCatalog.setSuccess(true);

		} else
			outResponseSearchLocationCatalog.setSuccess(false);

		

		LOGGER.logDebug("Ends service execution: searchLocationCatalog");
		// returns data
		return outResponseSearchLocationCatalog;
	}

	/**
	 * Validate Identity
	 */
	@Override
	// Have DTO
	public ResponseValidateIdentity validateIdentity(RequestValidateIdentity inRequestValidateIdentity)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: validateIdentity");
		ResponseValidateIdentity outResponseValidateIdentity = new ResponseValidateIdentity();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_validate_identity");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500091");
		procedureRequestAS.addInputParam("@i_type", ICTSTypes.SQLVARCHAR, inRequestValidateIdentity.getType());
		procedureRequestAS.addInputParam("@i_imageAnverso", ICTSTypes.SQLVARCHAR,
				inRequestValidateIdentity.getImageAnverso());
		procedureRequestAS.addInputParam("@i_imageReverso", ICTSTypes.SQLVARCHAR,
				inRequestValidateIdentity.getImageReverso());
		procedureRequestAS.addInputParam("@i_imageDomicile", ICTSTypes.SQLVARCHAR,
				inRequestValidateIdentity.getImageDomicile());
		procedureRequestAS.addOutputParam("@salida", ICTSTypes.SQLVARCHAR, "0");

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateIdentity returnResponseValidateIdentity = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseValidateIdentity>() {
						@Override
						public ResponseValidateIdentity mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseValidateIdentity dto = new ResponseValidateIdentity();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outResponseValidateIdentity.setSuccess(returnResponseValidateIdentity.isSuccess());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			Message returnMessage = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1),
					new RowMapper<Message>() {
						@Override
						public Message mapRow(ResultSetMapper resultSetMapper, int index) {
							Message dto = new Message();

							dto.setCode(resultSetMapper.getInteger(1));
							dto.setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseValidateIdentity.setMessage(returnMessage);
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(2).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateIdentity returnResponseValidateIdentity = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseValidateIdentity>() {
						@Override
						public ResponseValidateIdentity mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseValidateIdentity dto = new ResponseValidateIdentity();

							dto.setVerificationNumber(resultSetMapper.getString(1));
							return dto;
						}
					}, false);

			outResponseValidateIdentity.setVerificationNumber(returnResponseValidateIdentity.getVerificationNumber());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(3).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateIdentity returnResponseValidateIdentity = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(3), new RowMapper<ResponseValidateIdentity>() {
						@Override
						public ResponseValidateIdentity mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseValidateIdentity dto = new ResponseValidateIdentity();

							dto.setEventName(resultSetMapper.getString(1));
							return dto;
						}
					}, false);

			outResponseValidateIdentity.setEventName(returnResponseValidateIdentity.getEventName());
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}
		// outResponseValidateIdentity.setSuccess(getOutValue(String.class, "@salida",
		// response.getParams()));

		LOGGER.logDebug("Ends service execution: validateIdentity");
		// returns data
		return outResponseValidateIdentity;
	}

	protected void setctsRestIntegrationService(ICTSRestIntegrationService ctsRestIntegrationService) {
		this.ctsRestIntegrationService = ctsRestIntegrationService;
	}

	protected void unsetctsRestIntegrationService(ICTSRestIntegrationService ctsRestIntegrationService) {
		this.ctsRestIntegrationService = null;
	}

	@SuppressWarnings("unchecked")
	private <T extends Object> T getOutValue(Class<T> type, String name, List<ProcedureResponseParam> params)
			throws CTSRestException {
		for (ProcedureResponseParam param : params) {
			if (param.getName().equals(name)) {
				if (type.getCanonicalName() == "java.lang.String") {
					return (T) param.getValue();
				}
				return parse(type, param.getValue());
			}
		}
		LOGGER.logError("Output param " + name + " not found");
		throw new CTSRestException("404", null);
	}

	@SuppressWarnings("unchecked")
	private <T extends Object> T parse(Class<T> type, String value) {
		if (value != null && !"null".equals(value)) {
			if (value.trim().length() == 0) {
				if (type.getCanonicalName().equals("java.lang.Character")) {
					Character ch = ' ';
					return (T) ch;
				} else {
					return null;
				}
			} else {
				switch (type.getCanonicalName()) {
				case "java.lang.Byte":
					return (T) new Byte(value);
				case "java.lang.Long":
					return (T) new Long(value);
				case "java.lang.Double":
					return (T) new Double(value);
				case "java.lang.Integer":
					return (T) new Integer(value);
				case "java.util.Calendar":
					return (T) ConverterUtil.stringToCalendar(value);
				case "java.lang.Boolean":
					return (T) new Boolean(value);
				case "java.math.BigDecimal":
					return (T) new BigDecimal(value);
				case "java.lang.Character":
					Character ch = value.substring(0, value.length() - 1).charAt(0);
					return (T) ch;
				default:
					break;
				}
			}
		}
		return null;
	}

}
