

    /************************************************************/
    /*                     IMPORTANTE                           */
    /*   Esta aplicacion es parte de los  paquetes bancarios    */
    /*   propiedad de COBISCORP.                                */
    /*   Su uso no autorizado queda  expresamente  prohibido    */
    /*   asi como cualquier alteracion o agregado hecho  por    */
    /*   alguno de sus usuarios sin el debido consentimiento    */
    /*   por escrito de COBISCORP.                              */
    /*   Este programa esta protegido por la ley de derechos    */
    /*   de autor y por las y por las convenciones              */
    /*   internacionales de  propiedad intelectual. Su uso no   */
    /*   autorizado dara  derecho a  COBISCORP para obtener     */
    /*   ordenes de  secuestro o retencion y  para perseguir    */
    /*   penalmente a los autores de cualquier infraccion.      */
    /************************************************************/
    /*   This code was generated by CEN-SG.                     */
    /*   Changes to this file may cause incorrect behavior      */
    /*   and will be lost if the code is regenerated.           */
    /************************************************************/

    package cobiscorp.ecobis.bankingservicesoperations.service.impl;

    import java.lang.reflect.Field;
    import java.util.Map;
    import java.util.HashMap;
    import java.util.List;

    import javax.annotation.Resource;
    import javax.jws.HandlerChain;
    import javax.jws.WebService;
    import javax.xml.ws.WebServiceContext;
    import javax.xml.ws.handler.MessageContext;
    
    import cobiscorp.ecobis.commons.dto.ServiceRequestTO;
    import cobiscorp.ecobis.commons.dto.ServiceResponseTO;
    import cobiscorp.ecobis.commons.dto2.MessageTO;
import cobiscorp.ecobis.commons.dto2.CobisHeader;
	
    import cobiscorp.ecobis.cts.integration.services.ICTSServiceIntegration;
    import cobiscorp.ecobis.bankingservicesoperations.service.security.COBISSecurityManager;
    import cobiscorp.ecobis.bankingservicesoperations.service.security.SessionSecurityKey;
    
    import javax.xml.ws.WebServiceContext;
    import cobiscorp.ecobis.util.ICustomCode;
    import cobiscorp.ecobis.util.ICustomAuthentication;
    import cobiscorp.ecobis.util.Util;
    import com.cobiscorp.cobis.commons.components.ComponentLocator;
    import com.cobiscorp.cobis.commons.exceptions.COBISInfrastructureRuntimeException;
    import com.cobiscorp.cobis.commons.log.ILogger;
    import com.cobiscorp.cobis.commons.log.LogFactory;
    import com.cobiscorp.cobis.cts.sdf.dto2.CTSServiceResponseTO;
    import org.azeckoski.reflectutils.ReflectUtils;
    import java.lang.reflect.Field;
    
        import ws.cobiscorp.ecobis.bankingservicesoperations.service.InterbankFrameReceptionService;
      
import cobiscorp.ecobis.bankingservicesoperations.dto.*;
   
      @WebService(endpointInterface = "ws.cobiscorp.ecobis.bankingservicesoperations.service.InterbankFrameReceptionService"
     )
    public class InterbankFrameReceptionServiceWS implements InterbankFrameReceptionService
    {
    @Resource
    private WebServiceContext wsCtx;

    private static ILogger logger = LogFactory.getLogger(InterbankFrameReceptionServiceWS.class);
    
      /**
      * 
      **/
      @SuppressWarnings("unchecked")
          public PayOrderDetailResponse frameReceptionService(PayOrderDetailRequest inPayOrderDetailRequest) {
      String operationName = "InterbankFrameReceptionService.frameReceptionService";
      ICustomCode customCode = null;
      ICustomAuthentication customAuthentication = null;
      
      if (logger.isTraceEnabled()) {
      logger.logTrace("START frameReceptionService");
      }
      PayOrderDetailResponse response = new PayOrderDetailResponse();
      
      ComponentLocator componentLocator = ComponentLocator.getInstance(this);
      
      ICTSServiceIntegration ctsServiceIntegration = componentLocator.find(ICTSServiceIntegration.class);
      if (ctsServiceIntegration == null) {
      handleErrorMessage(operationName, customCode, new Exception("Could not create implementation of ICTSServiceIntegration"), response);
      return response;
      }

      // Get Header params from context
      SessionSecurityKey wSessionSecurityKey = fillHeaderParamsFromContext(null);
      
      // initializeSession
      String wSessionId = COBISSecurityManager.initializeSession(ctsServiceIntegration, wSessionSecurityKey, response, false);
      if (wSessionId == null) {
      handleErrorMessage(operationName, customCode, response, response);
      return response;
      }

      // getResponseFromCTS
      ServiceRequestTO serviceRequestTO = new ServiceRequestTO();
      serviceRequestTO.setSessionId(wSessionId);

      if( wSessionSecurityKey.getBackendId() != null ){
      serviceRequestTO.setBackEndId(wSessionSecurityKey.getBackendId());
      }
      serviceRequestTO.setServiceId("BankingServicesOperatinons.InterbankWireReceptionService.WireReceptionService_1");
        if(inPayOrderDetailRequest != null) {
        if(com.cobiscorp.cobis.cts.sdf.dto2.CTSServiceResponseTO.class.isAssignableFrom(inPayOrderDetailRequest.getClass())) {
        ReflectUtils.getInstance().setFieldValue(inPayOrderDetailRequest, "success" , null);
        }
        serviceRequestTO.addValue("inPayOrderDetailRequest", inPayOrderDetailRequest);
        }
      
      ServiceResponseTO serviceResponseTO = null;
      try {
      
      serviceResponseTO = ctsServiceIntegration.getResponseFromCTS(serviceRequestTO);
      
      checkInvalidatedSession(serviceResponseTO);
	  
      } catch (COBISInfrastructureRuntimeException e) {
      logger.logError("Error in getResponseFromCTS", e);
      if (80103 == e.getClientErrorCode() || e.getClientErrorMessage().contains("contextId=null")) {
      logger.logInfo("Invalid session, restarting session and re-executing");
			// Para evitar inconsistencias, vuelve a asignar los datos de cabecera desde el contexto
			fillHeaderParamsFromContext(null);
      wSessionId = COBISSecurityManager.initializeSession(ctsServiceIntegration, wSessionSecurityKey, response, true);
      if(wSessionId == null) {
      handleErrorMessage(operationName, customCode, response, response);
      
      return response;
      }
      serviceRequestTO.setSessionId(wSessionId);
      try {
      
      serviceResponseTO = ctsServiceIntegration.getResponseFromCTS(serviceRequestTO);
      
      } catch(Exception ex) {
      logger.logError("Error while re-executing getResponseFromCTS", ex);
      handleErrorMessage(operationName, customCode, ex, response);
      
      return response;
      }
      }
      }
      
        if (serviceResponseTO.getData().containsKey("com.cobiscorp.cobis.cts.service.response.output")) {
        HashMap<String, String> outputs = (HashMap<String, String>) serviceResponseTO.getValue("com.cobiscorp.cobis.cts.service.response.output");
        
          if (outputs.containsKey("@o_result")) {
          
              ReflectUtils.getInstance().setFieldValue(response, "replay" , outputs.get("@o_result"));
            
          }
        
        }
      
      if (CTSServiceResponseTO.class.isAssignableFrom(response.getClass())) {
      // Se asigna el estado de exito y los mensajes
      ReflectUtils.getInstance().setFieldValue(response, "success" , serviceResponseTO.isSuccess());
      }
      List<cobiscorp.ecobis.commons.dto.MessageTO> messages = serviceResponseTO.getMessages();
      if (messages != null) {
      handleErrorMessage(operationName, customCode, serviceResponseTO, response);      
      }
      if (logger.isTraceEnabled()) {
      logger.logTrace("END frameReceptionService");
      }
      
      return response;
      }
    
    private void setFieldValue(Object obj, String fieldName, Object value) {
    try {
    Class<?> cz = obj.getClass();
    Field fld = cz.getDeclaredField(fieldName);
    fld.setAccessible(true);
    fld.set(obj, value);
    } catch (Exception e) {
    logger.logError("Error setting field value.",e);
    e.printStackTrace();
    }
    }
    private void handleErrorMessage(String operationName, ICustomCode  customCode, Object exception, Object serviceResponse)
    
    {
    MessageTO msg = null;
    MessageTO[] msgs = null;
    Boolean isCTSServiceResponseTO = CTSServiceResponseTO.class.isAssignableFrom(serviceResponse.getClass());
    if (exception != null) {
    if (ServiceResponseTO.class.isAssignableFrom(exception.getClass())) {
    ServiceResponseTO serviceResponseTO = (ServiceResponseTO)exception;
    List<cobiscorp.ecobis.commons.dto.MessageTO> messages = serviceResponseTO.getMessages();
    if (messages != null) {
    msgs = new MessageTO[messages.size()];
    int n = 0;
    for (cobiscorp.ecobis.commons.dto.MessageTO messageTO : messages) {
    if (logger.isDebugEnabled()) {
    logger.logDebug(String.format("Message [Code:%s Type:%s Text:%s]", messageTO.getCode(), messageTO.getType(), messageTO.getMessage()));
    }
	
    
    
    
    
    
    
    
    
    msg = new MessageTO();
    msg.setCode(messageTO.getCode());
    msg.setMessage(messageTO.getMessage());
    msg.setType(messageTO.getType());
    msgs[n++] = msg;
    }
    }
    } else if (CTSServiceResponseTO.class.isAssignableFrom(exception.getClass())) {
    CTSServiceResponseTO ctsServiceResponseTO = (CTSServiceResponseTO)exception;
    msgs = ctsServiceResponseTO.getMessages();
    } else if (Exception.class.isAssignableFrom(exception.getClass())) {
    Exception ex = (Exception)exception;
    msg = new MessageTO();
    msg.setCode("");
    msg.setMessage(ex.getMessage());
    msgs = new MessageTO[1];
    msgs[0] = msg;
    }
    if (isCTSServiceResponseTO && msgs != null) {
    ((CTSServiceResponseTO)serviceResponse).setMessages(msgs);
    }
    }
 
    }

    private SessionSecurityKey fillHeaderParamsFromContext(CobisHeader cobisHeader) {
    SessionSecurityKey wSessionSecurityKey=new SessionSecurityKey();
    MessageContext msgCtx = wsCtx.getMessageContext();

    String user =cobisHeader==null?(String) msgCtx.get("userId"):cobisHeader.getUser();
    String password = cobisHeader==null?(String) msgCtx.get("password"):null;
    String applicationId =cobisHeader==null? (String) msgCtx.get("applicationId"):cobisHeader.getApplicationId();
    String backendId =cobisHeader==null? (String) msgCtx.get("backendId"):null;
    Map<String, String> dataMap =  (Map)msgCtx.get("dataMap");

    wSessionSecurityKey.setLogin(user);
    wSessionSecurityKey.setPassword(password);
    wSessionSecurityKey.setApplicationId(applicationId);
    wSessionSecurityKey.setBackendId(backendId);
		
    if(dataMap!=null && dataMap.size()>0){
    wSessionSecurityKey.setDataMap(dataMap);
      }
      return wSessionSecurityKey;
   }
    
    /**
    * Verifica si existe un error por sesion invalida
    */
    @SuppressWarnings("unchecked")
    private void checkInvalidatedSession(ServiceResponseTO serviceResponseTO) {
    List<cobiscorp.ecobis.commons.dto.MessageTO> messages = serviceResponseTO.getMessages();
		if (messages == null) {			
    return;
		}
		for (cobiscorp.ecobis.commons.dto.MessageTO messageTO : messages) {				
    if ("80103".equals(messageTO.getCode()) || messageTO.getMessage().contains("contextId=null")) {					
    throw new COBISInfrastructureRuntimeException(80103, messageTO.getMessage());
    }
		}
		}

    
    }
    