
/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/

package cobiscorp.ecobis.servicecontractoperations.service.rest;

import com.cobiscorp.cobis.cts.rest.client.api.exception.CTSRestException;

import cobiscorp.ecobis.servicecontractoperations.service.IServiceContractOperationsApiService;
import cobiscorp.ecobis.datacontractoperations.dto.CreditAccountRequest;
import cobiscorp.ecobis.datacontractoperations.dto.CreditAccountResponse;
import cobiscorp.ecobis.datacontractoperations.dto.RequestAffiliateCustomer;
import cobiscorp.ecobis.datacontractoperations.dto.RequestAllCustomerQuestions;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseAllCustomerQuestions;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseAffiliateCustomer;
import cobiscorp.ecobis.datacontractoperations.dto.CreateCustomerRequest;
import cobiscorp.ecobis.datacontractoperations.dto.CreateCustomerResponse;
import cobiscorp.ecobis.datacontractoperations.dto.GetBeneficiaryRequest;
import cobiscorp.ecobis.datacontractoperations.dto.GetBeneficiaryResponse;
import cobiscorp.ecobis.datacontractoperations.dto.Message;
import cobiscorp.ecobis.datacontractoperations.dto.RequestCreateSavingAccount;
import cobiscorp.ecobis.datacontractoperations.dto.RequestDeviceActivation;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseCreateSavingAccount;
import cobiscorp.ecobis.datacontractoperations.dto.RequestEncriptData;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseEncriptData;
import cobiscorp.ecobis.datacontractoperations.dto.RequestOtp;
import cobiscorp.ecobis.datacontractoperations.dto.RequestOwnAccountsView;
import cobiscorp.ecobis.datacontractoperations.dto.RequestRegisterAccountSpei;
import cobiscorp.ecobis.datacontractoperations.dto.RequestSearchLocationCatalog;
import cobiscorp.ecobis.datacontractoperations.dto.RequestTransferSpi;
import cobiscorp.ecobis.datacontractoperations.dto.RequestTransferThirdPartyAccount;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseOtp;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseOwnAccountsView;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseRegisterAccountSpei;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseSearchLocationCatalog;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseTransferThirdPartyAccount;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseTransferSpi;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseDeviceActivation;
import cobiscorp.ecobis.datacontractoperations.dto.RequestGetBalancesDetail;
import cobiscorp.ecobis.datacontractoperations.dto.RequestGetColonyByMunicipality;
import cobiscorp.ecobis.datacontractoperations.dto.RequestGetMovementsDetail;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseGetBalancesDetail;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseGetColonyByMunicipality;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseSearchLocationCatalog;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseGetMovementsDetail;
import cobiscorp.ecobis.datacontractoperations.dto.RequestCatalog;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseCatalog;
import cobiscorp.ecobis.datacontractoperations.dto.CatalogueItems;
import cobiscorp.ecobis.datacontractoperations.dto.RequestGetUserEntityInformation;
import cobiscorp.ecobis.datacontractoperations.dto.RequestMunicipalityByState;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseGetUserEntityInformation;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseMunicipalityByState;
import cobiscorp.ecobis.datacontractoperations.dto.RegisterBeneficiaryRequest;
import cobiscorp.ecobis.datacontractoperations.dto.RegisterBeneficiaryResponse;
import cobiscorp.ecobis.datacontractoperations.dto.SearchZipCodeRequest;
import cobiscorp.ecobis.datacontractoperations.dto.SearchZipCodeResponse;
import cobiscorp.ecobis.datacontractoperations.dto.StateByZipCodeRequest;
import cobiscorp.ecobis.datacontractoperations.dto.StateByZipCodeResponse;
import cobiscorp.ecobis.datacontractoperations.dto.UpdateCustomerAddressRequest;
import cobiscorp.ecobis.datacontractoperations.dto.UpdateCustomerAddressResponse;
import cobiscorp.ecobis.datacontractoperations.dto.RequestUpdateProfile;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseUpdateProfile;
import cobiscorp.ecobis.datacontractoperations.dto.RequestValidateCustomerIdentityCard;
import cobiscorp.ecobis.datacontractoperations.dto.RequestValidateDeviceActivation;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseValidateDeviceActivation;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseValidateCustomerIdentityCard;
import cobiscorp.ecobis.datacontractoperations.dto.RequestValidateIdentity;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseValidateIdentity;
import cobiscorp.ecobis.datacontractoperations.dto.CardApplicationRequest;
import cobiscorp.ecobis.datacontractoperations.dto.CardApplicationResponse;
import cobiscorp.ecobis.datacontractoperations.dto.DebitAccountRequest;
import cobiscorp.ecobis.datacontractoperations.dto.DebitAccountResponse;
import cobiscorp.ecobis.datacontractoperations.dto.ValidateTokenRequest;
import cobiscorp.ecobis.datacontractoperations.dto.ValidateTokenResponse;
import cobiscorp.ecobis.datacontractoperations.dto.RequestUpdateCredentials;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseUpdateCredentials;

import org.apache.felix.scr.annotations.*;
import com.cobiscorp.cobis.commons.log.ILogger;
import com.cobiscorp.cobis.commons.log.LogFactory;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Null;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import java.util.ArrayList;
import java.util.List;
import java.io.PrintWriter;
import java.io.StringWriter;

@Path("/cobis/api/Waltmart/ServiceContractOperations")
@Component
@Service({ ServiceContractOperationsApiRest.class })
public class ServiceContractOperationsApiRest {

	@Reference(name = "iServiceContractOperationsApiService", referenceInterface = IServiceContractOperationsApiService.class, bind = "setiServiceContractOperationsApiService", unbind = "unsetiServiceContractOperationsApiService", cardinality = ReferenceCardinality.MANDATORY_UNARY, policy = ReferencePolicy.DYNAMIC)
	IServiceContractOperationsApiService iServiceContractOperationsApiService;
	private static final ILogger LOGGER = LogFactory.getLogger(ServiceContractOperationsApiRest.class);

	protected void setiServiceContractOperationsApiService(
			IServiceContractOperationsApiService iServiceContractOperationsApiService) {
		this.iServiceContractOperationsApiService = iServiceContractOperationsApiService;
	}

	protected void unsetiServiceContractOperationsApiService(
			IServiceContractOperationsApiService iServiceContractOperationsApiService) {
		this.iServiceContractOperationsApiService = null;
	}

	/**
	 * Service to apply credit account
	 */
	@POST
	@Path("/apiOperations/accounts/creditOperation")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response creditOperation(CreditAccountRequest inCreditAccountRequest) {
		LOGGER.logDebug("Start service execution REST: creditOperation");
		CreditAccountResponse outSingleCreditAccountResponse = new CreditAccountResponse();

		if (!validateMandatory(new Data("externalCustomerId", inCreditAccountRequest.getExternalCustomerId()),
				new Data("accountNumber", inCreditAccountRequest.getAccountNumber()),
				new Data("amount", inCreditAccountRequest.getAmount()),
				new Data("commission", inCreditAccountRequest.getCommission()),
				new Data("latitude", inCreditAccountRequest.getLatitude()),
				new Data("longitude", inCreditAccountRequest.getLongitude()),
				new Data("referenceNumber", inCreditAccountRequest.getReferenceNumber()),
				new Data("creditConcept", inCreditAccountRequest.getCreditConcept()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outSingleCreditAccountResponse = iServiceContractOperationsApiService
					.creditOperation(inCreditAccountRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: creditOperation");
		return Response.ok(outSingleCreditAccountResponse).build();

	}

	/**
	 * Afiliate Customer
	 */
	@POST
	@Path("/apiOperations/onboarding/affiliateCustomer")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response affiliateCustomer(RequestAffiliateCustomer inRequestAffiliateCustomer) {
		LOGGER.logDebug("Start service execution REST: affiliateCustomer");
		ResponseAffiliateCustomer outSingleResponseAffiliateCustomer = new ResponseAffiliateCustomer();

		if (!validateMandatory(new Data("externalCustomerId", inRequestAffiliateCustomer.getExternalCustomerId()),
				new Data("accountNumber", inRequestAffiliateCustomer.getAccountNumber()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outSingleResponseAffiliateCustomer = iServiceContractOperationsApiService
					.affiliateCustomer(inRequestAffiliateCustomer);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: affiliateCustomer");
		return Response.ok(outSingleResponseAffiliateCustomer).build();

	}

	/**
	 * Create new customers
	 */
	@POST
	@Path("/apiOperations/customer/createCustomer")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response createCustomer(CreateCustomerRequest inCreateCustomerRequest) {
		LOGGER.logDebug("Start service execution REST: createCustomer");
		CreateCustomerResponse outCreateCustomerResponse = new CreateCustomerResponse();

		if (!validateMandatory(new Data("activity", inCreateCustomerRequest.getActivity()),
				new Data("birthDate", inCreateCustomerRequest.getBirthDate()),
				new Data("gender", inCreateCustomerRequest.getGender()),
				new Data("idNumber", inCreateCustomerRequest.getIdNumber()),
				new Data("lastName", inCreateCustomerRequest.getLastName()),
				new Data("firstName", inCreateCustomerRequest.getFirstName()),
				new Data("nationality", inCreateCustomerRequest.getNationality()),
				new Data("secondLastName", inCreateCustomerRequest.getSecondLastName()),
				new Data("provinceBirth", inCreateCustomerRequest.getProvinceBirth()),
				new Data("identificationNumber", inCreateCustomerRequest.getIdentificationNumber()),
				new Data("identificationType", inCreateCustomerRequest.getIdentificationType()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outCreateCustomerResponse = iServiceContractOperationsApiService.createCustomer(inCreateCustomerRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: createCustomer");
		return Response.ok(outCreateCustomerResponse).build();

	}

	/**
	 * Service to create a savings account for an existing customer
	 */
	@POST
	@Path("/apiOperations/customer/createSavingAccount")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response createSavingAccount(RequestCreateSavingAccount inRequestCreateSavingAccount) {
		LOGGER.logDebug("Start service execution REST: createSavingAccount");
		ResponseCreateSavingAccount outResponseCreateSavingAccount = new ResponseCreateSavingAccount();

		if (!validateMandatory(new Data("customerId", inRequestCreateSavingAccount.getCustomerId()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		} // The request message is not properly formatted

		try {
			outResponseCreateSavingAccount = iServiceContractOperationsApiService
					.createSavingAccount(inRequestCreateSavingAccount);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: createSavingAccount");
		return Response.ok(outResponseCreateSavingAccount).build();

	}

	/**
	 * Encrypt Data
	 */
	@POST
	@Path("/apiOperations/security/encryptData")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response encryptData(RequestEncriptData inRequestEncriptData) {
		LOGGER.logDebug("Start service execution REST: encryptData");
		ResponseEncriptData outSingleResponseEncriptData = new ResponseEncriptData();

		if (!validateMandatory(new Data("password", inRequestEncriptData.getPassword()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outSingleResponseEncriptData = iServiceContractOperationsApiService.encryptData(inRequestEncriptData);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: encryptData");
		return Response.ok(outSingleResponseEncriptData).build();

	}

	/**
	 * Service to generate and send an OTP to the client
	 */
	@POST
	@Path("/apiOperations/password/generateTransactionFactor")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response generateTransactionFactor(RequestOtp inRequestOtp) {
		LOGGER.logDebug("Start service execution REST: generateTransactionFactor");
		ResponseOtp outSingleResponseOtp = new ResponseOtp();

		if (!validateMandatory(new Data("externalCustomerId", inRequestOtp.getExternalCustomerId()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outSingleResponseOtp = iServiceContractOperationsApiService.generateTransactionFactor(inRequestOtp);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: generateTransactionFactor");
		return Response.ok(outSingleResponseOtp).build();

	}

	/**
	 * Check Account Details
	 */
	@POST
	@Path("/apiOperations/accounts/getBalancesDetail")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getBalancesDetail(RequestGetBalancesDetail inRequestGetBalancesDetail) {
		LOGGER.logDebug("Start service execution REST: getBalancesDetail");
		ResponseGetBalancesDetail outSingleResponseGetBalancesDetail = new ResponseGetBalancesDetail();

		if (!validateMandatory(new Data("externalCustomerId", inRequestGetBalancesDetail.getExternalCustomerId()),
				new Data("accountNumber", inRequestGetBalancesDetail.getAccountNumber()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outSingleResponseGetBalancesDetail = iServiceContractOperationsApiService
					.getBalancesDetail(inRequestGetBalancesDetail);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getBalancesDetail");
		return Response.ok(outSingleResponseGetBalancesDetail).build();

	}

	/**
	 * Get Beneficiary Saving Account
	 */
	@POST
	@Path("/apiOperations/onboarding/getBeneficiary")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getBeneficiary(GetBeneficiaryRequest inGetBeneficiaryRequest) {
		LOGGER.logDebug("Start service execution REST: getBeneficiary");
		GetBeneficiaryResponse outGetBeneficiaryResponse = new GetBeneficiaryResponse();

		if (!validateMandatory(new Data("externalCustomerId", inGetBeneficiaryRequest.getExternalCustomerId()),
				new Data("account", inGetBeneficiaryRequest.getAccount()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outGetBeneficiaryResponse = iServiceContractOperationsApiService.getBeneficiary(inGetBeneficiaryRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getBeneficiary");
		return Response.ok(outGetBeneficiaryResponse).build();

	}

	/**
	 * Get catalog
	 */
	@POST
	@Path("/apiOperations/common/getCatalog")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getCatalog(RequestCatalog inRequestCatalog) {
		LOGGER.logDebug("Start service execution REST: getCatalog");
		ResponseCatalog outResponseCatalog = new ResponseCatalog();

		if (!validateMandatory(new Data("catalogueTable", inRequestCatalog.getCatalogueTable()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outResponseCatalog = iServiceContractOperationsApiService.getCatalog(inRequestCatalog);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getCatalog");
		return Response.ok(outResponseCatalog).build();

	}

	/**
	 * Get Own Accounts View
	 */
	@POST
	@Path("/apiOperations/accounts/getOwnAccountsView")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getOwnAccountsView(RequestOwnAccountsView inRequestOwnAccountsView) {
		LOGGER.logDebug("Start service execution REST: getOwnAccountsView");
		ResponseOwnAccountsView outResponseOwnAccountsView = new ResponseOwnAccountsView();

		if (!validateMandatory(new Data("externalCustomerId", inRequestOwnAccountsView.getExternalCustomerId()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseOwnAccountsView = iServiceContractOperationsApiService
					.getOwnAccountsView(inRequestOwnAccountsView);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getOwnAccountsView");
		return Response.ok(outResponseOwnAccountsView).build();

	}

	/**
	 * Service to obtain the detail of movements of an existing savings account
	 */
	@POST
	@Path("/apiOperations/accounts/getMovementsDetail")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getMovementsDetail(RequestGetMovementsDetail inRequestGetMovementsDetail) {
		LOGGER.logDebug("Start service execution REST: getMovementsDetail");
		ResponseGetMovementsDetail outResponseGetMovementsDetail = new ResponseGetMovementsDetail();

		if (!validateMandatory(new Data("accountNumber", inRequestGetMovementsDetail.getAccountNumber()),
				new Data("minDate", inRequestGetMovementsDetail.getMinDate()),
				new Data("maxDate", inRequestGetMovementsDetail.getMaxDate()),
				new Data("externalCustomerId", inRequestGetMovementsDetail.getExternalCustomerId()),
				new Data("numberOfMovements", inRequestGetMovementsDetail.getNumberOfMovements()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseGetMovementsDetail = iServiceContractOperationsApiService
					.getMovementsDetail(inRequestGetMovementsDetail);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getMovementsDetail");
		return Response.ok(outResponseGetMovementsDetail).build();

	}

	/**
	 * Municipality By State
	 */
	@POST
	@Path("/apiOperations/onbording/getMunicipalityByState")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getMunicipalityByState(RequestMunicipalityByState inRequestMunicipalityByState) {
		LOGGER.logDebug("Start service execution REST: getMunicipalityByState");
		ResponseMunicipalityByState outResponseMunicipalityByState = new ResponseMunicipalityByState();

		if (!validateMandatory(new Data("stateId", inRequestMunicipalityByState.getStateId()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseMunicipalityByState = iServiceContractOperationsApiService
					.getMunicipalityByState(inRequestMunicipalityByState);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getMunicipalityByState");
		return Response.ok(outResponseMunicipalityByState).build();

	}

	/**
	 * Find State By getStateByzipCode
	 */
	@POST
	@Path("/apiOperations/onboarding/getStateByzipCode")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getStateByZipCode(StateByZipCodeRequest inStateByZipCodeRequest) {
		LOGGER.logDebug("Start service execution REST: getStateByZipCode");
		StateByZipCodeResponse outStateByZipCodeResponse = new StateByZipCodeResponse();

		if (!validateMandatory(new Data("zipCode", inStateByZipCodeRequest.getZipCode()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outStateByZipCodeResponse = iServiceContractOperationsApiService.getStateByZipCode(inStateByZipCodeRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getStateByZipCode");
		return Response.ok(outStateByZipCodeResponse).build();

	}

	/**
	 * View Customer Information
	 */
	@POST
	@Path("/apiOperations/enrollment/getUserEntityInformation")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getUserEntityInformation(RequestGetUserEntityInformation inRequestGetUserEntityInformation) {
		LOGGER.logDebug("Start service execution REST: getUserEntityInformation");
		ResponseGetUserEntityInformation outResponseGetUserEntityInformation = new ResponseGetUserEntityInformation();

		if (!validateMandatory(
				new Data("externalCustomerId", inRequestGetUserEntityInformation.getExternalCustomerId()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outResponseGetUserEntityInformation = iServiceContractOperationsApiService
					.getUserEntityInformation(inRequestGetUserEntityInformation);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getUserEntityInformation");
		return Response.ok(outResponseGetUserEntityInformation).build();

	}

	/**
	 * Service to register beneficiaries for spei transfers.
	 */
	@POST
	@Path("/apiOperations/accounts/registerAccount")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response registerAccount(RequestRegisterAccountSpei inRequestRegisterAccountSpei) {
		LOGGER.logDebug("Start service execution REST: registerAccount");
		ResponseRegisterAccountSpei outResponseRegisterAccountSpei = new ResponseRegisterAccountSpei();

		if (!validateMandatory(
				new Data("accountNumberDestination", inRequestRegisterAccountSpei.getAccountNumberDestination()),
				new Data("accountNumber", inRequestRegisterAccountSpei.getAccountNumber()),
				new Data("typeDestinationId", inRequestRegisterAccountSpei.getTypeDestinationId()),
				new Data("externalCustomerId", inRequestRegisterAccountSpei.getExternalCustomerId()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseRegisterAccountSpei = iServiceContractOperationsApiService
					.registerAccount(inRequestRegisterAccountSpei);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: registerAccount");
		return Response.ok(outResponseRegisterAccountSpei).build();

	}

	/**
	 * Register Beneficiary Saving Account
	 */
	@POST
	@Path("/apiOperations/onboarding/registerBeneficiary")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response registerBeneficiary(RegisterBeneficiaryRequest inRegisterBeneficiaryRequest) {
		LOGGER.logDebug("Start service execution REST: registerBeneficiary");
		RegisterBeneficiaryResponse outRegisterBeneficiaryResponse = new RegisterBeneficiaryResponse();

		if (!validateMandatory(new Data("beneficiaries.lastName", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.secondLastName", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.street", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.city", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.zipcode", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("externalCustomerId", inRegisterBeneficiaryRequest.getExternalCustomerId()),
				new Data("beneficiaries.birthDate", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.location", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.names", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.externalNumber", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.internalNumber", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("account", inRegisterBeneficiaryRequest.getAccount()),
				new Data("beneficiaries.relationship", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.colony", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.percentage", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.province", inRegisterBeneficiaryRequest.getBeneficiaries()),
				new Data("beneficiaries.phoneNumber", inRegisterBeneficiaryRequest.getBeneficiaries()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outRegisterBeneficiaryResponse = iServiceContractOperationsApiService
					.registerBeneficiary(inRegisterBeneficiaryRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: registerBeneficiary");
		return Response.ok(outRegisterBeneficiaryResponse).build();

	}

	/**
	 * Search Zip Code API
	 */
	@POST
	@Path("/apiOperations/onboarding/searchZipCode")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response searchZipCode(SearchZipCodeRequest inSearchZipCodeRequest) {
		LOGGER.logDebug("Start service execution REST: searchZipCode");
		SearchZipCodeResponse outSingleSearchZipCodeResponse = new SearchZipCodeResponse();

		if (!validateMandatory(new Data("zipCode", inSearchZipCodeRequest.getZipCode()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outSingleSearchZipCodeResponse = iServiceContractOperationsApiService.searchZipCode(inSearchZipCodeRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: searchZipCode");
		return Response.ok(outSingleSearchZipCodeResponse).build();

	}

	/**
	 * Update customer address
	 */
	@POST
	@Path("/apiOperations/customer/updateCustomerAddress")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response updateCustomerAddress(UpdateCustomerAddressRequest inUpdateCustomerAddressRequest) {
		LOGGER.logDebug("Start service execution REST: updateCustomerAddress");
		UpdateCustomerAddressResponse outUpdateCustomerAddressResponse = new UpdateCustomerAddressResponse();

		if (!validateMandatory(new Data("externalCustomerId", inUpdateCustomerAddressRequest.getExternalCustomerId()),
				new Data("referenceAddress", inUpdateCustomerAddressRequest.getReferenceAddress()),
				new Data("addressTypeCode", inUpdateCustomerAddressRequest.getAddressTypeCode()),
				new Data("townCode", inUpdateCustomerAddressRequest.getTownCode()),
				new Data("city", inUpdateCustomerAddressRequest.getCity()),
				new Data("province", inUpdateCustomerAddressRequest.getProvince()),
				new Data("propertyTypeCode", inUpdateCustomerAddressRequest.getPropertyTypeCode()),
				new Data("zipcode", inUpdateCustomerAddressRequest.getZipcode()),
				new Data("street", inUpdateCustomerAddressRequest.getStreet()),
				new Data("timeCurrentRecide", inUpdateCustomerAddressRequest.getTimeCurrentRecide()),
				new Data("externalNumber", inUpdateCustomerAddressRequest.getExternalNumber()),
				new Data("internalNumber", inUpdateCustomerAddressRequest.getInternalNumber()),
				new Data("subdivisioncode", inUpdateCustomerAddressRequest.getSubdivisioncode()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outUpdateCustomerAddressResponse = iServiceContractOperationsApiService
					.updateCustomerAddress(inUpdateCustomerAddressRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: updateCustomerAddress");
		return Response.ok(outUpdateCustomerAddressResponse).build();

	}

	/**
	 * Service to Update Profile
	 */
	@POST
	@Path("/apiOperations/enrollment/updateProfile")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response updateProfile(RequestUpdateProfile inRequestUpdateProfile) {
		LOGGER.logDebug("Start service execution REST: updateProfile");
		List<ResponseUpdateProfile> outSingleResponseUpdateProfile = new ArrayList<>();

		if (!validateMandatory(new Data("externalCustomerId", inRequestUpdateProfile.getExternalCustomerId()),
				new Data("email", inRequestUpdateProfile.getEmail()),
				new Data("phoneNumber", inRequestUpdateProfile.getPhoneNumber()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outSingleResponseUpdateProfile = iServiceContractOperationsApiService.updateProfile(inRequestUpdateProfile);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: updateProfile");
		return Response.ok(outSingleResponseUpdateProfile).build();

	}

	/**
	 * Transfer Spei
	 */
	@POST
	@Path("/apiOperations/transfer/transferSpei")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response transferSpei(RequestTransferSpi inRequestTransferSpi) {
		LOGGER.logDebug("Start service execution REST: transferSpei");
		ResponseTransferSpi outResponseTransferSpi = new ResponseTransferSpi();

		if (!validateMandatory(new Data("externalCustomerId", inRequestTransferSpi.getExternalCustomerId()),
				new Data("originAccountNumber", inRequestTransferSpi.getOriginAccountNumber()),
				new Data("destinationAccountNumber", inRequestTransferSpi.getDestinationAccountNumber()),
				new Data("originAccountAlias", inRequestTransferSpi.getOriginAccountAlias()),
				new Data("destinationAccountAlias", inRequestTransferSpi.getDestinationAccountAlias()),
				new Data("destinationBeneficiaryName", inRequestTransferSpi.getDestinationBeneficiaryName()),
				new Data("amount", inRequestTransferSpi.getAmount()),
				new Data("description", inRequestTransferSpi.getDescription()),
				new Data("bankId", inRequestTransferSpi.getBankId()),
				new Data("bankName", inRequestTransferSpi.getBankName()),
				new Data("destinationAccountOwnerName", inRequestTransferSpi.getDestinationAccountOwnerName()),
				new Data("destinationTypeAccount", inRequestTransferSpi.getDestinationTypeAccount()),
				new Data("ownerName", inRequestTransferSpi.getOwnerName()),
				new Data("detail", inRequestTransferSpi.getDetail()),
				new Data("commission", inRequestTransferSpi.getCommission()),
				new Data("latitude", inRequestTransferSpi.getLatitude()),
				new Data("longitude", inRequestTransferSpi.getLongitude()),
				new Data("originAccountNumber", inRequestTransferSpi.getOriginAccountNumber()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseTransferSpi = iServiceContractOperationsApiService.transferSpei(inRequestTransferSpi);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: transferSpei");
		return Response.ok(outResponseTransferSpi).build();

	}

	/**
	 * Service for transfer to a third party account
	 */
	@POST
	@Path("/apiOperations/transfer/transferThirdPartyAccount")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response transferThirdPartyAccount(RequestTransferThirdPartyAccount inRequestTransferThirdPartyAccount) {
		LOGGER.logDebug("Start service execution REST: transferThirdPartyAccount");
		ResponseTransferThirdPartyAccount outResponseTransferThirdPartyAccount = new ResponseTransferThirdPartyAccount();

		if (!validateMandatory(
				new Data("externalCustomerId", inRequestTransferThirdPartyAccount.getExternalCustomerId()),
				new Data("originAccountNumber", inRequestTransferThirdPartyAccount.getOriginAccountNumber()),
				new Data("destinationAccountNumber", inRequestTransferThirdPartyAccount.getDestinationAccountNumber()),
				new Data("amount", inRequestTransferThirdPartyAccount.getAmount()),
				new Data("description", inRequestTransferThirdPartyAccount.getDescription()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseTransferThirdPartyAccount = iServiceContractOperationsApiService
					.transferThirdPartyAccount(inRequestTransferThirdPartyAccount);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: transferThirdPartyAccount");
		return Response.ok(outResponseTransferThirdPartyAccount).build();

	}

	@POST
	@Path("/apiOperations/onbording/validateCustomerIdentityCard")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response validateCustomerIdentityCard(
			RequestValidateCustomerIdentityCard inRequestValidateCustomerIdentityCard) {
		LOGGER.logDebug("Start service execution REST: validateCustomerIdentityCard");
		ResponseValidateCustomerIdentityCard outResponseValidateCustomerIdentityCard = new ResponseValidateCustomerIdentityCard();

		if (!validateMandatory(new Data("identityCard", inRequestValidateCustomerIdentityCard.getIdentityCard()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outResponseValidateCustomerIdentityCard = iServiceContractOperationsApiService
					.validateCustomerIdentityCard(inRequestValidateCustomerIdentityCard);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: validateCustomerIdentityCard");
		return Response.ok(outResponseValidateCustomerIdentityCard).build();

	}

	/**
	 * Validate Identity
	 */
	@POST
	@Path("/apiOperations/onbording/sendImagesToMati")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response validateIdentity(RequestValidateIdentity inRequestValidateIdentity) {
		LOGGER.logDebug("Start service execution REST: validateIdentity");
		ResponseValidateIdentity outResponseValidateIdentity = new ResponseValidateIdentity();

		if (!validateMandatory(new Data("type", inRequestValidateIdentity.getType()),
				new Data("imageAnverso", inRequestValidateIdentity.getImageAnverso()),
				new Data("imageReverso", inRequestValidateIdentity.getImageReverso()),
				new Data("imageDomicile", inRequestValidateIdentity.getImageDomicile()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("The request message is not properly formatted").build();
		}

		try {
			outResponseValidateIdentity = iServiceContractOperationsApiService
					.validateIdentity(inRequestValidateIdentity);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: validateIdentity");
		return Response.ok(outResponseValidateIdentity).build();

	}

	private class Data {
		private String name;
		private Object value;

		public Data(String name, Object value) {
			super();
			this.name = name;
			this.value = value;
		}

		public String getName() {
			return name;
		}

		public Object getValue() {
			return value;
		}
	}

	private boolean validateMandatory(Data... args) {
		boolean res = true;
		for (Data arg : args) {
			if (arg.getValue() == null) {
				LOGGER.logError("Attribute " + arg.getName() + " is null");
				res = false;
			}
		}
		return res;
	}

	/**
	 * Catalogue Of Locations
	 */
	@POST
	@Path("/apiOperations/onboarding/searchLocationCatalog")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response searchLocationCatalog(RequestSearchLocationCatalog inRequestSearchLocationCatalog) {
		LOGGER.logDebug("Start service execution REST: searchLocationCatalog");
		ResponseSearchLocationCatalog outResponseSearchLocationCatalog = new ResponseSearchLocationCatalog();

		if (!validateMandatory(new Data("city", inRequestSearchLocationCatalog.getCity()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseSearchLocationCatalog = iServiceContractOperationsApiService
					.searchLocationCatalog(inRequestSearchLocationCatalog);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: searchLocationCatalog");
		return Response.ok(outResponseSearchLocationCatalog).build();

	}

	/**
	 * Get Colony by Municipality
	 */
	@POST
	@Path("/apiOperations/onboarding/getColonyByMunicipality")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getColonyByMunicipality(RequestGetColonyByMunicipality inRequestGetColonyByMunicipality) {
		LOGGER.logDebug("Start service execution REST: getColonyByMunicipality");
		ResponseGetColonyByMunicipality outResponseGetColonyByMunicipality = new ResponseGetColonyByMunicipality();

		try {
			outResponseGetColonyByMunicipality = iServiceContractOperationsApiService
					.getColonyByMunicipality(inRequestGetColonyByMunicipality);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getColonyByMunicipality");
		return Response.ok(outResponseGetColonyByMunicipality).build();

	}

	/**
	 * Activate Device
	 */
	@POST
	@Path("/apiOperations/enrollment/deviceActivation")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response activateDevice(RequestDeviceActivation inRequestDeviceActivation) {
		LOGGER.logDebug("Start service execution REST: activateDevice");
		ResponseDeviceActivation outResponseDeviceActivation = new ResponseDeviceActivation();

		if (!validateMandatory(new Data("externalCustomerId", inRequestDeviceActivation.getExternalCustomerId()),
				new Data("phoneNumber", inRequestDeviceActivation.getPhoneNumber()),
				new Data("aliasDevice", inRequestDeviceActivation.getAliasDevice()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseDeviceActivation = iServiceContractOperationsApiService
					.activateDevice(inRequestDeviceActivation);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: activateDevice");
		return Response.ok(outResponseDeviceActivation).build();

	}

	/**
	 * Validate Device Activation
	 */
	@POST
	@Path("/apiOperations/enrollment/validateDeviceActivation")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response validateDeviceActivation(RequestValidateDeviceActivation inRequestValidateDeviceActivation) {
		LOGGER.logDebug("Start service execution REST: validateDeviceActivation");
		ResponseValidateDeviceActivation outResponseValidateDeviceActivation = new ResponseValidateDeviceActivation();

		if (!validateMandatory(
				new Data("externalCustomerId", inRequestValidateDeviceActivation.getExternalCustomerId()),
				new Data("phoneNumber", inRequestValidateDeviceActivation.getPhoneNumber()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseValidateDeviceActivation = iServiceContractOperationsApiService
					.validateDeviceActivation(inRequestValidateDeviceActivation);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: validateDeviceActivation");
		return Response.ok(outResponseValidateDeviceActivation).build();

	}

	/**
	 * Customer Card Application API
	 */
	@POST
	@Path("/apiOperations/customer/customerCardApplication")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response customerCardApplication(CardApplicationRequest inCardApplicationRequest) {
		LOGGER.logDebug("Start service execution REST: customerCardApplication");
		CardApplicationResponse outSingleCardApplicationResponse = new CardApplicationResponse();

		if (!validateMandatory(new Data("externalCustomerId", inCardApplicationRequest.getExternalCustomerId()),
				new Data("accountNumber", inCardApplicationRequest.getAccountNumber()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outSingleCardApplicationResponse = iServiceContractOperationsApiService
					.customerCardApplication(inCardApplicationRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: customerCardApplication");
		return Response.ok(outSingleCardApplicationResponse).build();

	}

	/**
	 * Service to apply debit account
	 */
	@POST
	@Path("/apiOperations/accounts/debitOperation")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response debitOperation(DebitAccountRequest inDebitAccountRequest) {
		LOGGER.logDebug("Start service execution REST: debitOperation");
		DebitAccountResponse outSingleDebitAccountResponse = new DebitAccountResponse();

		if (!validateMandatory(new Data("externalCustomerId", inDebitAccountRequest.getExternalCustomerId()),
				new Data("accountNumber", inDebitAccountRequest.getAccountNumber()),
				new Data("amount", inDebitAccountRequest.getAmount()),
				new Data("commission", inDebitAccountRequest.getCommission()),
				new Data("latitude", inDebitAccountRequest.getLatitude()),
				new Data("longitude", inDebitAccountRequest.getLongitude()),
				new Data("referenceNumber", inDebitAccountRequest.getReferenceNumber()),
				new Data("debitConcept", inDebitAccountRequest.getDebitConcept()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outSingleDebitAccountResponse = iServiceContractOperationsApiService.debitOperation(inDebitAccountRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: debitOperation");
		return Response.ok(outSingleDebitAccountResponse).build();

	}

	/**
	 * Get All Customer Questions
	 */
	@POST
	@Path("/apiOperations/questions/getAllCustomerQuestions")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response getAllCustomerQuestions(RequestAllCustomerQuestions inRequestAllCustomerQuestions) {
		LOGGER.logDebug("Start service execution REST: getAllCustomerQuestions");
		ResponseAllCustomerQuestions outResponseAllCustomerQuestions = new ResponseAllCustomerQuestions();

		if (!validateMandatory(new Data("externalCustomerId", inRequestAllCustomerQuestions.getExternalCustomerId()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outResponseAllCustomerQuestions = iServiceContractOperationsApiService
					.getAllCustomerQuestions(inRequestAllCustomerQuestions);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: getAllCustomerQuestions");
		return Response.ok(outResponseAllCustomerQuestions).build();

	}

	/**
	 * Valdate token transaction factor API
	 */
	@POST
	@Path("/apiOperations/password/validateTransactionFactor")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })
	public Response validateTransactionFactor(ValidateTokenRequest inValidateTokenRequest) {
		LOGGER.logDebug("Start service execution REST: validateTransactionFactor");
		ValidateTokenResponse outSingleValidateTokenResponse = new ValidateTokenResponse();

		if (!validateMandatory(new Data("externalCustomerId", inValidateTokenRequest.getExternalCustomerId()),
				new Data("token", inValidateTokenRequest.getToken()))) {
			LOGGER.logDebug("400 is returned - Required fields are missing");
			return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado")
					.build();
		}

		try {
			outSingleValidateTokenResponse = iServiceContractOperationsApiService
					.validateTransactionFactor(inValidateTokenRequest);
		} catch (CTSRestException e) {
			LOGGER.logError("CTSRestException", e);
			if ("404".equals(e.getMessage())) {
				LOGGER.logDebug("404 is returned - No data found");
				return Response.status(404).entity("No data found").build();
			}

			LOGGER.logDebug("409 is returned - The stored procedure raise an error");
			return Response.status(409).entity(e.getMessageBlockList()).build();
		} catch (Exception e) {
			LOGGER.logDebug("500 is returned - Code exception");
			LOGGER.logError("Exception", e);
			return Response.status(500).entity(e.getMessage()).build();
		}

		LOGGER.logDebug("Ends service execution REST: validateTransactionFactor");
		return Response.ok(outSingleValidateTokenResponse).build();

	}

	/**
          * Service to Update Credentials
          */
        @POST
      @Path("/apiOperations/enrollment/updateCredentials")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  updateCredentials(RequestUpdateCredentials inRequestUpdateCredentials ){
	  LOGGER.logDebug("Start service execution REST: updateCredentials");
      ResponseUpdateCredentials outSingleResponseUpdateCredentials  = new ResponseUpdateCredentials();
          
      if(!validateMandatory(new Data("externalCustomerId", inRequestUpdateCredentials.getExternalCustomerId()), new Data("userName", inRequestUpdateCredentials.getUserName()), new Data("password", inRequestUpdateCredentials.getPassword()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outSingleResponseUpdateCredentials=iServiceContractOperationsApiService.updateCredentials( inRequestUpdateCredentials );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: updateCredentials");
          return Response.ok(outSingleResponseUpdateCredentials).build();
        
      }

}
