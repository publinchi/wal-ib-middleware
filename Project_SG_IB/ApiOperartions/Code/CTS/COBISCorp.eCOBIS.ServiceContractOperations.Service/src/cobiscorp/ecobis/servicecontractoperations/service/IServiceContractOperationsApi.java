
/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/    
package  cobiscorp.ecobis.servicecontractoperations.service;

import cobiscorp.ecobis.commons.dto.ServiceRequestTO;
import cobiscorp.ecobis.commons.dto.ServiceResponseTO;

public interface IServiceContractOperationsApi{

  /**
  * Activate Device
  */
  ServiceResponseTO activateDevice(ServiceRequestTO requestTO);  

  /**
  * Afiliate Customer
  */
  ServiceResponseTO affiliateCustomer(ServiceRequestTO requestTO);  

  /**
  * Authorize Deposit
  */
  ServiceResponseTO authorizeDeposit(ServiceRequestTO requestTO);  

  /**
  * Authorize Deposit Dock
  */
  ServiceResponseTO authorizeDepositDock(ServiceRequestTO requestTO);  

  /**
  * Authorize Purchase
  */
  ServiceResponseTO authorizePurchase(ServiceRequestTO requestTO);  

  /**
  * Authorize Purchase Dock
  */
  ServiceResponseTO authorizePurchaseDock(ServiceRequestTO requestTO);  

  /**
  * Authorize Reversal
  */
  ServiceResponseTO authorizeReversal(ServiceRequestTO requestTO);  

  /**
  * Authorize Reversal Dock
  */
  ServiceResponseTO authorizeReversalDock(ServiceRequestTO requestTO);  

  /**
  * Authorize Withdrawal
  */
  ServiceResponseTO authorizeWithdrawal(ServiceRequestTO requestTO);  

  /**
  * Authorize Withdrawal Dock
  */
  ServiceResponseTO authorizeWithdrawalDock(ServiceRequestTO requestTO);  

  /**
  * Create new customers
  */
  ServiceResponseTO createCustomer(ServiceRequestTO requestTO);  

  /**
  * Service to create a savings account for an existing customer
  */
  ServiceResponseTO createSavingAccount(ServiceRequestTO requestTO);  

  /**
  * Service to apply credit account
  */
  ServiceResponseTO creditOperation(ServiceRequestTO requestTO);  

  /**
  * Customer Card Application API
  */
  ServiceResponseTO customerCardApplication(ServiceRequestTO requestTO);  

  /**
  * Service to apply debit account
  */
  ServiceResponseTO debitOperation(ServiceRequestTO requestTO);  

  /**
  * Define Security Question and Answer
  */
  ServiceResponseTO defineSecurityQA(ServiceRequestTO requestTO);  

  /**
  * Service to  delete a beneficiary.
  */
  ServiceResponseTO deleteBeneficiary(ServiceRequestTO requestTO);  

  /**
  * Encrypt Data
  */
  ServiceResponseTO encryptData(ServiceRequestTO requestTO);  

  /**
  * Service to generate and send an OTP to the client
  */
  ServiceResponseTO generateTransactionFactor(ServiceRequestTO requestTO);  

  /**
  * Get All Customer Questions
  */
  ServiceResponseTO getAllCustomerQuestions(ServiceRequestTO requestTO);  

  /**
  * Check Account Details
  */
  ServiceResponseTO getBalancesDetail(ServiceRequestTO requestTO);  

  /**
  * Get Beneficiary Saving Account
  */
  ServiceResponseTO getBeneficiary(ServiceRequestTO requestTO);  

  /**
  * Get catalog
  */
  ServiceResponseTO getCatalog(ServiceRequestTO requestTO);  

  /**
  * Get Colony by Municipality
  */
  ServiceResponseTO getColonyByMunicipality(ServiceRequestTO requestTO);  

  /**
  * Service to obtain the detail of movements of an existing savings account
  */
  ServiceResponseTO getMovementsDetail(ServiceRequestTO requestTO);  

  /**
  * Municipality By State
  */
  ServiceResponseTO getMunicipalityByState(ServiceRequestTO requestTO);  

  /**
  * Get Own Accounts View
  */
  ServiceResponseTO getOwnAccountsView(ServiceRequestTO requestTO);  

  /**
  * Find State By zip Code API
  */
  ServiceResponseTO getStateByZipCode(ServiceRequestTO requestTO);  

  /**
  * GetStatement List
  */
  ServiceResponseTO getStatementList(ServiceRequestTO requestTO);  

  /**
  * View Customer Information
  */
  ServiceResponseTO getUserEntityInformation(ServiceRequestTO requestTO);  

  /**
  * Service to register beneficiaries for spei transfers.
  */
  ServiceResponseTO registerAccount(ServiceRequestTO requestTO);  

  /**
  * Register Beneficiary Saving Account
  */
  ServiceResponseTO registerBeneficiary(ServiceRequestTO requestTO);  

  /**
  * Catalogue Of Locations
  */
  ServiceResponseTO searchLocationCatalog(ServiceRequestTO requestTO);  

  /**
  * Search Zip Code API
  */
  ServiceResponseTO searchZipCode(ServiceRequestTO requestTO);  

  /**
  * Transfer Spei
  */
  ServiceResponseTO transferSpei(ServiceRequestTO requestTO);  

  /**
  * Service for transfer to a third party account
  */
  ServiceResponseTO transferThirdPartyAccount(ServiceRequestTO requestTO);  

  /**
  * Update Account Beneficiary
  */
  ServiceResponseTO updateAccountBeneficiary(ServiceRequestTO requestTO);  

  /**
  * Update Account Status
  */
  ServiceResponseTO updateAccountStatus(ServiceRequestTO requestTO);  

  /**
  * Update Card Status
  */
  ServiceResponseTO updateCardStatus(ServiceRequestTO requestTO);  

  /**
  * Service to Update Credentials
  */
  ServiceResponseTO updateCredentials(ServiceRequestTO requestTO);  

  /**
  * Update customer address
  */
  ServiceResponseTO updateCustomerAddress(ServiceRequestTO requestTO);  

  /**
  * Service to Update Profile
  */
  ServiceResponseTO updateProfile(ServiceRequestTO requestTO);  

  /**
  * Validate All Security Questions and Answers
  */
  ServiceResponseTO validateAllSecurityQA(ServiceRequestTO requestTO);  

  ServiceResponseTO validateCustomerIdentityCard(ServiceRequestTO requestTO);  

  /**
  * Validate Device Activation
  */
  ServiceResponseTO validateDeviceActivation(ServiceRequestTO requestTO);  

  /**
  * Validate Identity
  */
  ServiceResponseTO validateIdentity(ServiceRequestTO requestTO);  

  /**
  * Valdate token transaction factor API
  */
  ServiceResponseTO validateTransactionFactor(ServiceRequestTO requestTO);  

}

