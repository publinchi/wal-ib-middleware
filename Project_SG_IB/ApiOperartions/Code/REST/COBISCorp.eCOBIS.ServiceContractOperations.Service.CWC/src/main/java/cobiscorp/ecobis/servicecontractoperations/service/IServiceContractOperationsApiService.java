
/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/

package cobiscorp.ecobis.servicecontractoperations.service;

import cobiscorp.ecobis.datacontractoperations.dto.*;
import cobiscorp.ecobis.datacontractoperations.dto.Error;

import com.cobiscorp.cobis.cts.rest.client.api.exception.CTSRestException;
import java.util.List;
import java.util.Map;

public interface IServiceContractOperationsApiService {

	/**
	 * Afiliate Customer
	 */

	// Return list
	public ResponseAffiliateCustomer affiliateCustomer(String xRequestId, String xEndUserRequestDateTime, String xEndUserIp,
			String xChannel, RequestAffiliateCustomer inRequestAffiliateCustomer)
			throws CTSRestException;
	
	/**
	 * Authorize Purchase
	 */

	// Have DTO
	public ResponseAuthorizePurchase authorizePurchase(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RequestAuthorizePurchase inRequestAuthorizePurchase)
			throws CTSRestException;

	/**
	 * Authorize Purchase Dock
	 */

	// Have DTO
	public ResponseAuthorizePurchaseDock authorizePurchaseDock(String xapigwapiid, String legacyid, String clientid,
			String uuid, RequestAuthorizePurchaseDock inRequestAuthorizePurchaseDock) throws CTSRestException;
	  
	/**
	 * Authorize Withdrawal
	 */

	// Have DTO
	public ResponseAuthorizeWithdrawal authorizeWithdrawal(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RequestAuthorizeWithdrawal inRequestAuthorizeWithdrawal)
			throws CTSRestException;
	
	/**
	 * Authorize Withdrawal Dock
	 */

	// Have DTO
	public ResponseAuthorizeWithdrawalDock authorizeWithdrawalDock(String legacyid, String clientid, String uuid,
			String xapigwapiid, RequestAuthorizeWithdrawalDock inRequestAuthorizeWithdrawalDock)
			throws CTSRestException;
	
	/**
	 * Authorize Deposit
	 */

	// Have DTO
	public ResponseAuthorizeDeposit authorizeDeposit(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RequestAuthorizeDeposit inRequestAuthorizeDeposit)
			throws CTSRestException;
	
	/**
	 * Authorize Deposit Dock
	 */

	// Have DTO
	public ResponseAuthorizeDepositDock authorizeDepositDock(String legacyid, String clientid, String uuid,
			String xapigwapiid, RequestAuthorizeDepositDock inRequestAuthorizeDepositDock) throws CTSRestException;

	/**
	 * Authorize Reversal
	 */

	// Have DTO
	public ResponseAuthorizeReversal authorizeReversal(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RequestAuthorizeReversal inRequestAuthorizeReversal)
			throws CTSRestException;

	/**
	 * Create new customers
	 */

	// Have DTO
	public CreateCustomerResponse createCustomer(String xRequestId, String xEndUserRequestDateTime, String xEndUserIp,
			String xChannel, CreateCustomerRequest inCreateCustomerRequest) throws CTSRestException;

	/**
	 * Service to create a savings account for an existing customer
	 */

	// Have DTO
	public ResponseCreateSavingAccount createSavingAccount(RequestCreateSavingAccount inRequestCreateSavingAccount)
			throws CTSRestException;

	/**
	 * Service to apply credit account
	 */

	// Return list
	public CreditAccountResponse creditOperation(String xRequestId, CreditAccountRequest inCreditAccountRequest) throws CTSRestException;

	/**
	 * Encrypt Data
	 */

	// Return list
	public ResponseEncriptData encryptData(RequestEncriptData inRequestEncriptData) throws CTSRestException;

	/**
	 * Delete Beneficiary
	 */

	// Return
	public ResponseDeleteBeneficiary deleteBeneficiary(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RequestDeleteBeneficiary inRequestDeleteBeneficiary)
			throws CTSRestException;
	
	/**
	 * Service to generate and send an OTP to the client
	 */

	// Have only one return single result
	public ResponseOtp generateTransactionFactor(RequestOtp inRequestOtp) throws CTSRestException;

	/**
	 * Check Account Details
	 */

	// Return list
	public ResponseGetBalancesDetail getBalancesDetail(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RequestGetBalancesDetail inRequestGetBalancesDetail)
			throws CTSRestException;

	/**
	 * Get Beneficiary Saving Account
	 */

	// Have DTO
	public GetBeneficiaryResponse getBeneficiary(GetBeneficiaryRequest inGetBeneficiaryRequest) throws CTSRestException;

	/**
	 * Get catalog
	 */

	// Have DTO
	public ResponseCatalog getCatalog(String xRequestId, String xEndUserRequestDateTime, String xEndUserIp,
			String xChannel, RequestCatalog inRequestCatalog) throws CTSRestException;

	/**
	 * Get Client Limits
	 */

	// Have DTO
	public ResponseGetClientLimits getClientLimits(String xrequestid,String xenduserrequestdatetime,String xenduserip,String xchannel, RequestGetClientLimits inRequestGetClientLimits  )throws CTSRestException;		

	/**
	 * Get Colony by Municipality
	 */

	// Have DTO
	public ResponseGetColonyByMunicipality getColonyByMunicipality(
			RequestGetColonyByMunicipality inRequestGetColonyByMunicipality) throws CTSRestException;

	/**
	 * Service to obtain the detail of movements of an existing savings account
	 */

	// Have DTO
	public ResponseGetMovementsDetail getMovementsDetail(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RequestGetMovementsDetail inRequestGetMovementsDetail)
			throws CTSRestException;

	/**
	 * Municipality By State
	 */

	// Have DTO
	public ResponseMunicipalityByState getMunicipalityByState(RequestMunicipalityByState inRequestMunicipalityByState)
			throws CTSRestException;

	/**
	 * Get Own Accounts View
	 */

	// Have DTO
	public ResponseOwnAccountsView getOwnAccountsView(RequestOwnAccountsView inRequestOwnAccountsView)
			throws CTSRestException;
	
	/**
	 * Get Statement List
	 */

	// Have DTO
	public ResponseGetStatementList getStatementList(RequestGetStatementList inRequestGetStatementList)
			throws CTSRestException;
	
	/**
	 * Transaction Limit API
	 */

	// Have DTO
	public ResponseGetTransactionLimit getTransactionLimit(String xrequestid, String xenduserrequestdatetime,
			String xenduserip, String xchannel, RequestGetTransactionLimit inRequestGetTransactionLimit)
			throws CTSRestException;

	/**
	 * Find State By zip Code API
	 */

	// Have DTO
	public StateByZipCodeResponse getStateByZipCode(StateByZipCodeRequest inStateByZipCodeRequest)
			throws CTSRestException;

	/**
	 * View Customer Information
	 */

	// Have DTO
	public ResponseGetUserEntityInformation getUserEntityInformation(
			RequestGetUserEntityInformation inRequestGetUserEntityInformation) throws CTSRestException;

	/**
	 * Service to register beneficiaries for spei transfers.
	 */

	// Have DTO
	public ResponseRegisterAccountSpei registerAccount(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RequestRegisterAccountSpei inRequestRegisterAccountSpei)
			throws CTSRestException;

	/**
	 * Register Beneficiary Saving Account
	 */

	// Have DTO
	public RegisterBeneficiaryResponse registerBeneficiary(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RegisterBeneficiaryRequest inRegisterBeneficiaryRequest)
			throws CTSRestException;

	/**
	 * Catalogue Of Locations
	 */

	// Have DTO
	public ResponseSearchLocationCatalog searchLocationCatalog(
			RequestSearchLocationCatalog inRequestSearchLocationCatalog) throws CTSRestException;

	/**
	 * Search Zip Code API
	 */

	// Have DTO
	public SearchZipCodeResponse searchZipCode(SearchZipCodeRequest inSearchZipCodeRequest) throws CTSRestException;

	/**
	 * Transfer Spei
	 */

	// Have DTO
	public ResponseTransferSpi transferSpei(String xRequestId, String xEndUserRequestDateTime, String xEndUserIp,
			String xChannel, RequestTransferSpi inRequestTransferSpi) throws CTSRestException;

	/**
	 * Service for transfer to a third party account
	 */

	// Have DTO
	public ResponseTransferThirdPartyAccount transferThirdPartyAccount(String xRequestId, String xEndUserRequestDateTime, String xEndUserIp,
			String xChannel, RequestTransferThirdPartyAccount inRequestTransferThirdPartyAccount) throws CTSRestException;

	/**
	 * Update Account Beneficiary
	 */
	// Have DTO
	public UpdateBeneficiaryResponse updateAccountBeneficiary(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, UpdateBeneficiaryRequest inUpdateBeneficiaryRequest)
			throws CTSRestException;
		  
	/**
	 * Update customer address
	 */

	// Have DTO
	public UpdateCustomerAddressResponse updateCustomerAddress(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, UpdateCustomerAddressRequest inUpdateCustomerAddressRequest)
			throws CTSRestException;

	/**
	 * Service to Update Profile
	 */

	// Return list
	public ResponseUpdateProfile updateProfile(String xRequestId, String xEndUserRequestDateTime, String xEndUserIp,
			String xChannel, RequestUpdateProfile inRequestUpdateProfile)
			throws CTSRestException;

	// Have DTO
	public ResponseValidateCustomerIdentityCard validateCustomerIdentityCard(
			RequestValidateCustomerIdentityCard inRequestValidateCustomerIdentityCard) throws CTSRestException;

	/**
	 * Activate Device
	 */

	// Have DTO
	public ResponseDeviceActivation activateDevice(RequestDeviceActivation inRequestDeviceActivation)
			throws CTSRestException;

	/**
	 * Validate Device Activation
	 */

	// Have DTO
	public ResponseValidateDeviceActivation validateDeviceActivation(
			RequestValidateDeviceActivation inRequestValidateDeviceActivation) throws CTSRestException;

	/**
	 * Validate Identity
	 */

	// Have DTO
	public ResponseValidateIdentity validateIdentity(RequestValidateIdentity inRequestValidateIdentity)
			throws CTSRestException;

	// Return DTO
	public CardApplicationResponse customerCardApplication(CardApplicationRequest inCardApplicationRequest)
			throws CTSRestException;

	/**
	 * Get All Customer Questions
	 */

	// Have DTO
	public ResponseAllCustomerQuestions getAllCustomerQuestions(
			RequestAllCustomerQuestions inRequestAllCustomerQuestions) throws CTSRestException;
	
	/**
	 * Define Security Question and Answer
	 */

	// Have DTO
	public ResponseDefineSecurityQA defineSecurityQA(RequestDefineSecurityQA inRequestDefineSecurityQA)
			throws CTSRestException;
	
	/**
	 * Validate All Security Questions and Answers
	 */

	// Have DTO
	public ResponseValidateAllSecurityQA validateAllSecurityQA(
			RequestValidateAllSecurityQA inRequestValidateAllSecurityQA) throws CTSRestException;
	
	/**
	 * Update Account Status
	 */

	// Have DTO
	public ResponseUpdateAccountStatus updateAccountStatus(RequestUpdateAccountStatus inRequestUpdateAccountStatus)
			throws CTSRestException;

	/**
	 * Update Card Status
	 */

	// Have DTO
	public ResponseUpdateCardStatus updateCardStatus(String xRequestId, String xEndUserRequestDateTime,
			String xEndUserIp, String xChannel, RequestUpdateCardStatus inRequestUpdateCardStatus)
			throws CTSRestException;
			
	/**
	 * Service to apply debit account
	 */

	// Return DTO
	public DebitAccountResponse debitOperation(String xRequestId, DebitAccountRequest inDebitAccountRequest) throws CTSRestException;

	/**
	 * Valdate token transaction factor API
	 */

	// Return DTO
	public ValidateTokenResponse validateTransactionFactor(ValidateTokenRequest inValidateTokenRequest)
			throws CTSRestException;

	/**
	* Service to Update Credentials
    */
        
	// Return DTO
	public ResponseUpdateCredentials updateCredentials(RequestUpdateCredentials inRequestUpdateCredentials  )throws CTSRestException;

	/**
	 * Authorize Reversal Dock
	 */

	// Return DTO
	public ResponseAuthorizeReversalDock authorizeReversalDock(String legacyid, String clientid, String uuid,
			String xapigwapiid, RequestAuthorizeReversalDock inRequestAuthorizeReversalDock) throws CTSRestException;
	
	 /**
     * Delete Contact
     */
   
	//Have DTO
	public ResponseDeleteContact deleteContact(RequestDeleteContact inRequestDeleteContact  )throws CTSRestException;

	/**
	* Register Card Pan
    */
        
	//Have DTO
	public ResponseRegisterCardPan getUniqueId( String xrequestid,String xenduserrequestdatetime,String xenduserip, String xchannel, String auth_token, Map<String, String> headersIntegracion, RequestRegisterCardPan inRequestRegisterCardPan)throws CTSRestException;

	/**
	 *Update fields by new changed
	 */
	public void updateFieldsByNewChanged(String operation, String ente)throws CTSRestException;
}
