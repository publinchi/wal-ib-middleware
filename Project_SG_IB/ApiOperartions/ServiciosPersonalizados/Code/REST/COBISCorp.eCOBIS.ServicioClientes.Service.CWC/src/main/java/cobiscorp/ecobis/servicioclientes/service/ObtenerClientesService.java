
    /************************************************************/
    /*                     IMPORTANTE                           */
    /*   Esta aplicacion es parte de los  paquetes bancarios    */
    /*   propiedad de COBISCORP.                                */
    /*   Su uso no autorizado queda  expresamente  prohibido    */
    /*   asi como cualquier alteracion o agregado hecho  por    */
    /*   alguno de sus usuarios sin el debido consentimiento    */
    /*   por escrito de COBISCORP.                              */
    /*   Este programa esta protegido por la ley de derechos    */
    /*   de autor y por las y por las convenciones              */
    /*   internacionales de  propiedad intelectual. Su uso no   */
    /*   autorizado dara  derecho a  COBISCORP para obtener     */
    /*   ordenes de  secuestro o retencion y  para perseguir    */
    /*   penalmente a los autores de cualquier infraccion.      */
    /************************************************************/
    /*   This code was generated by CEN-SG.                     */
    /*   Changes to this file may cause incorrect behavior      */
    /*   and will be lost if the code is regenerated.           */
    /************************************************************/
    
    package  cobiscorp.ecobis.servicioclientes.service;
    
    import com.cobiscorp.cobis.cts.rest.client.api.exception.CTSRestException;
    import com.cobiscorp.cobis.commons.log.ILogger;
    import com.cobiscorp.cobis.commons.log.LogFactory;
    import com.cobiscorp.cobis.cts.rest.client.api.RowMapper;
    import com.cobiscorp.cobis.cts.rest.client.dto.MessageBlock;
    import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureRequestAS;
    import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureResponseAS;
    import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureResponseParam;
    import com.cobiscorp.cobis.cts.rest.client.mapper.MapperResultUtil;
    import com.cobiscorp.cobis.cts.rest.client.mapper.ResultSetMapper;
    import com.cobiscorp.cobis.cts.rest.client.util.ErrorUtil;
    import com.cobiscorp.cobis.cwc.cts.rest.ICTSRestIntegrationService;
    import com.cobiscorp.cobis.jaxrs.publisher.SessionManager;
    import org.apache.felix.scr.annotations.*;
    import java.math.BigDecimal;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Arrays;
    
    import com.cobiscorp.cobis.cts.rest.client.util.ConverterUtil;
    import com.cobiscorp.cobis.cts.rest.client.util.ICTSTypes;
    
    import cobiscorp.ecobis.servicioclientes.service.IObtenerClientesService;
    import cobiscorp.ecobis.clientesdto.dto.*;
   
    @Component
    @Service({IObtenerClientesService.class})
    public class ObtenerClientesService implements IObtenerClientesService{

    @Reference(name = "ctsRestIntegrationService", referenceInterface = ICTSRestIntegrationService.class,
    bind = "setctsRestIntegrationService", unbind = "unsetctsRestIntegrationService", cardinality = ReferenceCardinality.MANDATORY_UNARY,
    policy = ReferencePolicy.DYNAMIC)
    private ICTSRestIntegrationService ctsRestIntegrationService;
    ArrayList<DatosClientes> listaDatosClientes=new ArrayList<>();
    private static final ILogger LOGGER = LogFactory.getLogger(ObtenerClientesService.class);

     @Override
			//Have DTO
			public ClientesResponse obtenerClientesCobis(ClientesRequest inClientesRequest  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: obtenerClientesCobis");
      ClientesResponse outClientesResponse  = new ClientesResponse();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_obtener_clientes");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"185085");
      procedureRequestAS.addInputParam("@limite",ICTSTypes.SQLINT4,String.valueOf(inClientesRequest.getLimite()));
      procedureRequestAS.addOutputParam("@salida",ICTSTypes.SQLVARCHAR,"0");
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
								//---------NO Array
								ClientesResponse returnClientesResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ClientesResponse>() { 
                    @Override
                    public ClientesResponse mapRow(ResultSetMapper resultSetMapper, int index) {
                    ClientesResponse dto = new ClientesResponse();
                    
                          dto.setSuccess(resultSetMapper.getBoolean(1));
                    return dto;
                    }
                    },false);

                    outClientesResponse.setSuccess(true);
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
								//---------NO Array
								Message returnMessage = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<Message>() { 
                    @Override
                    public Message mapRow(ResultSetMapper resultSetMapper, int index) {
                    Message dto = new Message();
                    
                          dto.setCode(resultSetMapper.getInt(1));
                          dto.setMessage(resultSetMapper.getString(2));
                    return dto;
                    }
                    },false);

                    outClientesResponse.setMensaje(returnMessage);
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(2).getData().getRows().size()>0) {	
								//---------NO Array
								DatosClientes []  returnDatosClientes = MapperResultUtil.mapToArray(response.getResultSets().get(2), new RowMapper<DatosClientes>() { 
                    
				
									
					@Override
                    public DatosClientes mapRow(ResultSetMapper resultSetMapper, int index) {
                    DatosClientes dto = new DatosClientes();
                    
                          dto.setEnte(resultSetMapper.getInt(1));
                          dto.setNombre(resultSetMapper.getString(2));
                          dto.setCedula(resultSetMapper.getString(3));
                          dto.setFechaCrea(resultSetMapper.getCalendar(4));
                         // listaDatosClientes.add(returnDatosClientes);
                    return dto;
                    }
                    },false);							 
					
								 
                    outClientesResponse.setDatosClientes(returnDatosClientes);
                        // break;
                      
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
     // outClientesResponse.setSuccess(getOutValue(String.class, "@salida", response.getParams()));
            
        LOGGER.logDebug("Ends service execution: obtenerClientesCobis");
        //returns data
        return outClientesResponse;
      }
    

    protected void setctsRestIntegrationService(ICTSRestIntegrationService ctsRestIntegrationService){
      this.ctsRestIntegrationService = ctsRestIntegrationService;
    }

    protected void unsetctsRestIntegrationService(ICTSRestIntegrationService ctsRestIntegrationService){
      this.ctsRestIntegrationService = null;
    }

    @SuppressWarnings("unchecked")
    private <T extends Object> T getOutValue(Class<T> type, String name, List<ProcedureResponseParam> params) throws CTSRestException {
      for (ProcedureResponseParam param : params) {
        if(param.getName().equals(name)) {
          if(type.getCanonicalName() == "java.lang.String") {
            return (T) param.getValue();
          }
          return parse(type, param.getValue());
        }
      }
      LOGGER.logError("Output param " + name + " not found");
      throw new CTSRestException("404",null);
    }
    
    @SuppressWarnings("unchecked")
    private <T extends Object> T parse(Class<T> type, String value) {
      if (value != null && !"null".equals(value)) {
        if (value.trim().length() == 0) {
          if (type.getCanonicalName().equals("java.lang.Character")) {
            Character ch = ' ';
            return (T) ch;
          } else {
            return null;
          }
        } else {
          switch (type.getCanonicalName()) {
            case "java.lang.Byte":
              return (T) new Byte(value);
            case "java.lang.Long":
              return (T) new Long(value);
            case "java.lang.Double":
              return (T) new Double(value);
            case "java.lang.Integer":
              return (T) new Integer(value);
            case "java.util.Calendar":
              return (T) ConverterUtil.stringToCalendar(value);
            case "java.lang.Boolean":
              return (T) new Boolean(value);
            case "java.math.BigDecimal":
              return (T) new BigDecimal(value);
            case "java.lang.Character":
              Character ch = value.substring(0, value.length() - 1).charAt(0);
              return (T) ch;
            default:
              break;
          }
        }
      }
      return null;
    }
    
    }

  