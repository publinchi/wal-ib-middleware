
/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/

package cobiscorp.ecobis.servicecontractoperations.service;

import com.cobiscorp.cobis.cts.rest.client.api.exception.CTSRestException;
import com.cobiscorp.cobis.commons.log.ILogger;
import com.cobiscorp.cobis.commons.log.LogFactory;
import com.cobiscorp.cobis.cts.rest.client.api.RowMapper;
import com.cobiscorp.cobis.cts.rest.client.dto.MessageBlock;
import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureRequestAS;
import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureResponseAS;
import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureResponseParam;
import com.cobiscorp.cobis.cts.rest.client.mapper.MapperResultUtil;
import com.cobiscorp.cobis.cts.rest.client.mapper.ResultSetMapper;
import com.cobiscorp.cobis.cts.rest.client.util.ErrorUtil;
import com.cobiscorp.cobis.cwc.cts.rest.ICTSRestIntegrationService;
import com.cobiscorp.cobis.jaxrs.publisher.SessionManager;
import com.google.gson.Gson;

import org.apache.felix.scr.annotations.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

import com.cobiscorp.cobis.cts.rest.client.util.ConverterUtil;
import com.cobiscorp.cobis.cts.rest.client.util.ICTSTypes;

import cobiscorp.ecobis.servicecontractoperations.service.IServiceContractOperationsApiService;
import cobiscorp.ecobis.datacontractoperations.dto.*;

@Component
@Service({ IServiceContractOperationsApiService.class })
public class ServiceContractOperationsApiService implements IServiceContractOperationsApiService {

	@Reference(name = "ctsRestIntegrationService", referenceInterface = ICTSRestIntegrationService.class, bind = "setctsRestIntegrationService", unbind = "unsetctsRestIntegrationService", cardinality = ReferenceCardinality.MANDATORY_UNARY, policy = ReferencePolicy.DYNAMIC)
	private ICTSRestIntegrationService ctsRestIntegrationService;
	private static final ILogger LOGGER = LogFactory.getLogger(ServiceContractOperationsApiService.class);



         @Override
			// Return DTO
			public  CreditAccountResponse  creditOperation(CreditAccountRequest inCreditAccountRequest  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: accountCreditOperation");
      CreditAccountResponse outSingleCreditAccountResponse  = new CreditAccountResponse();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_credit_operation_api");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500111");
      procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inCreditAccountRequest.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_accountNumber",ICTSTypes.SQLVARCHAR,inCreditAccountRequest.getAccountNumber());
      procedureRequestAS.addInputParam("@i_amount",ICTSTypes.SQLMONEY,String.valueOf(inCreditAccountRequest.getAmount()));
      procedureRequestAS.addInputParam("@i_commission",ICTSTypes.SQLMONEY,String.valueOf(inCreditAccountRequest.getCommission()));
      procedureRequestAS.addInputParam("@i_latitude",ICTSTypes.SQLFLT8i,String.valueOf(inCreditAccountRequest.getLatitude()));
      procedureRequestAS.addInputParam("@i_longitude",ICTSTypes.SQLFLT8i,String.valueOf(inCreditAccountRequest.getLongitude()));
      procedureRequestAS.addInputParam("@i_referenceNumber",ICTSTypes.SQLVARCHAR,inCreditAccountRequest.getReferenceNumber());
      procedureRequestAS.addInputParam("@i_creditConcept",ICTSTypes.SQLVARCHAR,inCreditAccountRequest.getCreditConcept());
      procedureRequestAS.addInputParam("@i_originCode",ICTSTypes.SQLINT4,String.valueOf(inCreditAccountRequest.getOriginCode()));
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    CreditAccountResponse returnCreditAccountResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<CreditAccountResponse>() { 
                    @Override
                    public CreditAccountResponse mapRow(ResultSetMapper resultSetMapper, int index) {
                    CreditAccountResponse dto = new CreditAccountResponse();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                          dto.setReferenceCode(resultSetMapper.getString(4));
							dto.responseInstance().setCode(resultSetMapper.getInteger(2));
							dto.responseInstance().setMessage(resultSetMapper.getString(3));
                    return dto;
                    }
                    },false);
                    outSingleCreditAccountResponse=returnCreditAccountResponse ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: creditOperation");
        //returns data
        return outSingleCreditAccountResponse;
      }


	 /**
          * Afiliate Customer
          */
         @Override
			// Return List
			public  ResponseAffiliateCustomer affiliateCustomer(RequestAffiliateCustomer inRequestAffiliateCustomer  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: affiliateCustomer");
      ResponseAffiliateCustomer outSingleResponseAffiliateCustomer  = new ResponseAffiliateCustomer();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_affiliate_customer");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500101");
      procedureRequestAS.addInputParam("@i_external_customer_id",ICTSTypes.SQLINT4,String.valueOf(inRequestAffiliateCustomer.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_accountNumber",ICTSTypes.SQLVARCHAR,inRequestAffiliateCustomer.getAccountNumber());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    ResponseAffiliateCustomer returnResponseAffiliateCustomer = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseAffiliateCustomer>() { 
                    @Override
                    public ResponseAffiliateCustomer mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseAffiliateCustomer dto = new ResponseAffiliateCustomer();
                    
                          dto.setSuccess(resultSetMapper.getBoolean(3));
                          dto.setLoginId(resultSetMapper.getInteger(1));
                          dto.setUserCreated(resultSetMapper.getString(2));
							dto.responseInstance().setMessage(resultSetMapper.getString(4));
							dto.responseInstance().setCode(resultSetMapper.getInteger(5));
                    return dto;
                    }
                    },false);
                    outSingleResponseAffiliateCustomer=returnResponseAffiliateCustomer ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: affiliateCustomer");
        //returns data
        return outSingleResponseAffiliateCustomer;
      }
         
		/**
		 * Authorize Purchase
		 */
		@Override
		// Have DTO
		public ResponseAuthorizePurchase authorizePurchase(RequestAuthorizePurchase inRequestAuthorizePurchase)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: authorizePurchase");
			ResponseAuthorizePurchase outResponseAuthorizePurchase = new ResponseAuthorizePurchase();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_auth_purchase_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500132");
			procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
					String.valueOf(inRequestAuthorizePurchase.getExternalCustomerId()));
			procedureRequestAS.addInputParam("@i_uuid", ICTSTypes.SQLVARCHAR, inRequestAuthorizePurchase.getUuid());
			procedureRequestAS.addInputParam("@i_account_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getAccountNumber());
			procedureRequestAS.addInputParam("@i_transmission_date_time_gtm", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getTransmissionDateTimeGmt());
			procedureRequestAS.addInputParam("@i_date", ICTSTypes.SQLVARCHAR, inRequestAuthorizePurchase.getDate());
			procedureRequestAS.addInputParam("@i_time", ICTSTypes.SQLVARCHAR, inRequestAuthorizePurchase.getTime());
			procedureRequestAS.addInputParam("@i_mti", ICTSTypes.SQLVARCHAR, inRequestAuthorizePurchase.getMti());
			procedureRequestAS.addInputParam("@i_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getProcessing().getType());
			procedureRequestAS.addInputParam("@i_processing_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getProcessing().getCode());
			procedureRequestAS.addInputParam("@i_nsu", ICTSTypes.SQLVARCHAR, inRequestAuthorizePurchase.getNsu());
			procedureRequestAS.addInputParam("@i_card_expiration_date", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getCardExpirationDate());
			procedureRequestAS.addInputParam("@i_card_entry_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getCardEntry().getCode());
			procedureRequestAS.addInputParam("@i_pin", ICTSTypes.SQLVARCHAR, inRequestAuthorizePurchase.getCardEntry().getPin());
			procedureRequestAS.addInputParam("@i_mode", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getCardEntry().getMode());
			procedureRequestAS.addInputParam("@i_merchant_category_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getMerchantCategoryCode());
			procedureRequestAS.addInputParam("@i_source_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getValues().getSourceCurrencyCode());
			procedureRequestAS.addInputParam("@i_settlement_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getValues().getSettlementCurrencyCode());
			procedureRequestAS.addInputParam("@i_amount", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestAuthorizePurchase.getValues().getAmount()));
			procedureRequestAS.addInputParam("@i_institution_name", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getInstitutionName());
			procedureRequestAS.addInputParam("@i_terminal_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getTerminalCode());
			procedureRequestAS.addInputParam("@i_retrieval_reference_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getRetrievalReferenceNumber());
			procedureRequestAS.addInputParam("@i_acquirer_country_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizePurchase.getAcquirerCountryCode());
			procedureRequestAS.addInputParam("@i_card_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizePurchase.getTransactionIndicators().isCardPresent()));
			procedureRequestAS.addInputParam("@i_card_holder_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizePurchase.getTransactionIndicators().isCardholderPresent()));
			procedureRequestAS.addInputParam("@i_cvv2_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizePurchase.getTransactionIndicators().isCvv2Present()));
			procedureRequestAS.addInputParam("@i_pin_validated_offline", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizePurchase.getTransactionIndicators().isPinValidatedOffline()));
			
			Gson gson = new Gson();
			String jsonReq = gson.toJson(inRequestAuthorizePurchase);
			procedureRequestAS.addInputParam("@i_json_req", ICTSTypes.SQLVARCHAR, jsonReq);

			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizePurchase returnResponseAuthorizePurchase = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseAuthorizePurchase>() {
							@Override
							public ResponseAuthorizePurchase mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseAuthorizePurchase dto = new ResponseAuthorizePurchase();

								dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
								return dto;
							}
						}, false);

				outResponseAuthorizePurchase.setSuccess(returnResponseAuthorizePurchase.isSuccess());
				// break;

			} else {
				mapBlank++;

			}

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizePurchase returnResponseAuthorizePurchase = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseAuthorizePurchase>() {
							@Override
							public ResponseAuthorizePurchase mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseAuthorizePurchase dto = new ResponseAuthorizePurchase();

								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
								return dto;
							}
						}, false);

				outResponseAuthorizePurchase.setResponse(returnResponseAuthorizePurchase.getResponse());
				// break;

			} else {
				mapBlank++;

			}
	
			
			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}

			LOGGER.logDebug("Ends service execution: authorizePurchase");
			// returns data
			return outResponseAuthorizePurchase;
		}
		
        /**
        * Authorize Purchase Dock
        */
       @Override
			//Have DTO
			public ResponseAuthorizePurchaseDock authorizePurchaseDock(String xapigwapiid,String legacyid,String clientid,String uuid,RequestAuthorizePurchaseDock inRequestAuthorizePurchaseDock  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: authorizePurchaseDock");
    ResponseAuthorizePurchaseDock outResponseAuthorizePurchaseDock  = new ResponseAuthorizePurchaseDock();
        
    //create procedure
    ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_auth_purchase_dock_api");
    
      procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500138");
    procedureRequestAS.addInputParam("@i_account_id",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getAccount_id());
    procedureRequestAS.addInputParam("@i_account_type_indicator",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getAccount_type_indicator());
    procedureRequestAS.addInputParam("@i_acquirer_country_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getAcquirer_country_code());
    procedureRequestAS.addInputParam("@i_authorization_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getAuthorization_code());
    procedureRequestAS.addInputParam("@i_bank_account_number",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getBank_account_number());
    procedureRequestAS.addInputParam("@i_bank_branch_number",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getBank_branch_number());
    procedureRequestAS.addInputParam("@i_brand_response_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getBrand_response_code());
    procedureRequestAS.addInputParam("@i_card_expiration_date",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getCard_expiration_date());
    procedureRequestAS.addInputParam("@i_card_holder_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isCardholder_present()));
    procedureRequestAS.addInputParam("@i_card_id",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getCard_id());
    procedureRequestAS.addInputParam("@i_card_number",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getCard_number());
    procedureRequestAS.addInputParam("@i_card_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isCard_present()));
    procedureRequestAS.addInputParam("@i_crd_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getCard_entry().getCode());
    procedureRequestAS.addInputParam("@i_crd_mode",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getCard_entry().getMode());
    procedureRequestAS.addInputParam("@i_crd_pin",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getCard_entry().getPin());
    procedureRequestAS.addInputParam("@x_apigw-api-id",ICTSTypes.SQLVARCHAR,xapigwapiid);
    procedureRequestAS.addInputParam("@i_establishment",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getEstablishment());
    procedureRequestAS.addInputParam("@i_establishment_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getEstablishment_code());
    procedureRequestAS.addInputParam("@i_funds_transfer_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getFunds_transfer().getType());
    procedureRequestAS.addInputParam("@i_installment_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getInstallment_type());
    procedureRequestAS.addInputParam("@i_installments",ICTSTypes.SQLINT4,String.valueOf(inRequestAuthorizePurchaseDock.getInstallments()));
    procedureRequestAS.addInputParam("@i_merchant_category_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getMerchant_category_code());
    procedureRequestAS.addInputParam("@x_legacy-id",ICTSTypes.SQLVARCHAR,legacyid);
    procedureRequestAS.addInputParam("@i_mti",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getMti());
    procedureRequestAS.addInputParam("@i_nsu",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getNsu());
    procedureRequestAS.addInputParam("@i_p_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getProcessing().getCode());
    procedureRequestAS.addInputParam("@i_p_destiny_account_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getProcessing().getDestiny_account_type());
    procedureRequestAS.addInputParam("@i_p_origin_account_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getProcessing().getOrigin_account_type());
    procedureRequestAS.addInputParam("@i_p_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getProcessing().getType());
    procedureRequestAS.addInputParam("@i_person_id",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getPerson_id());
    procedureRequestAS.addInputParam("@x_client-id",ICTSTypes.SQLVARCHAR,clientid);
    procedureRequestAS.addInputParam("@x_uuid",ICTSTypes.SQLVARCHAR,uuid);
    procedureRequestAS.addInputParam("@i_pos_postal_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getPos_postal_code());
    procedureRequestAS.addInputParam("@i_pre_initial_transaction_uuid",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getPreauthorization().getInitial_transaction_uuid());
    procedureRequestAS.addInputParam("@i_pre_life_cycle",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getPreauthorization().getLife_cycle());
    procedureRequestAS.addInputParam("@i_pre_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getPreauthorization().getType());
    procedureRequestAS.addInputParam("@i_product_id",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getProduct_id());
    procedureRequestAS.addInputParam("@i_product_status",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getProduct_status());
    procedureRequestAS.addInputParam("@i_retrieval_reference_number",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getRetrieval_reference_number());
    procedureRequestAS.addInputParam("@i_terminal_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getTerminal_code());
    procedureRequestAS.addInputParam("@i_terminal_date",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getTerminal_date());
    procedureRequestAS.addInputParam("@i_terminal_time",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getTerminal_time());
    procedureRequestAS.addInputParam("@i_tk_expiration_date",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getToken_data().getExpiration_date());
    procedureRequestAS.addInputParam("@i_tk_requestor_id_token",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getToken_data().getRequestor_id_token());
    procedureRequestAS.addInputParam("@i_tk_status",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getToken_data().getStatus());
    procedureRequestAS.addInputParam("@i_tk_token",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getToken_data().getToken());
    procedureRequestAS.addInputParam("@i_transaction_origin",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getTransaction_origin());
    procedureRequestAS.addInputParam("@i_transmission_date_time_gtm",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getTransmission_date_time_gmt());
    procedureRequestAS.addInputParam("@i_trn_allows_partial_approval",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isAllows_partial_approval()));
    procedureRequestAS.addInputParam("@i_trn_card_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isCard_present()));
    procedureRequestAS.addInputParam("@i_trn_cardholder_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isCardholder_present()));
    procedureRequestAS.addInputParam("@i_trn_cvv1_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isCvv1_present()));
    procedureRequestAS.addInputParam("@i_trn_cvv2_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isCvv2_present()));
    procedureRequestAS.addInputParam("@i_trn_cvv3_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isCvv3_present()));
    procedureRequestAS.addInputParam("@i_trn_is_3ds_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isIs_3ds_present()));
    procedureRequestAS.addInputParam("@i_trn_is_3ds_valid",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isIs_3ds_valid()));
    procedureRequestAS.addInputParam("@i_trn_is_automated_fuel_disp",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isIs_automated_fuel_dispenser()));
    procedureRequestAS.addInputParam("@i_trn_is_crossborder",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isIs_crossborder()));
    procedureRequestAS.addInputParam("@i_trn_is_dcc",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isIs_dcc()));
    procedureRequestAS.addInputParam("@i_trn_is_funds_transfer",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isIs_funds_transfer()));
    procedureRequestAS.addInputParam("@i_trn_is_international",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isIs_international()));
    procedureRequestAS.addInputParam("@i_trn_only_supports_purchase",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isOnly_supports_purchase()));
    procedureRequestAS.addInputParam("@i_trn_partially_reversed",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isPartially_reversed()));
    procedureRequestAS.addInputParam("@i_trn_password_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isPassword_present()));
    procedureRequestAS.addInputParam("@i_trn_pin_validated_offline",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isPin_validated_offline()));
    procedureRequestAS.addInputParam("@i_trn_preauthorization",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isPreauthorization()));
    procedureRequestAS.addInputParam("@i_trn_recurring",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isRecurring()));
    procedureRequestAS.addInputParam("@i_trn_token_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizePurchaseDock.getTransaction_indicators().isToken_present()));
    procedureRequestAS.addInputParam("@i_val_billing_conversion_rate",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getValues().getBilling_conversion_rate());
    procedureRequestAS.addInputParam("@i_val_billing_currency_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getValues().getBilling_currency_code());
    procedureRequestAS.addInputParam("@i_val_billing_value",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getValues().getBilling_value());
    procedureRequestAS.addInputParam("@i_val_cash_back_value",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getValues().getCash_back_value());
    procedureRequestAS.addInputParam("@i_val_credit_line_usage_fee",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getValues().getCredit_line_usage_fee());
    procedureRequestAS.addInputParam("@i_val_settlement_currency_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getValues().getSettlement_currency_code());
    procedureRequestAS.addInputParam("@i_val_settlement_value",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getValues().getSettlement_value());
    procedureRequestAS.addInputParam("@i_val_source_currency_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getValues().getSource_currency_code());
    procedureRequestAS.addInputParam("@i_val_source_value",ICTSTypes.SQLVARCHAR,inRequestAuthorizePurchaseDock.getValues().getSource_value());
    
    Gson gson = new Gson();
	String jsonReq = gson.toJson(inRequestAuthorizePurchaseDock);
	procedureRequestAS.addInputParam("@i_json_req", ICTSTypes.SQLVARCHAR, jsonReq);
	
    //execute procedure
    ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

    List<MessageBlock> errors = ErrorUtil.getErrors(response);
    //throw error
    if(errors!= null && errors.size()> 0){
    LOGGER.logDebug("Procedure execution returns error");
    if ( LOGGER.isDebugEnabled() ) {
    for (int i = 0; i < errors.size(); i++) {
    LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
    }
    }
    throw new CTSRestException("Procedure Response has errors", null, errors);
    }
    LOGGER.logDebug("Procedure ok");
    //Init map returns
    int mapTotal=0;
    int mapBlank=0;
    
          mapTotal++;
          if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseAuthorizePurchaseDock returnResponseAuthorizePurchaseDock = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseAuthorizePurchaseDock>() { 
                  @Override
                  public ResponseAuthorizePurchaseDock mapRow(ResultSetMapper resultSetMapper, int index) {
                  ResponseAuthorizePurchaseDock dto = new ResponseAuthorizePurchaseDock();
                  
                        dto.setApproved_value(resultSetMapper.getString(1));
                        dto.setSettlement_value(resultSetMapper.getString(2));
                        dto.setCardholder_billing_value(resultSetMapper.getString(3));
                        List<String> arrayList = new ArrayList<>(Arrays.asList(resultSetMapper.getString(4).split(",")));
                        dto.setResponse((ArrayList) arrayList);
                        dto.setReason(resultSetMapper.getString(5));
                        dto.setAvailable_limit(resultSetMapper.getString(6));
                  return dto;
                  }
                  },false);

                  outResponseAuthorizePurchaseDock.setApproved_value(returnResponseAuthorizePurchaseDock.getApproved_value());
                  outResponseAuthorizePurchaseDock.setSettlement_value(returnResponseAuthorizePurchaseDock.getSettlement_value());
                  outResponseAuthorizePurchaseDock.setCardholder_billing_value(returnResponseAuthorizePurchaseDock.getCardholder_billing_value());
                  outResponseAuthorizePurchaseDock.setResponse(returnResponseAuthorizePurchaseDock.getResponse());
                  outResponseAuthorizePurchaseDock.setReason(returnResponseAuthorizePurchaseDock.getReason());
                  outResponseAuthorizePurchaseDock.setAvailable_limit(returnResponseAuthorizePurchaseDock.getAvailable_limit());
                      // break;
                    
          }else {
          mapBlank++;

          }
        
    //End map returns
    if(mapBlank!=0&&mapBlank==mapTotal){
    LOGGER.logDebug("No data found");
    throw new CTSRestException("404",null);
    }
    
      LOGGER.logDebug("Ends service execution: authorizePurchaseDock");
      //returns data
      return outResponseAuthorizePurchaseDock;
    }

    
		/**
		 * Authorize Withdrawal
		 */
		@Override
		// Have DTO
		public ResponseAuthorizeWithdrawal authorizeWithdrawal(RequestAuthorizeWithdrawal inRequestAuthorizeWithdrawal)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: authorizeWithdrawal");
			ResponseAuthorizeWithdrawal outResponseAuthorizeWithdrawal = new ResponseAuthorizeWithdrawal();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_auth_withdrawal_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500133");
			procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
					String.valueOf(inRequestAuthorizeWithdrawal.getExternalCustomerId()));
			procedureRequestAS.addInputParam("@i_uuid", ICTSTypes.SQLVARCHAR, inRequestAuthorizeWithdrawal.getUuid());
			procedureRequestAS.addInputParam("@i_order_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getOrderId());
			procedureRequestAS.addInputParam("@i_account_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getAccountNumber());
			procedureRequestAS.addInputParam("@i_transmission_date_time_gtm", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getTransmissionDateTimeGmt());
			procedureRequestAS.addInputParam("@i_date", ICTSTypes.SQLVARCHAR, inRequestAuthorizeWithdrawal.getDate());
			procedureRequestAS.addInputParam("@i_time", ICTSTypes.SQLVARCHAR, inRequestAuthorizeWithdrawal.getTime());
			procedureRequestAS.addInputParam("@i_mti", ICTSTypes.SQLVARCHAR, inRequestAuthorizeWithdrawal.getMti());
			procedureRequestAS.addInputParam("@i_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getProcessing().getType());
			procedureRequestAS.addInputParam("@i_processing_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getProcessing().getCode());
			procedureRequestAS.addInputParam("@i_nsu", ICTSTypes.SQLVARCHAR, inRequestAuthorizeWithdrawal.getNsu());
			procedureRequestAS.addInputParam("@i_merchant_category_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getMerchantCategoryCode());
			procedureRequestAS.addInputParam("@i_source_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getTransaction().getSourceCurrencyCode());
			procedureRequestAS.addInputParam("@i_settlement_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getTransaction().getSettlementCurrencyCode());
			procedureRequestAS.addInputParam("@i_amount", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestAuthorizeWithdrawal.getTransaction().getAmount()));
			procedureRequestAS.addInputParam("@i_institution_name", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getInstitutionName());
			procedureRequestAS.addInputParam("@i_terminal_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getTerminalCode());
			procedureRequestAS.addInputParam("@i_retrieval_reference_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getRetrievalReferenceNumber());
			procedureRequestAS.addInputParam("@i_acquirer_country_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawal.getAcquirerCountryCode());
			procedureRequestAS.addInputParam("@i_store_number", ICTSTypes.SQLDECIMAL,
					String.valueOf(inRequestAuthorizeWithdrawal.getStoreNumber()));
			procedureRequestAS.addInputParam("@i_affiliation_number", ICTSTypes.SQLDECIMAL,
					String.valueOf(inRequestAuthorizeWithdrawal.getAffiliationNumber()));
			
			Gson gson = new Gson();
			String jsonReq = gson.toJson(inRequestAuthorizeWithdrawal);
			procedureRequestAS.addInputParam("@i_json_req", ICTSTypes.SQLVARCHAR, jsonReq);
	
			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizeWithdrawal returnResponseAuthorizeWithdrawal = MapperResultUtil.mapOneRowToObject(
						response.getResultSets().get(0), new RowMapper<ResponseAuthorizeWithdrawal>() {
							@Override
							public ResponseAuthorizeWithdrawal mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseAuthorizeWithdrawal dto = new ResponseAuthorizeWithdrawal();

								dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
								return dto;
							}
						}, false);

				outResponseAuthorizeWithdrawal.setSuccess(returnResponseAuthorizeWithdrawal.isSuccess());
				// break;

			} else {
				mapBlank++;

			}

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizeWithdrawal returnResponseAuthorizeWithdrawal = MapperResultUtil.mapOneRowToObject(
						response.getResultSets().get(1), new RowMapper<ResponseAuthorizeWithdrawal>() {
							@Override
							public ResponseAuthorizeWithdrawal mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseAuthorizeWithdrawal dto = new ResponseAuthorizeWithdrawal();

								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
								return dto;
							}
						}, false);

				outResponseAuthorizeWithdrawal.setResponse(returnResponseAuthorizeWithdrawal.getResponse());
				// break;

			} else {
				mapBlank++;

			}


			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}

			LOGGER.logDebug("Ends service execution: authorizeWithdrawal");
			// returns data
			return outResponseAuthorizeWithdrawal;
		}
		
		/**
		 * Authorize Withdrawal Dock
		 */
		@Override
		// Have DTO
		public ResponseAuthorizeWithdrawalDock authorizeWithdrawalDock(String legacyid, String clientid, String uuid,
				String xapigwapiid, RequestAuthorizeWithdrawalDock inRequestAuthorizeWithdrawalDock)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: authorizeWithdrawalDock");
			ResponseAuthorizeWithdrawalDock outResponseAuthorizeWithdrawalDock = new ResponseAuthorizeWithdrawalDock();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS(
					"cob_procesador..sp_auth_withdrawal_dock_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500136");
			procedureRequestAS.addInputParam("@x_legacy_id", ICTSTypes.SQLVARCHAR, legacyid);
			procedureRequestAS.addInputParam("@x_client_id", ICTSTypes.SQLVARCHAR, clientid);
			procedureRequestAS.addInputParam("@x_uuid", ICTSTypes.SQLVARCHAR, uuid);
			procedureRequestAS.addInputParam("@x_apigw_api_id", ICTSTypes.SQLVARCHAR, xapigwapiid);
			procedureRequestAS.addInputParam("@i_account_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getAccount_id());
			procedureRequestAS.addInputParam("@i_person_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getPerson_id());
			procedureRequestAS.addInputParam("@i_product_status", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getProduct_status());
			procedureRequestAS.addInputParam("@i_bank_branch_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getBank_branch_number());
			procedureRequestAS.addInputParam("@i_bank_account_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getBank_account_number());
			procedureRequestAS.addInputParam("@i_transmission_date_time_gtm", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getTransmission_date_time_gmt());
			procedureRequestAS.addInputParam("@i_terminal_date", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getTerminal_date());
			procedureRequestAS.addInputParam("@i_terminal_time", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getTerminal_time());
			procedureRequestAS.addInputParam("@i_mti", ICTSTypes.SQLVARCHAR, inRequestAuthorizeWithdrawalDock.getMti());
			procedureRequestAS.addInputParam("@i_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getProcessing().getType());
			procedureRequestAS.addInputParam("@i_origin_account_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getProcessing().getOrigin_account_type());
			procedureRequestAS.addInputParam("@i_destiny_account_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getProcessing().getDestiny_account_type());
			procedureRequestAS.addInputParam("@i_processing_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getProcessing().getCode());
			procedureRequestAS.addInputParam("@i_account_type_indicator", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getAccount_type_indicator());
			procedureRequestAS.addInputParam("@i_nsu", ICTSTypes.SQLVARCHAR, inRequestAuthorizeWithdrawalDock.getNsu());
			procedureRequestAS.addInputParam("@i_authorization_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getAuthorization_code());
			procedureRequestAS.addInputParam("@i_card_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getCard_number());
			procedureRequestAS.addInputParam("@i_card_expiration_date", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getCard_expiration_date());
			procedureRequestAS.addInputParam("@i_transaction_origin", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getTransaction_origin());
			procedureRequestAS.addInputParam("@i_card_entry_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getCard_entry().getCode());
			procedureRequestAS.addInputParam("@i_pin", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getCard_entry().getPin());
			procedureRequestAS.addInputParam("@i_mode", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getCard_entry().getMode());
			procedureRequestAS.addInputParam("@i_merchant_category_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getMerchant_category_code());
			procedureRequestAS.addInputParam("@i_source_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getValues().getSource_currency_code());
			procedureRequestAS.addInputParam("@i_settlement_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getValues().getSettlement_currency_code());
			procedureRequestAS.addInputParam("@i_billing_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getValues().getBilling_currency_code());
			procedureRequestAS.addInputParam("@i_source_value", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getValues().getSource_value());
			procedureRequestAS.addInputParam("@i_settlement_value", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getValues().getSettlement_value());
			procedureRequestAS.addInputParam("@i_billing_value", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getValues().getBilling_value());
			procedureRequestAS.addInputParam("@i_billing_conversion_rate", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getValues().getBilling_conversion_rate());
			procedureRequestAS.addInputParam("@i_cash_back_value", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getValues().getCash_back_value());
			procedureRequestAS.addInputParam("@i_credit_line_usage_fee", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getValues().getCredit_line_usage_fee());
			procedureRequestAS.addInputParam("@i_establishment", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getEstablishment());
			procedureRequestAS.addInputParam("@i_terminal_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getTerminal_code());
			procedureRequestAS.addInputParam("@i_establishment_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getEstablishment_code());
			procedureRequestAS.addInputParam("@i_retrieval_reference_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getRetrieval_reference_number());
			procedureRequestAS.addInputParam("@i_brand_response_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getBrand_response_code());
			procedureRequestAS.addInputParam("@i_pos_postal_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getPos_postal_code());
			procedureRequestAS.addInputParam("@i_acquirer_country_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getAcquirer_country_code());
			procedureRequestAS.addInputParam("@i_token", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getToken_data().getToken());
			procedureRequestAS.addInputParam("@i_requestor_id_token", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getToken_data().getRequestor_id_token());
			procedureRequestAS.addInputParam("@i_expiration_date", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getToken_data().getExpiration_date());
			procedureRequestAS.addInputParam("@i_status", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getToken_data().getStatus());
			procedureRequestAS.addInputParam("@i_card_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isCard_present()));
			procedureRequestAS.addInputParam("@i_cardholder_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isCardholder_present()));
			procedureRequestAS.addInputParam("@i_password_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isPassword_present()));
			procedureRequestAS.addInputParam("@i_cvv1_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isCvv1_present()));
			procedureRequestAS.addInputParam("@i_cvv2_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isCvv2_present()));
			procedureRequestAS.addInputParam("@i_cvv3_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isCvv3_present()));
			procedureRequestAS.addInputParam("@i_token_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isToken_present()));
			procedureRequestAS.addInputParam("@i_is_3ds_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isIs_3ds_present()));
			procedureRequestAS.addInputParam("@i_is_3ds_valid", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isIs_3ds_valid()));
			procedureRequestAS.addInputParam("@i_recurring", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isRecurring()));
			procedureRequestAS.addInputParam("@i_allows_partial_approval", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isAllows_partial_approval()));
			procedureRequestAS.addInputParam("@i_pin_validated_offline", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isPin_validated_offline()));
			procedureRequestAS.addInputParam("@i_partially_reversed", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isPartially_reversed()));
			procedureRequestAS.addInputParam("@i_preauthorization", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isPreauthorization()));
			procedureRequestAS.addInputParam("@i_is_crossborder", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isIs_crossborder()));
			procedureRequestAS.addInputParam("@i_is_dcc", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isIs_dcc()));
			procedureRequestAS.addInputParam("@i_is_international", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeWithdrawalDock.getTransaction_indicators().isIs_international()));
			procedureRequestAS.addInputParam("@i_card_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getCard_id());
			procedureRequestAS.addInputParam("@i_product_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeWithdrawalDock.getProduct_id());
			
			Gson gson = new Gson();
			String jsonReq = gson.toJson(inRequestAuthorizeWithdrawalDock);
			procedureRequestAS.addInputParam("@i_json_req", ICTSTypes.SQLVARCHAR, jsonReq);

			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizeWithdrawalDock returnResponseAuthorizeWithdrawalDock = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(0),
								new RowMapper<ResponseAuthorizeWithdrawalDock>() {
									@Override
									public ResponseAuthorizeWithdrawalDock mapRow(ResultSetMapper resultSetMapper,
											int index) {
										ResponseAuthorizeWithdrawalDock dto = new ResponseAuthorizeWithdrawalDock();
										
										List<String> arrayList = new ArrayList<>(Arrays.asList(resultSetMapper.getString(1).split(",")));
										dto.setResponse((ArrayList) arrayList);
										dto.setReason(resultSetMapper.getString(2));
										return dto;
									}
								}, false);

				outResponseAuthorizeWithdrawalDock.setResponse(returnResponseAuthorizeWithdrawalDock.getResponse());
				outResponseAuthorizeWithdrawalDock.setReason(returnResponseAuthorizeWithdrawalDock.getReason());
				// break;

			} else {
				mapBlank++;

			}

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}

			LOGGER.logDebug("Ends service execution: authorizeWithdrawalDock");
			// returns data
			return outResponseAuthorizeWithdrawalDock;
		}
		
		/**
		 * Authorize Deposit
		 */
		@Override
		// Have DTO
		public ResponseAuthorizeDeposit authorizeDeposit(RequestAuthorizeDeposit inRequestAuthorizeDeposit)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: authorizeDeposit");
			ResponseAuthorizeDeposit outResponseAuthorizeDeposit = new ResponseAuthorizeDeposit();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_auth_deposit_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500134");
			procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
					String.valueOf(inRequestAuthorizeDeposit.getExternalCustomerId()));
			procedureRequestAS.addInputParam("@i_uuid", ICTSTypes.SQLVARCHAR, inRequestAuthorizeDeposit.getUuid());
			procedureRequestAS.addInputParam("@i_order_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getOrderId());
			procedureRequestAS.addInputParam("@i_account_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getAccountNumber());
			procedureRequestAS.addInputParam("@i_transmission_date_time_gtm", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getTransmissionDateTimeGmt());
			procedureRequestAS.addInputParam("@i_date", ICTSTypes.SQLVARCHAR, inRequestAuthorizeDeposit.getDate());
			procedureRequestAS.addInputParam("@i_time", ICTSTypes.SQLVARCHAR, inRequestAuthorizeDeposit.getTime());
			procedureRequestAS.addInputParam("@i_mti", ICTSTypes.SQLVARCHAR, inRequestAuthorizeDeposit.getMti());
			procedureRequestAS.addInputParam("@i_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getProcessing().getType());
			procedureRequestAS.addInputParam("@i_processing_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getProcessing().getCode());
			procedureRequestAS.addInputParam("@i_nsu", ICTSTypes.SQLVARCHAR, inRequestAuthorizeDeposit.getNsu());
			procedureRequestAS.addInputParam("@i_merchant_category_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getMerchantCategoryCode());
			procedureRequestAS.addInputParam("@i_source_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getTransaction().getSourceCurrencyCode());
			procedureRequestAS.addInputParam("@i_settlement_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getTransaction().getSettlementCurrencyCode());
			procedureRequestAS.addInputParam("@i_amount", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getTransaction().getAmount());
			procedureRequestAS.addInputParam("@i_institution_name", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getInstitutionName());
			procedureRequestAS.addInputParam("@i_terminal_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getTerminalCode());
			procedureRequestAS.addInputParam("@i_retrieval_reference_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getRetrievalReferenceNumber());
			procedureRequestAS.addInputParam("@i_acquirer_country_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDeposit.getAcquirerCountryCode());
			procedureRequestAS.addInputParam("@i_store_number", ICTSTypes.SQLDECIMAL,
					String.valueOf(inRequestAuthorizeDeposit.getStoreNumber()));
			procedureRequestAS.addInputParam("@i_affiliation_number", ICTSTypes.SQLDECIMAL,
					String.valueOf(inRequestAuthorizeDeposit.getAffiliationNumber()));
			
			Gson gson = new Gson();
			String jsonReq = gson.toJson(inRequestAuthorizeDeposit);
			procedureRequestAS.addInputParam("@i_json_req", ICTSTypes.SQLVARCHAR, jsonReq);

			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizeDeposit returnResponseAuthorizeDeposit = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseAuthorizeDeposit>() {
							@Override
							public ResponseAuthorizeDeposit mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseAuthorizeDeposit dto = new ResponseAuthorizeDeposit();

								dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
								return dto;
							}
						}, false);

				outResponseAuthorizeDeposit.setSuccess(returnResponseAuthorizeDeposit.isSuccess());
				// break;

			} else {
				mapBlank++;

			}

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizeDeposit returnResponseAuthorizeDeposit = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseAuthorizeDeposit>() {
							@Override
							public ResponseAuthorizeDeposit mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseAuthorizeDeposit dto = new ResponseAuthorizeDeposit();

								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
								return dto;
							}
						}, false);

				outResponseAuthorizeDeposit.setResponse(returnResponseAuthorizeDeposit.getResponse());
				// break;

			} else {
				mapBlank++;

			}

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}

			LOGGER.logDebug("Ends service execution: authorizeDeposit");
			// returns data
			return outResponseAuthorizeDeposit;
		}
		
		/**
		 * Authorize Deposit Dock
		 */
		@Override
		// Have DTO
		public ResponseAuthorizeDepositDock authorizeDepositDock(String legacyid, String clientid, String uuid,
				String xapigwapiid, RequestAuthorizeDepositDock inRequestAuthorizeDepositDock) throws CTSRestException {
			LOGGER.logDebug("Start service execution: authorizeDepositDock");
			ResponseAuthorizeDepositDock outResponseAuthorizeDepositDock = new ResponseAuthorizeDepositDock();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_auth_deposit_dock_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500137");
			procedureRequestAS.addInputParam("@x_legacy_id", ICTSTypes.SQLVARCHAR, legacyid);
			procedureRequestAS.addInputParam("@x_client_id", ICTSTypes.SQLVARCHAR, clientid);
			procedureRequestAS.addInputParam("@x_uuid", ICTSTypes.SQLVARCHAR, uuid);
			procedureRequestAS.addInputParam("@x_apigw_api_id", ICTSTypes.SQLVARCHAR, xapigwapiid);
			procedureRequestAS.addInputParam("@i_account_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getAccount_id());
			procedureRequestAS.addInputParam("@i_person_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getPerson_id());
			procedureRequestAS.addInputParam("@i_product_status", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getProduct_status());
			procedureRequestAS.addInputParam("@i_bank_branch_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getBank_branch_number());
			procedureRequestAS.addInputParam("@i_bank_account_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getBank_account_number());
			procedureRequestAS.addInputParam("@i_transmission_date_time_gtm", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getTransmission_date_time_gmt());
			procedureRequestAS.addInputParam("@i_terminal_date", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getTerminal_date());
			procedureRequestAS.addInputParam("@i_terminal_time", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getTerminal_time());
			procedureRequestAS.addInputParam("@i_mti", ICTSTypes.SQLVARCHAR, inRequestAuthorizeDepositDock.getMti());
			procedureRequestAS.addInputParam("@i_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getProcessing().getType());
			procedureRequestAS.addInputParam("@i_origin_account_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getProcessing().getOrigin_account_type());
			procedureRequestAS.addInputParam("@i_destiny_account_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getProcessing().getDestiny_account_type());
			procedureRequestAS.addInputParam("@i_processing_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getProcessing().getCode());
			procedureRequestAS.addInputParam("@i_account_type_indicator", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getAccount_type_indicator());
			procedureRequestAS.addInputParam("@i_nsu", ICTSTypes.SQLVARCHAR, inRequestAuthorizeDepositDock.getNsu());
			procedureRequestAS.addInputParam("@i_authorization_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getAuthorization_code());
			procedureRequestAS.addInputParam("@i_card_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getCard_number());
			procedureRequestAS.addInputParam("@i_card_expiration_date", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getCard_expiration_date());
			procedureRequestAS.addInputParam("@i_transaction_origin", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getTransaction_origin());
			procedureRequestAS.addInputParam("@i_institution_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getInstitution_code());
			procedureRequestAS.addInputParam("@i_card_entry_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getCard_entry().getCode());
			procedureRequestAS.addInputParam("@i_pin", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getCard_entry().getPin());
			procedureRequestAS.addInputParam("@i_mode", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getCard_entry().getMode());
			procedureRequestAS.addInputParam("@i_merchant_category_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getMerchant_category_code());
			procedureRequestAS.addInputParam("@i_source_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getValues().getSource_currency_code());
			procedureRequestAS.addInputParam("@i_settlement_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getValues().getSettlement_currency_code());
			procedureRequestAS.addInputParam("@i_billing_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getValues().getBilling_currency_code());
			procedureRequestAS.addInputParam("@i_source_value", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getValues().getSource_value());
			procedureRequestAS.addInputParam("@i_settlement_value", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getValues().getSettlement_value());
			procedureRequestAS.addInputParam("@i_billing_value", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getValues().getBilling_value());
			procedureRequestAS.addInputParam("@i_billing_conversion_rate", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getValues().getBilling_conversion_rate());
			procedureRequestAS.addInputParam("@i_cash_back_value", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getValues().getCash_back_value());
			procedureRequestAS.addInputParam("@i_credit_line_usage_fee", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getValues().getCredit_line_usage_fee());
			procedureRequestAS.addInputParam("@i_establishment", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getEstablishment());
			procedureRequestAS.addInputParam("@i_terminal_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getTerminal_code());
			procedureRequestAS.addInputParam("@i_establishment_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getEstablishment_code());
			procedureRequestAS.addInputParam("@i_retrieval_reference_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getRetrieval_reference_number());
			procedureRequestAS.addInputParam("@i_brand_response_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getBrand_response_code());
			procedureRequestAS.addInputParam("@i_pos_postal_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getPos_postal_code());
			procedureRequestAS.addInputParam("@i_acquirer_country_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getAcquirer_country_code());
			procedureRequestAS.addInputParam("@i_card_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isCard_present()));
			procedureRequestAS.addInputParam("@i_cardholder_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isCardholder_present()));
			procedureRequestAS.addInputParam("@i_password_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isPassword_present()));
			procedureRequestAS.addInputParam("@i_cvv1_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isCvv1_present()));
			procedureRequestAS.addInputParam("@i_cvv2_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isCvv2_present()));
			procedureRequestAS.addInputParam("@i_cvv3_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isCvv3_present()));
			procedureRequestAS.addInputParam("@i_token_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isToken_present()));
			procedureRequestAS.addInputParam("@i_is_3ds_present", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isIs_3ds_present()));
			procedureRequestAS.addInputParam("@i_is_3ds_valid", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isIs_3ds_valid()));
			procedureRequestAS.addInputParam("@i_recurring", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isRecurring()));
			procedureRequestAS.addInputParam("@i_allows_partial_approval", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isAllows_partial_approval()));
			procedureRequestAS.addInputParam("@i_pin_validated_offline", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isPin_validated_offline()));
			procedureRequestAS.addInputParam("@i_partially_reversed", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isPartially_reversed()));
			procedureRequestAS.addInputParam("@i_preauthorization", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isPreauthorization()));
			procedureRequestAS.addInputParam("@i_is_crossborder", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isIs_crossborder()));
			procedureRequestAS.addInputParam("@i_is_dcc", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isIs_dcc()));
			procedureRequestAS.addInputParam("@i_only_supports_purchase", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isOnly_supports_purchase()));
			procedureRequestAS.addInputParam("@i_is_international", ICTSTypes.SQLBIT,
					String.valueOf(inRequestAuthorizeDepositDock.getTransaction_indicators().isIs_international()));
			procedureRequestAS.addInputParam("@i_card_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getCard_id());
			procedureRequestAS.addInputParam("@i_product_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeDepositDock.getProduct_id());
			
			Gson gson = new Gson();
			String jsonReq = gson.toJson(inRequestAuthorizeDepositDock);
			procedureRequestAS.addInputParam("@i_json_req", ICTSTypes.SQLVARCHAR, jsonReq);

			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizeDepositDock returnResponseAuthorizeDepositDock = MapperResultUtil.mapOneRowToObject(
						response.getResultSets().get(0), new RowMapper<ResponseAuthorizeDepositDock>() {
							@Override
							public ResponseAuthorizeDepositDock mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseAuthorizeDepositDock dto = new ResponseAuthorizeDepositDock();

								dto.setApproved_value(resultSetMapper.getString(1));
								dto.setSettlement_value(resultSetMapper.getString(2));
								dto.setCardholder_billing_value(resultSetMapper.getString(3));
								List<String> arrayList = new ArrayList<>(Arrays.asList(resultSetMapper.getString(4).split(",")));
								dto.setResponse((ArrayList) arrayList);
								dto.setReason(resultSetMapper.getString(5));
								dto.setAvailable_limit(resultSetMapper.getString(6));
								return dto;
							}
						}, false);

				outResponseAuthorizeDepositDock.setApproved_value(returnResponseAuthorizeDepositDock.getApproved_value());
				outResponseAuthorizeDepositDock.setSettlement_value(returnResponseAuthorizeDepositDock.getSettlement_value());
	            outResponseAuthorizeDepositDock.setCardholder_billing_value(returnResponseAuthorizeDepositDock.getCardholder_billing_value());
	            outResponseAuthorizeDepositDock.setResponse(returnResponseAuthorizeDepositDock.getResponse());
                outResponseAuthorizeDepositDock.setReason(returnResponseAuthorizeDepositDock.getReason());
                outResponseAuthorizeDepositDock.setAvailable_limit(returnResponseAuthorizeDepositDock.getAvailable_limit());
				// break;

			} else {
				mapBlank++;

			}

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}

			LOGGER.logDebug("Ends service execution: authorizeDepositDock");
			// returns data
			return outResponseAuthorizeDepositDock;
		}
		
		/**
		 * Authorize Reversal
		 */
		@Override
		// Have DTO
		public ResponseAuthorizeReversal authorizeReversal(RequestAuthorizeReversal inRequestAuthorizeReversal)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: authorizeReversal");
			ResponseAuthorizeReversal outResponseAuthorizeReversal = new ResponseAuthorizeReversal();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_auth_reversal_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500135");
			procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
					String.valueOf(inRequestAuthorizeReversal.getExternalCustomerId()));
			procedureRequestAS.addInputParam("@i_uuid", ICTSTypes.SQLVARCHAR, inRequestAuthorizeReversal.getUuid());
			procedureRequestAS.addInputParam("@i_order_id", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getOrderId());
			procedureRequestAS.addInputParam("@i_account_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getAccountNumber());
			procedureRequestAS.addInputParam("@i_transmission_date_time_gtm", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getTransmissionDateTimeGmt());
			procedureRequestAS.addInputParam("@i_date", ICTSTypes.SQLVARCHAR, inRequestAuthorizeReversal.getDate());
			procedureRequestAS.addInputParam("@i_time", ICTSTypes.SQLVARCHAR, inRequestAuthorizeReversal.getTime());
			procedureRequestAS.addInputParam("@i_mti", ICTSTypes.SQLVARCHAR, inRequestAuthorizeReversal.getMti());
			procedureRequestAS.addInputParam("@i_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getProcessing().getType());
			procedureRequestAS.addInputParam("@i_processing_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getProcessing().getCode());
			procedureRequestAS.addInputParam("@i_nsu", ICTSTypes.SQLVARCHAR, inRequestAuthorizeReversal.getNsu());
			procedureRequestAS.addInputParam("@i_merchant_category_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getMerchantCategoryCode());
			procedureRequestAS.addInputParam("@i_source_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getTransaction().getSourceCurrencyCode());
			procedureRequestAS.addInputParam("@i_settlement_currency_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getTransaction().getSettlementCurrencyCode());
			procedureRequestAS.addInputParam("@i_amount", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getTransaction().getAmount());
			procedureRequestAS.addInputParam("@i_terminal_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getTerminalCode());
			procedureRequestAS.addInputParam("@i_retrieval_reference_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getRetrievalReferenceNumber());
			procedureRequestAS.addInputParam("@i_acquirer_country_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getAcquirerCountryCode());
			procedureRequestAS.addInputParam("@i_store_number", ICTSTypes.SQLDECIMAL,
					String.valueOf(inRequestAuthorizeReversal.getStoreNumber()));
			procedureRequestAS.addInputParam("@i_affiliation_number", ICTSTypes.SQLDECIMAL,
					String.valueOf(inRequestAuthorizeReversal.getAffiliationNumber()));
			procedureRequestAS.addInputParam("@i_establishment", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getEstablishment());
			procedureRequestAS.addInputParam("@i_advise_reason", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getAdviceReason());
			procedureRequestAS.addInputParam("@i_advise_reason_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getAdviceReasonCode());
			procedureRequestAS.addInputParam("@i_origin_uuid", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getOriginalTransactionData().getUuid());
			procedureRequestAS.addInputParam("@i_origin_nsu", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getOriginalTransactionData().getNsu());
			procedureRequestAS.addInputParam("@i_origin_mti", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getOriginalTransactionData().getMti());
			procedureRequestAS.addInputParam("@i_origin_transmission_date_time_gtm", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getOriginalTransactionData().getTransmissionDateTimeGmt());
			procedureRequestAS.addInputParam("@i_origin_institution_name", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getOriginalTransactionData().getInstitutionName());
			procedureRequestAS.addInputParam("@i_origin_retrieval_reference_number", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getOriginalTransactionData().getRetrievalReferenceNumber());
			procedureRequestAS.addInputParam("@i_origin_type", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getOriginalTransactionData().getType());
			procedureRequestAS.addInputParam("@i_origin_processing_code", ICTSTypes.SQLVARCHAR,
					inRequestAuthorizeReversal.getOriginalTransactionData().getCode());
			
			Gson gson = new Gson();
			String jsonReq = gson.toJson(inRequestAuthorizeReversal);
			procedureRequestAS.addInputParam("@i_json_req", ICTSTypes.SQLVARCHAR, jsonReq);
			
			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizeReversal returnResponseAuthorizeReversal = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseAuthorizeReversal>() {
							@Override
							public ResponseAuthorizeReversal mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseAuthorizeReversal dto = new ResponseAuthorizeReversal();

								dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
								return dto;
							}
						}, false);

				outResponseAuthorizeReversal.setSuccess(returnResponseAuthorizeReversal.isSuccess());
				// break;

			} else {
				mapBlank++;

			}

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseAuthorizeReversal returnResponseAuthorizeReversal = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseAuthorizeReversal>() {
							@Override
							public ResponseAuthorizeReversal mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseAuthorizeReversal dto = new ResponseAuthorizeReversal();

								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
								return dto;
							}
						}, false);

				outResponseAuthorizeReversal.setResponse(returnResponseAuthorizeReversal.getResponse());
				// break;

			} else {
				mapBlank++;

			}

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}

			LOGGER.logDebug("Ends service execution: authorizeReversal");
			// returns data
			return outResponseAuthorizeReversal;
		}
        

		/**
		 * Create new customers
		 */
		@Override
		// Have DTO
		public CreateCustomerResponse createCustomer(CreateCustomerRequest inCreateCustomerRequest)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: createCustomer");
			
			CreateCustomerResponse outCreateCustomerResponse = new CreateCustomerResponse();
			
			Response response = new Response();
			outCreateCustomerResponse.setResponse(response);

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_api_create_customer");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500094");
			procedureRequestAS.addInputParam("@i_activity_code", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getActivity());
			procedureRequestAS.addInputParam("@i_address", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getReferenceAddress());
			procedureRequestAS.addInputParam("@i_address_type_code", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getAddressTypeCode());
			procedureRequestAS.addInputParam("@i_amount_transaction", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getAmountTransaction());
			procedureRequestAS.addInputParam("@i_average_balance", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getAverageBalance());
			procedureRequestAS.addInputParam("@i_birthdate", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getBirthDate());
			procedureRequestAS.addInputParam("@i_city_code", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getCity()));
			procedureRequestAS.addInputParam("@i_countrybirth_code", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getCountryBirth()));
			procedureRequestAS.addInputParam("@i_civil_status", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getCivilStatus());
			procedureRequestAS.addInputParam("@i_company_name", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getCompanyName());
			procedureRequestAS.addInputParam("@i_electronic_transfer", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getElectronicTransfer()));
			procedureRequestAS.addInputParam("@i_externalnumber", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getExternalNumber()));
			procedureRequestAS.addInputParam("@i_gender_code", ICTSTypes.SQLCHAR,
					String.valueOf(inCreateCustomerRequest.getGender()));
			procedureRequestAS.addInputParam("@i_geolocatization_latitude", ICTSTypes.SQLDECIMAL,
					String.valueOf(inCreateCustomerRequest.getGeolocalizationLatitude()));
			procedureRequestAS.addInputParam("@i_geolocatization_longitude", ICTSTypes.SQLDECIMAL,
					String.valueOf(inCreateCustomerRequest.getGeolocalizationLongitude()));
			procedureRequestAS.addInputParam("@i_identification_number", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getIdNumber());
			procedureRequestAS.addInputParam("@i_identity_validated", ICTSTypes.SQLCHAR,
					String.valueOf(inCreateCustomerRequest.getIdentityValidated()));
			procedureRequestAS.addInputParam("@i_incomelevel", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getIncomeLevel());
			procedureRequestAS.addInputParam("@i_incomelevel_entity", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getIncomeLevelEntity());
			procedureRequestAS.addInputParam("@i_internalnumber", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getInternalNumber()));
			procedureRequestAS.addInputParam("@i_lastname", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getLastName());
			procedureRequestAS.addInputParam("@i_legalincomesource", ICTSTypes.SQLCHAR,
					String.valueOf(inCreateCustomerRequest.getLegalIncomeSource()));
			procedureRequestAS.addInputParam("@i_mail", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getEmail());
			procedureRequestAS.addInputParam("@i_name", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getFirstName());
			procedureRequestAS.addInputParam("@i_nationality", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getNationality());
			procedureRequestAS.addInputParam("@i_noconnectiontoillegalnetworks", ICTSTypes.SQLCHAR,
					String.valueOf(inCreateCustomerRequest.getNoConnectionIllegalNetworks()));
			procedureRequestAS.addInputParam("@i_number", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getPhoneNumber());
			procedureRequestAS.addInputParam("@i_number_transaction", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getNumberTransaction());
			procedureRequestAS.addInputParam("@i_occupation_code", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getOccupation());
			procedureRequestAS.addInputParam("@i_operation_type", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getOperationType());
			procedureRequestAS.addInputParam("@i_other_mexican_account", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getOtherMexicanAccount());
			procedureRequestAS.addInputParam("@i_otherlastname", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getSecondLastName());
			procedureRequestAS.addInputParam("@i_othername", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getSecondName());
			procedureRequestAS.addInputParam("@i_payment_card", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getPaymentCard()));
			procedureRequestAS.addInputParam("@i_payment_recharge", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getPaymentRecharge()));
			procedureRequestAS.addInputParam("@i_payment_service", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getServicesPay()));
			procedureRequestAS.addInputParam("@i_propertytype_code", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getPropertyTypeCode());
			procedureRequestAS.addInputParam("@i_province_code", ICTSTypes.SQLINT2,
					String.valueOf(inCreateCustomerRequest.getProvince()));
			procedureRequestAS.addInputParam("@i_provincebirth_code", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getProvinceBirth());
			procedureRequestAS.addInputParam("@i_provision_cash", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getProvisionCash()));
			procedureRequestAS.addInputParam("@i_rfc", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getRfc());
			procedureRequestAS.addInputParam("@i_secondaryidentification_number", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getIdentificationNumber());
			procedureRequestAS.addInputParam("@i_secondaryidentification_type_code", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getIdentificationType());
			procedureRequestAS.addInputParam("@i_street", ICTSTypes.SQLVARCHAR, inCreateCustomerRequest.getStreet());
			procedureRequestAS.addInputParam("@i_subdivision_code", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getSubdivisioncode()));
			procedureRequestAS.addInputParam("@i_timeincurrentresidence", ICTSTypes.SQLINT4,
					String.valueOf(inCreateCustomerRequest.getTimeCurrentReside()));
			procedureRequestAS.addInputParam("@i_town_code", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getTownCode());
			procedureRequestAS.addInputParam("@i_validity_date", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getValidityDate());
			procedureRequestAS.addInputParam("@i_zipcode_code", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getZipcode());
			procedureRequestAS.addInputParam("@i_economic_sector", ICTSTypes.SQLVARCHAR,
					inCreateCustomerRequest.getEconomicSector());
			procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "0");
			procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "0");
			procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "X");
			procedureRequestAS.addOutputParam("@o_customer", ICTSTypes.SQLINT4, "0");
			procedureRequestAS.addOutputParam("@o_account", ICTSTypes.SQLVARCHAR, "X");
			

			//execute procedure
			ProcedureResponseAS resp = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(resp);
			//throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			//Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}
			
			response.setCode(getOutValue(Integer.class, "@o_code", resp.getParams()));
			response.setMessage(getOutValue(String.class, "@o_message", resp.getParams()));
			
			outCreateCustomerResponse.setResponse(response);
				
			outCreateCustomerResponse.setExternalCustomerId(getOutValue(Integer.class, "@o_customer", resp.getParams()));
			outCreateCustomerResponse.setAccountNumber(getOutValue(String.class, "@o_account", resp.getParams()));
			
			if (response != null && response.getCode() == 0) {

				outCreateCustomerResponse.setSuccess(true);

			} else {

				outCreateCustomerResponse.setSuccess(false);
			}

			LOGGER.logDebug("Ends service execution: createCustomer");
			// returns data
			return outCreateCustomerResponse;
		}
	
    /**
    * Service to  delete a beneficiary.
    */
		@Override
		//Have DTO
		public ResponseDeleteBeneficiary deleteBeneficiary(RequestDeleteBeneficiary inRequestDeleteBeneficiary  )throws CTSRestException{
		LOGGER.logDebug("Start service execution: deleteBeneficiary");
		ResponseDeleteBeneficiary outResponseDeleteBeneficiary  = new ResponseDeleteBeneficiary();
		    
		//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_bvirtual..sp_beneficiaries_mant_api");
		
		  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500127");
		procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inRequestDeleteBeneficiary.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_operacion",ICTSTypes.SQLCHAR,"D");
		procedureRequestAS.addInputParam("@i_benf_id",ICTSTypes.SQLINT4,String.valueOf(inRequestDeleteBeneficiary.getBeneficiaryId()));
		
		//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		//throw error
		if(errors!= null && errors.size()> 0){
		LOGGER.logDebug("Procedure execution returns error");
		if ( LOGGER.isDebugEnabled() ) {
		for (int i = 0; i < errors.size(); i++) {
		LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		}
		}
		throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		//Init map returns
		int mapTotal=0;
		int mapBlank=0;
		
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseDeleteBeneficiary returnResponseDeleteBeneficiary = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseDeleteBeneficiary>() { 
		              @Override
		              public ResponseDeleteBeneficiary mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseDeleteBeneficiary dto = new ResponseDeleteBeneficiary();
		              
		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		              return dto;
		              }
		              },false);
		
		              outResponseDeleteBeneficiary.setSuccess(returnResponseDeleteBeneficiary.isSuccess());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseDeleteBeneficiary returnResponseDeleteBeneficiary = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseDeleteBeneficiary>() { 
		              @Override
		              public ResponseDeleteBeneficiary mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseDeleteBeneficiary dto = new ResponseDeleteBeneficiary();
		              
								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
		              return dto;
		              }
		              },false);
		
		              outResponseDeleteBeneficiary.setResponse(returnResponseDeleteBeneficiary.getResponse());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		//End map returns
		if(mapBlank!=0&&mapBlank==mapTotal){
		LOGGER.logDebug("No data found");
		throw new CTSRestException("404",null);
		}
		
		  LOGGER.logDebug("Ends service execution: deleteBeneficiary");
		  //returns data
		  return outResponseDeleteBeneficiary;
		}

	/**
          * Encrypt Data
          */
         @Override
			// Return List
			public  ResponseEncriptData  encryptData(RequestEncriptData inRequestEncriptData  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: encryptData");
      ResponseEncriptData outSingleResponseEncriptData  = new ResponseEncriptData();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_encryptData");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500088");
      procedureRequestAS.addInputParam("@i_password",ICTSTypes.SQLVARCHAR,inRequestEncriptData.getPassword());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                	ResponseEncriptData returnResponseEncriptData = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseEncriptData>() { 
                    @Override
                    public ResponseEncriptData mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseEncriptData dto = new ResponseEncriptData();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                          dto.setPassword(resultSetMapper.getString(2));
							dto.responseInstance().setMessage(resultSetMapper.getString(3));
							dto.responseInstance().setCode(resultSetMapper.getInteger(4));
                    return dto;
                    }
                    },false);
                    outSingleResponseEncriptData=returnResponseEncriptData ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: encryptData");
        //returns data
        return outSingleResponseEncriptData;
      }

	/**
	 * Service to generate and send an OTP to the client
	 */
	@Override
	// Have only one return single result
	public ResponseOtp generateTransactionFactor(RequestOtp inRequestOtp) throws CTSRestException {
		LOGGER.logDebug("Start service execution: generateTransactionFactor");
		ResponseOtp outSingleResponseOtp = new ResponseOtp();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..administra_token");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500090");
		procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
				String.valueOf(inRequestOtp.getExternalCustomerId()));

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ----------------Assume SingleResult
			ResponseOtp returnResponseOtp = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0),
					new RowMapper<ResponseOtp>() {
						@Override
						public ResponseOtp mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseOtp dto = new ResponseOtp();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							dto.responseInstance().setCode(resultSetMapper.getInteger(2));
							dto.responseInstance().setMessage(resultSetMapper.getString(3));
							return dto;
						}
					}, false);
			outSingleResponseOtp = returnResponseOtp;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: generateTransactionFactor");
		// returns data
		return outSingleResponseOtp;
	}
	
	
    /**
    * Get Colony by Municipality
    */
   @Override
		//Have DTO
		public ResponseGetColonyByMunicipality getColonyByMunicipality(RequestGetColonyByMunicipality inRequestGetColonyByMunicipality  )throws CTSRestException{
LOGGER.logDebug("Start service execution: getColonyByMunicipality");
ResponseGetColonyByMunicipality outResponseGetColonyByMunicipality  = new ResponseGetColonyByMunicipality();
    
//create procedure
ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_get_colony_by_mun_api");

  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500108");
procedureRequestAS.addInputParam("@i_zip_code",ICTSTypes.SQLVARCHAR,inRequestGetColonyByMunicipality.getZipCode());
procedureRequestAS.addInputParam("@i_city_code",ICTSTypes.SQLVARCHAR,inRequestGetColonyByMunicipality.getMunicipality());
      procedureRequestAS.addOutputParam("@o_code",ICTSTypes.SQLINT4,"0");
      procedureRequestAS.addOutputParam("@o_message",ICTSTypes.SQLVARCHAR,"XXX");
      procedureRequestAS.addOutputParam("@o_success",ICTSTypes.SQLBIT,"1");

//execute procedure
ProcedureResponseAS resp = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

List<MessageBlock> errors = ErrorUtil.getErrors(resp);
//throw error
if(errors!= null && errors.size()> 0){
LOGGER.logDebug("Procedure execution returns error");
if ( LOGGER.isDebugEnabled() ) {
for (int i = 0; i < errors.size(); i++) {
LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
}
}
throw new CTSRestException("Procedure Response has errors", null, errors);
}
LOGGER.logDebug("Procedure ok");
//Init map returns
int mapTotal=0;
int mapBlank=0;

      mapTotal++;
      
  		if (resp.getResultSets() != null && resp.getResultSets().size()>0  &&
  				resp.getResultSets().get(0).getData().getRows().size() > 0) {
							//---------NO Array
							AddressTypeItems [] returnAddressTypeItems = MapperResultUtil.mapToArray(resp.getResultSets().get(0), new RowMapper<AddressTypeItems>() { 
              @Override
              public AddressTypeItems mapRow(ResultSetMapper resultSetMapper, int index) {
              AddressTypeItems dto = new AddressTypeItems();
              
                    dto.setCode(resultSetMapper.getString(1));
                    dto.setValue(resultSetMapper.getString(2));
              return dto;
              }
              },false);

              outResponseGetColonyByMunicipality.setAddressTypeItems(returnAddressTypeItems);
                  // break;
                
      }else {
      mapBlank++;

      }
      
      
 Response response=new Response();
 response.setCode(getOutValue(Integer.class, "@o_code", resp.getParams()));
 response.setMessage(getOutValue(String.class, "@o_message", resp.getParams())); 
 outResponseGetColonyByMunicipality.setResponse(response);

	if (response != null && response.getCode() == 0) {
		outResponseGetColonyByMunicipality.setSuccess(true);
	} else
		outResponseGetColonyByMunicipality.setSuccess(false);
      
    
      
  LOGGER.logDebug("Ends service execution: getColonyByMunicipality");
  //returns data
  return outResponseGetColonyByMunicipality;
}



	/**
          * Check Account Details
          */
         @Override
			// Return DTO
			public  ResponseGetBalancesDetail  getBalancesDetail(RequestGetBalancesDetail inRequestGetBalancesDetail  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: getBalancesDetail");
      ResponseGetBalancesDetail outSingleResponseGetBalancesDetail  = new ResponseGetBalancesDetail();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_get_balances_detail_api");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500102");
      procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inRequestGetBalancesDetail.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_accountNumber",ICTSTypes.SQLVARCHAR,inRequestGetBalancesDetail.getAccountNumber());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    ResponseGetBalancesDetail returnResponseGetBalancesDetail = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseGetBalancesDetail>() { 
                    @Override
                    public ResponseGetBalancesDetail mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseGetBalancesDetail dto = new ResponseGetBalancesDetail();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                          dto.setAccountName(resultSetMapper.getString(4));
                          dto.setAccountStatus(resultSetMapper.getString(5));
                          dto.setAvailableBalance(resultSetMapper.getBigDecimal(6));
                          dto.setAverageBalance(resultSetMapper.getBigDecimal(7));
                          dto.setCurrencyId(resultSetMapper.getInteger(8));
                          dto.setDeliveryAddress(resultSetMapper.getString(9));
                          dto.setFreezingsNumber(resultSetMapper.getInteger(10));
                          dto.setFrozenAmount(resultSetMapper.getBigDecimal(11));
                          dto.setLastCutoffBalance(resultSetMapper.getString(12));
                          dto.setLastOperationDate(resultSetMapper.getString(13));
                          dto.setOpeningDate(resultSetMapper.getString(14));
                          dto.setOverdraftAmount(resultSetMapper.getBigDecimal(15));
                          dto.setProductId(resultSetMapper.getInteger(16));
                          dto.setToDrawBalance(resultSetMapper.getBigDecimal(17));
                          dto.setAccountingBalance(resultSetMapper.getBigDecimal(18));
                          dto.setOfficial(resultSetMapper.getInteger(19));
                          dto.setClabeAccountNumber(resultSetMapper.getString(20));
                          dto.setIdDebitCard(resultSetMapper.getInteger(21));
                          dto.setDebitCardNumber(resultSetMapper.getString(22));
                          dto.setStateDebitCard(resultSetMapper.getString(23));
							dto.responseInstance().setCode(resultSetMapper.getInteger(2));
							dto.responseInstance().setMessage(resultSetMapper.getString(3));
                    return dto;
                    }
                    },false);
                    outSingleResponseGetBalancesDetail=returnResponseGetBalancesDetail ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: getBalancesDetail");
        //returns data
        return outSingleResponseGetBalancesDetail;
      }

	    /**
	    * Get Beneficiary Saving Account
	    */
	   @Override
		//Have DTO
		public GetBeneficiaryResponse getBeneficiary(GetBeneficiaryRequest inGetBeneficiaryRequest  )throws CTSRestException{
		LOGGER.logDebug("Start service execution: getBeneficiary");
		GetBeneficiaryResponse outGetBeneficiaryResponse  = new GetBeneficiaryResponse();
		    
		//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_bvirtual..sp_beneficiaries_mant_api");
		
		  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500099");
		procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inGetBeneficiaryRequest.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_numero_producto",ICTSTypes.SQLVARCHAR,inGetBeneficiaryRequest.getAccount());
		procedureRequestAS.addInputParam("@i_operacion",ICTSTypes.SQLCHAR,"S");
		
		//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		//throw error
		if(errors!= null && errors.size()> 0){
		LOGGER.logDebug("Procedure execution returns error");
		if ( LOGGER.isDebugEnabled() ) {
		for (int i = 0; i < errors.size(); i++) {
		LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		}
		}
		throw new CTSRestException("Procedure Response has errors", null, errors);
		}

		Integer index = response.getResultSets().size();
		//Init map returns
		int mapTotal=0;
		int mapBlank=0;
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(index - 2).getData().getRows().size()>0) {	
									//---------NO Array
									GetBeneficiaryResponse returnGetBeneficiaryResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(index - 2), new RowMapper<GetBeneficiaryResponse>() { 
		              @Override
		              public GetBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		              GetBeneficiaryResponse dto = new GetBeneficiaryResponse();
		              
		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		              return dto;
		              }
		              },false);
		
		              outGetBeneficiaryResponse.setSuccess(returnGetBeneficiaryResponse.isSuccess());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(index - 1).getData().getRows().size()>0) {	
									//---------NO Array
									GetBeneficiaryResponse returnGetBeneficiaryResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(index - 1), new RowMapper<GetBeneficiaryResponse>() { 
		              @Override
		              public GetBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		              GetBeneficiaryResponse dto = new GetBeneficiaryResponse();
		              
								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
		              return dto;
		              }
		              },false);
		
		              outGetBeneficiaryResponse.setResponse(returnGetBeneficiaryResponse.getResponse());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		      
		      if(index==3){
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									BeneficiariesResponse[] returnGetBeneficiaryResponse = MapperResultUtil.mapToArray(response.getResultSets().get(0), new RowMapper<BeneficiariesResponse>() { 
		              @Override
		              public BeneficiariesResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		            	  BeneficiariesResponse dto = new BeneficiariesResponse();
		              
			            	  	dto.setId(resultSetMapper.getInteger(1));
			            	  	dto.setNames(resultSetMapper.getString(2));
								dto.setLastName(resultSetMapper.getString(3));
								dto.setSecondLastName(resultSetMapper.getString(4));
								dto.setBirthDate(resultSetMapper.getString(5));
								dto.setRelationship(resultSetMapper.getString(6));
								dto.setPhoneNumber(resultSetMapper.getString(7));
								dto.setZipcode(resultSetMapper.getString(8));
								dto.setProvince(resultSetMapper.getString(9));
								dto.setCity(resultSetMapper.getString(10));
								dto.setColony(resultSetMapper.getString(11));
								dto.setLocation(resultSetMapper.getString(12));
								dto.setAddress(resultSetMapper.getString(13));
								dto.setPercentage(resultSetMapper.getInteger(14));
							
		              return dto;
		              }
		              },false);
		
		              outGetBeneficiaryResponse.setBeneficiaries(returnGetBeneficiaryResponse);
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		      }
		    
		//End map returns
		if(mapBlank!=0&&mapBlank==mapTotal){
		LOGGER.logDebug("No data found");
		throw new CTSRestException("404",null);
		}
		
		  LOGGER.logDebug("Ends service execution: getBeneficiary");
		  //returns data
		  return outGetBeneficiaryResponse;
		}

	
	/**
	 * Get catalog
	 */
	@Override
	// Have DTO
	public ResponseCatalog getCatalog(RequestCatalog inRequestCatalog) throws CTSRestException {
		LOGGER.logDebug("Start service execution: getCatalog");
		ResponseCatalog outResponseCatalog = new ResponseCatalog();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_get_catalog_data");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500087");
		procedureRequestAS.addInputParam("@i_catalog", ICTSTypes.SQLVARCHAR, inRequestCatalog.getCatalogueTable());

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			CatalogueItems[] returnCatalogueItems = MapperResultUtil.mapToArray(response.getResultSets().get(0),
					new RowMapper<CatalogueItems>() {
						@Override
						public CatalogueItems mapRow(ResultSetMapper resultSetMapper, int index) {
							CatalogueItems dto = new CatalogueItems();

							dto.setCode(resultSetMapper.getString(1));
							dto.setName(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseCatalog.setCatalogueItems(returnCatalogueItems);
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			Response returnResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1),
					new RowMapper<Response>() {
						@Override
						public Response mapRow(ResultSetMapper resultSetMapper, int index) {
							Response dto = new Response();

							dto.setCode(resultSetMapper.getInteger(1));
							dto.setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseCatalog.setResponse(returnResponse);
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(2).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseCatalog returnResponseCatalog = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2),
					new RowMapper<ResponseCatalog>() {
						@Override
						public ResponseCatalog mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseCatalog dto = new ResponseCatalog();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outResponseCatalog.setSuccess(returnResponseCatalog.isSuccess());
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: getCatalog");
		// returns data
		return outResponseCatalog;
	}
	
	/**
	 * Service to obtain the detail of movements of an existing savings account
	 */
	@Override
	// Have DTO
	public ResponseGetMovementsDetail getMovementsDetail(RequestGetMovementsDetail inRequestGetMovementsDetail)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: getMovementsDetail");
		ResponseGetMovementsDetail outResponseGetMovementsDetail = new ResponseGetMovementsDetail();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_tr04_cons_mov_ah_api");
		
		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500106");
		procedureRequestAS.addInputParam("@i_cliente", ICTSTypes.SQLINT4,
				String.valueOf(inRequestGetMovementsDetail.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_cta", ICTSTypes.SQLVARCHAR,
				inRequestGetMovementsDetail.getAccountNumber());
		procedureRequestAS.addInputParam("@i_nro_registros", ICTSTypes.SQLINT4,
				String.valueOf(inRequestGetMovementsDetail.getNumberOfMovements()));
		procedureRequestAS.addInputParam("@i_fecha_ini", ICTSTypes.SQLVARCHAR,
				inRequestGetMovementsDetail.getMinDate());
		procedureRequestAS.addInputParam("@i_fecha_fin", ICTSTypes.SQLVARCHAR,
				inRequestGetMovementsDetail.getMaxDate());
		procedureRequestAS.addInputParam("@i_sec_unico", ICTSTypes.SQLINT4,
				String.valueOf(inRequestGetMovementsDetail.getSequential()));
		procedureRequestAS.addInputParam("@i_mov_id", ICTSTypes.SQLINT4,
				String.valueOf(inRequestGetMovementsDetail.getMovementId()));

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseGetMovementsDetail returnResponseGetMovementsDetail = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseGetMovementsDetail>() {
						@Override
						public ResponseGetMovementsDetail mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseGetMovementsDetail dto = new ResponseGetMovementsDetail();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outResponseGetMovementsDetail.setSuccess(returnResponseGetMovementsDetail.isSuccess());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseGetMovementsDetail returnResponseGetMovementsDetail = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseGetMovementsDetail>() {
						@Override
						public ResponseGetMovementsDetail mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseGetMovementsDetail dto = new ResponseGetMovementsDetail();

							dto.responseInstance().setCode(resultSetMapper.getInteger(1));
							dto.responseInstance().setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseGetMovementsDetail.setResponse(returnResponseGetMovementsDetail.getResponse());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().size() > 2
				&& response.getResultSets().get(2).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseGetMovementsDetail returnResponseGetMovementsDetail = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseGetMovementsDetail>() {
						@Override
						public ResponseGetMovementsDetail mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseGetMovementsDetail dto = new ResponseGetMovementsDetail();

							dto.setNumberOfResults(resultSetMapper.getInteger(1));
							return dto;
						}
					}, false);

			outResponseGetMovementsDetail.setNumberOfResults(returnResponseGetMovementsDetail.getNumberOfResults());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().size() == 4
				&& response.getResultSets().get(3).getData().getRows().size() > 0) {
			// ---------NO Array
			AccountStatementArray[] returnResponseGetMovementsDetail = MapperResultUtil
					.mapToArray(response.getResultSets().get(3), new RowMapper<AccountStatementArray>() {
						@Override
						public AccountStatementArray mapRow(ResultSetMapper resultSetMapper, int index) {
							AccountStatementArray dto = new AccountStatementArray();

							dto.setAccountingBalance(resultSetMapper.getBigDecimal(1));
							dto.setAvailableBalance(resultSetMapper.getBigDecimal(2));
							dto.setMovementType(resultSetMapper.getString(3));
							dto.setAmount(resultSetMapper.getBigDecimal(4));
							dto.setTransactionDate(resultSetMapper.getString(5));
							dto.setOperationType(resultSetMapper.getString(6));
							dto.setCommission(resultSetMapper.getString(7));
							dto.setIva(resultSetMapper.getString(8));
							dto.setTransactionReferenceNumber(resultSetMapper.getInteger(9));
							dto.setDescription(resultSetMapper.getString(10));
							dto.cardDetailsInstance().setMaskedCardNumber(resultSetMapper.getString(11));
							dto.sourceAccountInstance().setOwnerName(resultSetMapper.getString(12));
							dto.sourceAccountInstance().setAccountNumber(resultSetMapper.getString(13));
							dto.sourceAccountInstance().setBankName(resultSetMapper.getString(14));
							dto.destinationAccountInstance().setOwnerName(resultSetMapper.getString(15));
							dto.destinationAccountInstance().setAccountNumber(resultSetMapper.getString(16));
							dto.destinationAccountInstance().setBankName(resultSetMapper.getString(17));
							dto.speiDetailsInstance().setReferenceCode(resultSetMapper.getString(18));
							dto.speiDetailsInstance().setTrackingId(resultSetMapper.getString(19));
							dto.atmDetailsInstance().setBankName(resultSetMapper.getString(20));
							dto.atmDetailsInstance().setLocationId(resultSetMapper.getString(21));
							dto.atmDetailsInstance().setTransactionId(resultSetMapper.getString(22));
							dto.merchantDetailsInstance().setEstablishmentName(resultSetMapper.getString(23));
							dto.merchantDetailsInstance().setTransactionId(resultSetMapper.getString(24));
							dto.storeDetailsInstance().setEstablishmentName(resultSetMapper.getString(25));
							dto.storeDetailsInstance().setTransactionId(resultSetMapper.getString(26));
							return dto;
						}
					}, false);

			outResponseGetMovementsDetail.setAccountStatementArray(returnResponseGetMovementsDetail);
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: getMovementsDetail");
		// returns data
		return outResponseGetMovementsDetail;
	}

	/**
	 * Municipality By State
	 */
	@Override
	// Have DTO
	public ResponseMunicipalityByState getMunicipalityByState(RequestMunicipalityByState inRequestMunicipalityByState)throws CTSRestException {
		LOGGER.logDebug("Start service execution: getMunicipalityByState");
		ResponseMunicipalityByState outResponseMunicipalityByState = new ResponseMunicipalityByState();

//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_get_municipality_state_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500105");
		procedureRequestAS.addInputParam("@i_state_id", ICTSTypes.SQLVARCHAR,inRequestMunicipalityByState.getStateId());
		procedureRequestAS.addInputParam("@i_zip_code", ICTSTypes.SQLVARCHAR, inRequestMunicipalityByState.getZipCode());
		procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "XXX");
		procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "0");
		procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "0");

//execute procedure
		ProcedureResponseAS resp = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(resp);
//throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
//Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (resp.getResultSets() != null && resp.getResultSets().size()>0  &&
				resp.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			MunicipalitiesItems[]  municipalities = MapperResultUtil
					.mapToArray(resp.getResultSets().get(0), new RowMapper<MunicipalitiesItems>() {
						@Override
						public MunicipalitiesItems mapRow(ResultSetMapper resultSetMapper, int index) {
							MunicipalitiesItems dto = new MunicipalitiesItems();
							dto.setIdMunicipality(resultSetMapper.getString(1));
							dto.setMunicipality(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseMunicipalityByState.setMunicipalitiesItems(municipalities);
			// break;

		} else {
			mapBlank++;

		}



		Response response=new Response();
		response.setMessage(getOutValue(String.class, "@o_message", resp.getParams()));
		response.setCode(getOutValue(Integer.class, "@o_code", resp.getParams()));
		outResponseMunicipalityByState.setResponse(response);

		if (response != null && response.getCode() == 0) {
			outResponseMunicipalityByState.setSuccess(true);

		} else
			outResponseMunicipalityByState.setSuccess(false);


		LOGGER.logDebug("Ends service execution: getMunicipalityByState");
		// returns data
		return outResponseMunicipalityByState;
	}
    /**
    * Get Own Accounts View
    */
	   @Override
	   //Have DTO
	   public ResponseOwnAccountsView getOwnAccountsView(RequestOwnAccountsView inRequestOwnAccountsView  )throws CTSRestException{
		  LOGGER.logDebug("Start service execution: getOwnAccountsView");
	   ResponseOwnAccountsView outResponseOwnAccountsView  = new ResponseOwnAccountsView();
	       
	   //create procedure
	   ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_consulta_cuentas");
	   
	     procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500103");
	   procedureRequestAS.addInputParam("@i_customer_id",ICTSTypes.SQLINT4,String.valueOf(inRequestOwnAccountsView.getExternalCustomerId()));
	   
	   //execute procedure
	   ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
	
	   List<MessageBlock> errors = ErrorUtil.getErrors(response);
	   //throw error
	   if(errors!= null && errors.size()> 0){
	   LOGGER.logDebug("Procedure execution returns error");
	   if ( LOGGER.isDebugEnabled() ) {
	   for (int i = 0; i < errors.size(); i++) {
	   LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
	   }
	   }
	   throw new CTSRestException("Procedure Response has errors", null, errors);
	   }
	   LOGGER.logDebug("Procedure ok");
	   //Init map returns
	   int mapTotal=0;
	   int mapBlank=0;
	   
	         mapTotal++;
	         if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseOwnAccountsView returnResponseOwnAccountsView = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseOwnAccountsView>() { 
	                 @Override
	                 public ResponseOwnAccountsView mapRow(ResultSetMapper resultSetMapper, int index) {
	                 ResponseOwnAccountsView dto = new ResponseOwnAccountsView();
	                 
	                       dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
	                 return dto;
	                 }
	                 },false);
	
	                 outResponseOwnAccountsView.setSuccess(returnResponseOwnAccountsView.isSuccess());
	                     // break;
	                   
	         }else {
	         mapBlank++;
	
	         }
	       
	         mapTotal++;
	         if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseOwnAccountsView returnResponseOwnAccountsView = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseOwnAccountsView>() { 
	                 @Override
	                 public ResponseOwnAccountsView mapRow(ResultSetMapper resultSetMapper, int index) {
	                 ResponseOwnAccountsView dto = new ResponseOwnAccountsView();
	                 
								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
	                 return dto;
	                 }
	                 },false);
	
	                 outResponseOwnAccountsView.setResponse(returnResponseOwnAccountsView.getResponse());
	                     // break;
	                   
	         }else {
	         mapBlank++;
	
	         }
	       
	         mapTotal++;
	         if (response.getResultSets()!=null&&response.getResultSets().size()>2&&response.getResultSets().get(2).getData().getRows().size()>0) {	
									//---------NO Array
									AccountsArray[] returnResponseOwnAccountsView = MapperResultUtil.mapToArray(response.getResultSets().get(2), new RowMapper<AccountsArray>() { 
	                 @Override
	                 public AccountsArray mapRow(ResultSetMapper resultSetMapper, int index) {
	                	 AccountsArray dto = new AccountsArray();
	                	 
							dto.setAvailableBalance(resultSetMapper.getBigDecimal(1));
							dto.setDrawBalance(resultSetMapper.getBigDecimal(2));
							dto.setCurrencyId(resultSetMapper.getInteger(3));
							dto.setCurrencySymbol(resultSetMapper.getString(4));
							dto.setCurrencyName(resultSetMapper.getString(5));
							dto.setProductAlias(resultSetMapper.getString(6));
							dto.setProductId(resultSetMapper.getInteger(7));
							dto.setProductNumber(resultSetMapper.getString(8));
							dto.setProductName(resultSetMapper.getString(9));
							dto.setProductAbbreviation(resultSetMapper.getString(10));
							dto.setAccountingBalance(resultSetMapper.getBigDecimal(11));
							dto.setExpirationDate(resultSetMapper.getString(12));
							dto.setRate(resultSetMapper.getString(13));
							dto.setTotalCredit(resultSetMapper.getBigDecimal(14));
							dto.setClabeInterBank(resultSetMapper.getString(15));
	                 return dto;
	                 }
	                 },false);
	
	                 outResponseOwnAccountsView.setAccountsArray(returnResponseOwnAccountsView);
	                     // break;
	                   
	         }else {
	         mapBlank++;
	
	         }
	       
	   //End map returns
	   if(mapBlank!=0&&mapBlank==mapTotal){
	   LOGGER.logDebug("No data found");
	   throw new CTSRestException("404",null);
	   }
	   
	     LOGGER.logDebug("Ends service execution: getOwnAccountsView");
	     //returns data
	     return outResponseOwnAccountsView;
	   }
	   
	   
		/**
		 * Find State By zip Code API
		 */
		@Override
		// Have DTO
		public StateByZipCodeResponse getStateByZipCode(StateByZipCodeRequest inStateByZipCodeRequest)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: getStateByZipCode");
			StateByZipCodeResponse outStateByZipCodeResponse = new StateByZipCodeResponse();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_getzip_codestate_api");
			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500104");
			procedureRequestAS.addInputParam("@i_zip_code", ICTSTypes.SQLVARCHAR, inStateByZipCodeRequest.getZipCode());
			procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "XXX");
			procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "0");
			procedureRequestAS.addOutputParam("@o_id_state", ICTSTypes.SQLINT4, "0");
			procedureRequestAS.addOutputParam("@o_desc_state", ICTSTypes.SQLVARCHAR, "XXX");
			procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "0");

			// execute procedure
			ProcedureResponseAS resp = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(resp);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}
			
			Response response=new Response();
			
			response.setMessage(getOutValue(String.class, "@o_message", resp.getParams()));
			response.setCode(getOutValue(Integer.class, "@o_code", resp.getParams()));
			outStateByZipCodeResponse.setResponse(response);
			outStateByZipCodeResponse.setStateId(getOutValue(String.class, "@o_id_state", resp.getParams()));
			outStateByZipCodeResponse
					.setStateDescription(getOutValue(String.class, "@o_desc_state", resp.getParams()));
			outStateByZipCodeResponse.setSuccess(getOutValue(Boolean.class, "@o_success", resp.getParams()));
			
			if (response != null && response.getCode() == 0) {
				outStateByZipCodeResponse.setSuccess(true);

			} else
				outStateByZipCodeResponse.setSuccess(false);
		
			

			LOGGER.logDebug("Ends service execution: getStateByZipCode");
			// returns data
			return outStateByZipCodeResponse;
		}   

	/**
	 * View Customer Information
	 */
	@Override
	// Have DTO
	public ResponseGetUserEntityInformation getUserEntityInformation(
			RequestGetUserEntityInformation inRequestGetUserEntityInformation) throws CTSRestException {
		LOGGER.logDebug("Start service execution: getUserEntityInformation");
		ResponseGetUserEntityInformation outResponseGetUserEntityInformation = new ResponseGetUserEntityInformation();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_getCustomer");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500092");
		procedureRequestAS.addInputParam("@i_externalCustomerId", ICTSTypes.SQLINT4,
				String.valueOf(inRequestGetUserEntityInformation.getExternalCustomerId()));

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseGetUserEntityInformation returnResponseGetUserEntityInformation = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0),
							new RowMapper<ResponseGetUserEntityInformation>() {
								@Override
								public ResponseGetUserEntityInformation mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseGetUserEntityInformation dto = new ResponseGetUserEntityInformation();

									dto.setSuccess(resultSetMapper.getBooleanWrapper(17));
									dto.setRegistrationDate(resultSetMapper.getCalendar(1));
									dto.setModifyDate(resultSetMapper.getCalendar(2));
									dto.setCompleteName(resultSetMapper.getString(3));
									dto.setEntityType(resultSetMapper.getString(4));
									dto.setIdentityCard(resultSetMapper.getString(5));
									dto.setFirstSurName(resultSetMapper.getString(6));
									dto.setSecondSurName(resultSetMapper.getString(7));
									dto.setGender(resultSetMapper.getString(8));
									dto.setBirthDate(resultSetMapper.getCalendar(9));
									dto.setFirstName(resultSetMapper.getString(10));
									dto.setSecondName(resultSetMapper.getString(11));
									dto.setRFC(resultSetMapper.getString(12));
									dto.setMail(resultSetMapper.getString(13));
									dto.setPhoneNumber(resultSetMapper.getString(14));
									dto.setCustomerLevel(resultSetMapper.getString(15));
									dto.setAddressId(resultSetMapper.getInteger(16));
									dto.responseInstance().setCode(resultSetMapper.getInteger(18));
									dto.responseInstance().setMessage(resultSetMapper.getString(19));
									return dto;
								}
							}, false);

			// outResponseGetUserEntityInformation.set(returnResponseGetUserEntityInformation);
			// break;
			outResponseGetUserEntityInformation = returnResponseGetUserEntityInformation;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: getUserEntityInformation");
		// returns data
		return outResponseGetUserEntityInformation;
	}

	/**
	 * Register Beneficiary Saving Account
	 */
	@Override
	// Have DTO
	public RegisterBeneficiaryResponse registerBeneficiary(RegisterBeneficiaryRequest inRegisterBeneficiaryRequest)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: registerBeneficiary");
		RegisterBeneficiaryResponse outRegisterBeneficiaryResponse = new RegisterBeneficiaryResponse();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_bvirtual..sp_beneficiaries_mant_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500096");
		procedureRequestAS.addInputParam("@i_ente", ICTSTypes.SQLINT4,
				String.valueOf(inRegisterBeneficiaryRequest.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_numero_producto", ICTSTypes.SQLVARCHAR,
				inRegisterBeneficiaryRequest.getAccount());
		procedureRequestAS.addInputParam("@i_operacion", ICTSTypes.SQLCHAR, "I");

		Gson gson = new Gson();
		String JSON = gson.toJson(inRegisterBeneficiaryRequest.getBeneficiaries());
		procedureRequestAS.addInputParam("@i_json_beneficiaries", ICTSTypes.SQLVARCHAR, JSON);

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		Integer index = response.getResultSets().size();
		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			RegisterBeneficiaryResponse returnRegisterBeneficiaryResponse = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<RegisterBeneficiaryResponse>() {
						@Override
						public RegisterBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
							RegisterBeneficiaryResponse dto = new RegisterBeneficiaryResponse();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outRegisterBeneficiaryResponse.setSuccess(returnRegisterBeneficiaryResponse.isSuccess());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			RegisterBeneficiaryResponse returnRegisterBeneficiaryResponse = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<RegisterBeneficiaryResponse>() {
						@Override
						public RegisterBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
							RegisterBeneficiaryResponse dto = new RegisterBeneficiaryResponse();

							dto.responseInstance().setCode(resultSetMapper.getInteger(1));
							dto.responseInstance().setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outRegisterBeneficiaryResponse.setResponse(returnRegisterBeneficiaryResponse.getResponse());
			// break;

		} else {
			mapBlank++;

		}
		mapTotal++;
        if (response.getResultSets()!=null&& response.getResultSets().size()>2&&response.getResultSets().get(2).getData().getRows().size()>0) {	
							//---------NO Array
        			RegisteredBeneficiaries[] returnRegisterBeneficiaryResponse = MapperResultUtil.mapToArray(response.getResultSets().get(2), new RowMapper<RegisteredBeneficiaries>() { 
                @Override
                public RegisteredBeneficiaries mapRow(ResultSetMapper resultSetMapper, int index) {
                	RegisteredBeneficiaries dto = new RegisteredBeneficiaries();
                
						dto.setId(resultSetMapper.getInteger(1));
						dto.setNames(resultSetMapper.getString(2));
                return dto;
                }
                },false);

                outRegisterBeneficiaryResponse.setRegisteredBeneficiaries(returnRegisterBeneficiaryResponse);
                    // break;
                  
        }else {
        mapBlank++;

        }

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: registerBeneficiary");
		// returns data
		return outRegisterBeneficiaryResponse;
	}

	@Override
	// Have DTO
	public SearchZipCodeResponse searchZipCode(SearchZipCodeRequest inSearchZipCodeRequest) throws CTSRestException {
		LOGGER.logDebug("Start service execution: searchZipCode");

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_search_zipcode");

		SearchZipCodeResponse toReturn = new SearchZipCodeResponse();

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500098");
		procedureRequestAS.addInputParam("@i_zipCode", ICTSTypes.SQLVARCHAR, inSearchZipCodeRequest.getZipCode());
		procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "false");
		procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "XXXX");
		procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "000");

		// execute procedure
		ProcedureResponseAS resp = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(resp);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (resp .getResultSets() != null && resp.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ListZipCode[] returnListZipCode = MapperResultUtil.mapToArray(resp.getResultSets().get(0),
					new RowMapper<ListZipCode>() {
						@Override
						public ListZipCode mapRow(ResultSetMapper resultSetMapper, int index) {
							ListZipCode dto = new ListZipCode();

							dto.setProvinceCode(resultSetMapper.getString(3));
							dto.setCityCode(resultSetMapper.getString(2));
							dto.setCodeColony(resultSetMapper.getString(1));
							return dto;
						}
					}, false);

			toReturn.setZipList(returnListZipCode);

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		toReturn.setSuccess(getOutValue(boolean.class, "@o_success", resp.getParams()));
		Response response = new Response();
		response.setMessage(getOutValue(String.class, "@o_message", resp.getParams()));
		response.setCode(getOutValue(Integer.class, "@o_code", resp.getParams()));

		if (response != null && response.getCode() == 0) {
			toReturn.setSuccess(true);

		} else
			toReturn.setSuccess(false);

		toReturn.setResponse(response);

		LOGGER.logDebug("Ends service execution: searchZipCode");

		return toReturn;

	}
	
	    /**
	    * Update customer address
	    */
	   @Override
		//Have DTO
		public UpdateCustomerAddressResponse updateCustomerAddress(UpdateCustomerAddressRequest inUpdateCustomerAddressRequest  )throws CTSRestException{
		LOGGER.logDebug("Start service execution: updateCustomerAddress");
		UpdateCustomerAddressResponse outUpdateCustomerAddressResponse  = new UpdateCustomerAddressResponse();
		    
		//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_direccion_dml_api");
		
		  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500100");
		procedureRequestAS.addInputParam("@i_operacion",ICTSTypes.SQLCHAR,"U");
		procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_descripcion",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getReferenceAddress());
		procedureRequestAS.addInputParam("@i_tipo",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getAddressTypeCode());
		procedureRequestAS.addInputParam("@i_parroquia",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getTownCode()));
		procedureRequestAS.addInputParam("@i_ciudad",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getCity()));
		procedureRequestAS.addInputParam("@i_oficina",ICTSTypes.SQLINT2,"1");
		procedureRequestAS.addInputParam("@i_provincia",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getProvince()));
		procedureRequestAS.addInputParam("@i_tipo_prop",ICTSTypes.SQLCHAR,String.valueOf(inUpdateCustomerAddressRequest.getPropertyTypeCode()));
		procedureRequestAS.addInputParam("@i_codpostal",ICTSTypes.SQLCHAR,String.valueOf(inUpdateCustomerAddressRequest.getZipcode()));
		procedureRequestAS.addInputParam("@i_calle",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getStreet());
		procedureRequestAS.addInputParam("@i_tiempo_reside",ICTSTypes.SQLINT4,String.valueOf(inUpdateCustomerAddressRequest.getTimeCurrentReside()));
		procedureRequestAS.addInputParam("@i_nro",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getExternalNumber());
		procedureRequestAS.addInputParam("@i_nro_interno",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getInternalNumber());
		procedureRequestAS.addInputParam("@i_localidad",ICTSTypes.SQLVARCHAR,inUpdateCustomerAddressRequest.getSubdivisioncode());
		procedureRequestAS.addInputParam("@i_direct",ICTSTypes.SQLVARCHAR,"S");
		
		//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		//throw error
		if(errors!= null && errors.size()> 0){
		LOGGER.logDebug("Procedure execution returns error");
		if ( LOGGER.isDebugEnabled() ) {
		for (int i = 0; i < errors.size(); i++) {
		LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		}
		}
		throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		//Init map returns
		int mapTotal=0;
		int mapBlank=0;
		
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									UpdateCustomerAddressResponse returnUpdateCustomerAddressResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<UpdateCustomerAddressResponse>() { 
		              @Override
		              public UpdateCustomerAddressResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		              UpdateCustomerAddressResponse dto = new UpdateCustomerAddressResponse();
		              
		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		              return dto;
		              }
		              },false);
		
		              outUpdateCustomerAddressResponse.setSuccess(returnUpdateCustomerAddressResponse.isSuccess());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									UpdateCustomerAddressResponse returnUpdateCustomerAddressResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<UpdateCustomerAddressResponse>() { 
		              @Override
		              public UpdateCustomerAddressResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		              UpdateCustomerAddressResponse dto = new UpdateCustomerAddressResponse();
		              
								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
		              return dto;
		              }
		              },false);
		
		              outUpdateCustomerAddressResponse.setResponse(returnUpdateCustomerAddressResponse.getResponse());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		//End map returns
		if(mapBlank!=0&&mapBlank==mapTotal){
		LOGGER.logDebug("No data found");
		throw new CTSRestException("404",null);
		}
		
		  LOGGER.logDebug("Ends service execution: updateCustomerAddress");
		  //returns data
		  return outUpdateCustomerAddressResponse;
		}

	/**
	 * Service to Update Profile
	 */
	@Override
	// Return List
	public List<ResponseUpdateProfile> updateProfile(RequestUpdateProfile inRequestUpdateProfile)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: updateProfile");
		List<ResponseUpdateProfile> outSingleResponseUpdateProfile = new ArrayList<>();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_updateProfile");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500095");
		procedureRequestAS.addInputParam("@i_externalCustomerId", ICTSTypes.SQLINT4,
				String.valueOf(inRequestUpdateProfile.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_email", ICTSTypes.SQLVARCHAR, inRequestUpdateProfile.getEmail());
		procedureRequestAS.addInputParam("@i_phoneNumber", ICTSTypes.SQLVARCHAR,
				inRequestUpdateProfile.getPhoneNumber());

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ----------------Assume Array return
			List<ResponseUpdateProfile> returnResponseUpdateProfile = MapperResultUtil
					.mapToList(response.getResultSets().get(0), new RowMapper<ResponseUpdateProfile>() {
						@Override
						public ResponseUpdateProfile mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseUpdateProfile dto = new ResponseUpdateProfile();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							dto.responseInstance().setMessage(resultSetMapper.getString(2));
							dto.responseInstance().setCode(resultSetMapper.getInteger(3));
							return dto;
						}
					}, false);
			outSingleResponseUpdateProfile = returnResponseUpdateProfile;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: updateProfile");
		// returns data
		return outSingleResponseUpdateProfile;
	}

	@Override
	// Have DTO
	public ResponseValidateCustomerIdentityCard validateCustomerIdentityCard(
			RequestValidateCustomerIdentityCard inRequestValidateCustomerIdentityCard) throws CTSRestException {
		LOGGER.logDebug("Start service execution: validateCustomerIdentityCard");
		ResponseValidateCustomerIdentityCard outResponseValidateCustomerIdentityCard = new ResponseValidateCustomerIdentityCard();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_validate_identity_card_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500093");
		procedureRequestAS.addInputParam("@curp", ICTSTypes.SQLVARCHAR,
				inRequestValidateCustomerIdentityCard.getIdentityCard());

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ----------------SingleResult
			ResponseValidateCustomerIdentityCard returnResponseValidateCustomerIdentityCard = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0),
							new RowMapper<ResponseValidateCustomerIdentityCard>() {
								// ----------------isOutDTO
								@Override
								public ResponseValidateCustomerIdentityCard mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseValidateCustomerIdentityCard dto = new ResponseValidateCustomerIdentityCard();

									dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
									return dto;
								}
							}, false);
			outResponseValidateCustomerIdentityCard.setSuccess(returnResponseValidateCustomerIdentityCard.isSuccess());
		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateCustomerIdentityCard returnResponseValidateCustomerIdentityCard = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(1),
							new RowMapper<ResponseValidateCustomerIdentityCard>() {
								@Override
								public ResponseValidateCustomerIdentityCard mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseValidateCustomerIdentityCard dto = new ResponseValidateCustomerIdentityCard();

									dto.responseInstance().setCode(resultSetMapper.getInteger(1));
									dto.responseInstance().setMessage(resultSetMapper.getString(2));
									return dto;
								}
							}, false);

			outResponseValidateCustomerIdentityCard.setResponse(returnResponseValidateCustomerIdentityCard.getResponse());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(2).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateCustomerIdentityCard returnResponseValidateCustomerIdentityCard = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(2),
							new RowMapper<ResponseValidateCustomerIdentityCard>() {
								@Override
								public ResponseValidateCustomerIdentityCard mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseValidateCustomerIdentityCard dto = new ResponseValidateCustomerIdentityCard();

									dto.setExternalCustomerId(resultSetMapper.getInteger(1));
									return dto;
								}
							}, false);

			outResponseValidateCustomerIdentityCard
					.setExternalCustomerId(returnResponseValidateCustomerIdentityCard.getExternalCustomerId());
			// break;

		} else {
			mapBlank++;

		}
		
		Response resp=outResponseValidateCustomerIdentityCard.getResponse();
		
		if(resp==null || resp.getCode()>0 ) {
			
			outResponseValidateCustomerIdentityCard.setSuccess(false);
		}else {
			
			outResponseValidateCustomerIdentityCard.setSuccess(true);
		}
		

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: validateCustomerIdentityCard");
		// returns data
		return outResponseValidateCustomerIdentityCard;
	}
	
	    /**
	    * Service to register beneficiaries for spei transfers.
	    */
	   @Override
			//Have DTO
			public ResponseRegisterAccountSpei registerAccount(RequestRegisterAccountSpei inRequestRegisterAccountSpei  )throws CTSRestException{
		LOGGER.logDebug("Start service execution: registerAccount");
		ResponseRegisterAccountSpei outResponseRegisterAccountSpei  = new ResponseRegisterAccountSpei();
		    
		//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_register_account_api");
		
		  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500110");
		procedureRequestAS.addInputParam("@i_cta_des",ICTSTypes.SQLVARCHAR,inRequestRegisterAccountSpei.getAccountNumberDestination());
		procedureRequestAS.addInputParam("@i_product_alias",ICTSTypes.SQLVARCHAR,inRequestRegisterAccountSpei.getProductAlias());
		procedureRequestAS.addInputParam("@i_banco",ICTSTypes.SQLINT4,String.valueOf(inRequestRegisterAccountSpei.getBankId()));
		procedureRequestAS.addInputParam("@i_cta",ICTSTypes.SQLVARCHAR,inRequestRegisterAccountSpei.getAccountNumber());
		procedureRequestAS.addInputParam("@i_tipo_tercero",ICTSTypes.SQLCHAR,String.valueOf(inRequestRegisterAccountSpei.getTypeDestinationId()));
		procedureRequestAS.addInputParam("@i_operacion",ICTSTypes.SQLCHAR,"I");
		procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inRequestRegisterAccountSpei.getExternalCustomerId()));
		
		//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		//throw error
		if(errors!= null && errors.size()> 0){
		LOGGER.logDebug("Procedure execution returns error");
		if ( LOGGER.isDebugEnabled() ) {
		for (int i = 0; i < errors.size(); i++) {
		LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		}
		}
		throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		//Init map returns
		int mapTotal=0;
		int mapBlank=0;
		
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseRegisterAccountSpei returnResponseRegisterAccountSpei = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseRegisterAccountSpei>() { 
		              @Override
		              public ResponseRegisterAccountSpei mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseRegisterAccountSpei dto = new ResponseRegisterAccountSpei();
		              
		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		              return dto;
		              }
		              },false);
		
		              outResponseRegisterAccountSpei.setSuccess(returnResponseRegisterAccountSpei.isSuccess());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseRegisterAccountSpei returnResponseRegisterAccountSpei = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseRegisterAccountSpei>() { 
		              @Override
		              public ResponseRegisterAccountSpei mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseRegisterAccountSpei dto = new ResponseRegisterAccountSpei();
		              
								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
		              return dto;
		              }
		              },false);
		
		              outResponseRegisterAccountSpei.setResponse(returnResponseRegisterAccountSpei.getResponse());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		//End map returns
		if(mapBlank!=0&&mapBlank==mapTotal){
		LOGGER.logDebug("No data found");
		throw new CTSRestException("404",null);
		}
		
		  LOGGER.logDebug("Ends service execution: registerAccount");
		  //returns data
		  return outResponseRegisterAccountSpei;
		}

		/**
		 * Service to create a savings account for an existing customer
		 */
		@Override
		// Have DTO
		public ResponseCreateSavingAccount createSavingAccount(RequestCreateSavingAccount inRequestCreateSavingAccount)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: createSavingAccount");

			ResponseCreateSavingAccount outResponseCreateSavingAccount = new ResponseCreateSavingAccount();

			Response response = new Response();
			outResponseCreateSavingAccount.setResponse(response);

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_apertura_aut_bv_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500097");
			procedureRequestAS.addInputParam("@i_customer", ICTSTypes.SQLINT4,
					String.valueOf(inRequestCreateSavingAccount.getCustomerId()));
			procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "X");
			procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "0");
			procedureRequestAS.addOutputParam("@o_account", ICTSTypes.SQLVARCHAR, "X");
			procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "0");

			// execute procedure
			ProcedureResponseAS resp = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(resp);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}
			response.setMessage(getOutValue(String.class, "@o_message", resp.getParams()));
			response.setCode(getOutValue(Integer.class, "@o_code", resp.getParams()));

			outResponseCreateSavingAccount.setResponse(response);
			outResponseCreateSavingAccount.setAccountNumber(getOutValue(String.class, "@o_account", resp.getParams()));

			if (outResponseCreateSavingAccount.getAccountNumber() != null
					&& outResponseCreateSavingAccount.getAccountNumber() != "" && response.getCode() == 0) {

				outResponseCreateSavingAccount.setSuccess(true);

			} else {

				outResponseCreateSavingAccount.setSuccess(false);
			}

			LOGGER.logDebug("Ends service execution: createSavingAccount");

			return outResponseCreateSavingAccount;
		}
	
	/**
	 * Catalogue Of Locations 
	 */
	@Override	
	// Have DTO
	public ResponseSearchLocationCatalog searchLocationCatalog(
			RequestSearchLocationCatalog inRequestSearchLocationCatalog) throws CTSRestException {
		LOGGER.logDebug("Start service execution: searchLocationCatalog");
		ResponseSearchLocationCatalog outResponseSearchLocationCatalog = new ResponseSearchLocationCatalog();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_search_location_catalog_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500109");
		procedureRequestAS.addInputParam("@i_city_code", ICTSTypes.SQLVARCHAR,
				inRequestSearchLocationCatalog.getCity());
		procedureRequestAS.addOutputParam("@o_success", ICTSTypes.SQLBIT, "0");
		procedureRequestAS.addOutputParam("@o_code", ICTSTypes.SQLINT4, "0");
		procedureRequestAS.addOutputParam("@o_message", ICTSTypes.SQLVARCHAR, "X");

		// execute procedure
		ProcedureResponseAS resp = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(resp);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (resp.getResultSets() != null && resp.getResultSets().size()>0 && resp.getResultSets().get(0).getData().getRows().size()>0) {
			// ---------NO Array
			ResponseSearchLocationCatalog_addressTypeItem [] returnResponseSearchLocationCatalog_addressTypeItem = MapperResultUtil
					.mapToArray(resp.getResultSets().get(0),
							new RowMapper<ResponseSearchLocationCatalog_addressTypeItem>() {
								
								@Override
								public ResponseSearchLocationCatalog_addressTypeItem mapRow(
										ResultSetMapper resultSetMapper, int index) {
									ResponseSearchLocationCatalog_addressTypeItem dto = new ResponseSearchLocationCatalog_addressTypeItem();

									dto.setCode(resultSetMapper.getString(1));
									dto.setValue(resultSetMapper.getString(2));
									return dto;
								}
							}, false);

			outResponseSearchLocationCatalog.setAddressTypeItem(returnResponseSearchLocationCatalog_addressTypeItem);
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		
		
		Response response = new Response();
		
		response.setCode(getOutValue(Integer.class, "@o_code", resp.getParams()));
		response.setMessage(getOutValue(String.class, "@o_message", resp.getParams()));
		outResponseSearchLocationCatalog.setResponse(response);

		if (response != null && response.getCode() == 0) {
			outResponseSearchLocationCatalog.setSuccess(true);

		} else
			outResponseSearchLocationCatalog.setSuccess(false);

		

		LOGGER.logDebug("Ends service execution: searchLocationCatalog");
		// returns data
		return outResponseSearchLocationCatalog;
	}
	
	/**
	 * Transfer Spei
	 */
	@Override
	// Have DTO
	public ResponseTransferSpi transferSpei(RequestTransferSpi inRequestTransferSpi) throws CTSRestException {
		LOGGER.logDebug("Start service execution: transferSpei");
		ResponseTransferSpi outResponseTransferSpi = new ResponseTransferSpi();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_transfer_spei_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500115");
		procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
				String.valueOf(inRequestTransferSpi.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_origin_account_number", ICTSTypes.SQLVARCHAR,
				inRequestTransferSpi.getOriginAccountNumber());
		procedureRequestAS.addInputParam("@i_destination_account_number", ICTSTypes.SQLVARCHAR,
				inRequestTransferSpi.getDestinationAccountNumber());
		procedureRequestAS.addInputParam("@i_amount", ICTSTypes.SQLMONEY,
				String.valueOf(inRequestTransferSpi.getAmount()));
		procedureRequestAS.addInputParam("@i_bank_id", ICTSTypes.SQLVARCHAR, inRequestTransferSpi.getBankId());
		procedureRequestAS.addInputParam("@i_bank_name", ICTSTypes.SQLVARCHAR, inRequestTransferSpi.getBankName());
		procedureRequestAS.addInputParam("@i_destination_account_owner_name", ICTSTypes.SQLVARCHAR,
				inRequestTransferSpi.getDestinationAccountOwnerName());
		procedureRequestAS.addInputParam("@i_destination_type_account", ICTSTypes.SQLINT4,
				String.valueOf(inRequestTransferSpi.getDestinationTypeAccount()));
		procedureRequestAS.addInputParam("@i_owner_name", ICTSTypes.SQLVARCHAR, inRequestTransferSpi.getOwnerName());
		procedureRequestAS.addInputParam("@i_detail", ICTSTypes.SQLVARCHAR, inRequestTransferSpi.getDescription());
		procedureRequestAS.addInputParam("@i_commission", ICTSTypes.SQLMONEY,
				String.valueOf(inRequestTransferSpi.getCommission()));
		procedureRequestAS.addInputParam("@i_latitude", ICTSTypes.SQLMONEY,
				String.valueOf(inRequestTransferSpi.getLatitude()));
		procedureRequestAS.addInputParam("@i_longitude", ICTSTypes.SQLMONEY,
				String.valueOf(inRequestTransferSpi.getLongitude()));
		procedureRequestAS.addInputParam("@i_reference_number", ICTSTypes.SQLVARCHAR,
				inRequestTransferSpi.getReferenceNumber());

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseTransferSpi returnResponseTransferSpi = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseTransferSpi>() {
						@Override
						public ResponseTransferSpi mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseTransferSpi dto = new ResponseTransferSpi();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outResponseTransferSpi.setSuccess(returnResponseTransferSpi.isSuccess());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseTransferSpi returnResponseTransferSpi = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseTransferSpi>() {
						@Override
						public ResponseTransferSpi mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseTransferSpi dto = new ResponseTransferSpi();

							dto.responseInstance().setCode(resultSetMapper.getInteger(1));
							dto.responseInstance().setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseTransferSpi.setResponse(returnResponseTransferSpi.getResponse());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().size()>2&&response.getResultSets().get(2).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseTransferSpi returnResponseTransferSpi = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseTransferSpi>() {
						@Override
						public ResponseTransferSpi mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseTransferSpi dto = new ResponseTransferSpi();

							dto.setReferenceCode(resultSetMapper.getString(1));
							return dto;
						}
					}, false);

			outResponseTransferSpi.setReferenceCode(returnResponseTransferSpi.getReferenceCode());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().size()>3&&response.getResultSets().get(3).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseTransferSpi returnResponseTransferSpi = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(3), new RowMapper<ResponseTransferSpi>() {
						@Override
						public ResponseTransferSpi mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseTransferSpi dto = new ResponseTransferSpi();

							dto.setTrackingKey(resultSetMapper.getString(1));
							return dto;
						}
					}, false);

			outResponseTransferSpi.setTrackingKey(returnResponseTransferSpi.getTrackingKey());
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: transferSpei");
		// returns data
		return outResponseTransferSpi;
	}
	    /**
	    * Service for transfer to a third party account
	    */
	   @Override
		//Have DTO
		public ResponseTransferThirdPartyAccount transferThirdPartyAccount(RequestTransferThirdPartyAccount inRequestTransferThirdPartyAccount  )throws CTSRestException{
		LOGGER.logDebug("Start service execution: transferThirdPartyAccount");
		ResponseTransferThirdPartyAccount outResponseTransferThirdPartyAccount  = new ResponseTransferThirdPartyAccount();
		    
		//create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_transf_third_account_api");
		
		  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500114");
		procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inRequestTransferThirdPartyAccount.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_cta",ICTSTypes.SQLVARCHAR,inRequestTransferThirdPartyAccount.getOriginAccountNumber());
		procedureRequestAS.addInputParam("@i_cta_des",ICTSTypes.SQLVARCHAR,inRequestTransferThirdPartyAccount.getDestinationNumber());
		procedureRequestAS.addInputParam("@i_val",ICTSTypes.SQLMONEY,String.valueOf(inRequestTransferThirdPartyAccount.getAmount()));
		procedureRequestAS.addInputParam("@i_concepto",ICTSTypes.SQLVARCHAR,inRequestTransferThirdPartyAccount.getDescription());
		procedureRequestAS.addInputParam("@i_comision",ICTSTypes.SQLMONEY,String.valueOf(inRequestTransferThirdPartyAccount.getCommission()));
		procedureRequestAS.addInputParam("@i_latitud",ICTSTypes.SQLMONEY,String.valueOf(inRequestTransferThirdPartyAccount.getLatitude()));
		procedureRequestAS.addInputParam("@i_longitud",ICTSTypes.SQLMONEY,String.valueOf(inRequestTransferThirdPartyAccount.getLongitude()));
		procedureRequestAS.addInputParam("@i_detalle",ICTSTypes.SQLVARCHAR,inRequestTransferThirdPartyAccount.getDetail());
		
		//execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		//throw error
		if(errors!= null && errors.size()> 0){
		LOGGER.logDebug("Procedure execution returns error");
		if ( LOGGER.isDebugEnabled() ) {
		for (int i = 0; i < errors.size(); i++) {
		LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		}
		}
		throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		//Init map returns
		int mapTotal=0;
		int mapBlank=0;
		
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseTransferThirdPartyAccount returnResponseTransferThirdPartyAccount = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseTransferThirdPartyAccount>() { 
		              @Override
		              public ResponseTransferThirdPartyAccount mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseTransferThirdPartyAccount dto = new ResponseTransferThirdPartyAccount();
		              
		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		              return dto;
		              }
		              },false);
		
		              outResponseTransferThirdPartyAccount.setSuccess(returnResponseTransferThirdPartyAccount.isSuccess());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseTransferThirdPartyAccount returnResponseTransferThirdPartyAccount = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseTransferThirdPartyAccount>() { 
		              @Override
		              public ResponseTransferThirdPartyAccount mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseTransferThirdPartyAccount dto = new ResponseTransferThirdPartyAccount();
		              
								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
		              return dto;
		              }
		              },false);
		
		              outResponseTransferThirdPartyAccount.setResponse(returnResponseTransferThirdPartyAccount.getResponse());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		      mapTotal++;
		      if (response.getResultSets()!=null&&response.getResultSets().size()>2&&response.getResultSets().get(2).getData().getRows().size()>0) {	
									//---------NO Array
									ResponseTransferThirdPartyAccount returnResponseTransferThirdPartyAccount = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseTransferThirdPartyAccount>() { 
		              @Override
		              public ResponseTransferThirdPartyAccount mapRow(ResultSetMapper resultSetMapper, int index) {
		              ResponseTransferThirdPartyAccount dto = new ResponseTransferThirdPartyAccount();
		              
		                    dto.setReferenceCode(resultSetMapper.getString(1));
		              return dto;
		              }
		              },false);
		
		              outResponseTransferThirdPartyAccount.setReferenceCode(returnResponseTransferThirdPartyAccount.getReferenceCode());
		                  // break;
		                
		      }else {
		      mapBlank++;
		
		      }
		    
		//End map returns
		if(mapBlank!=0&&mapBlank==mapTotal){
		LOGGER.logDebug("No data found");
		throw new CTSRestException("404",null);
		}
		
		  LOGGER.logDebug("Ends service execution: transferThirdPartyAccount");
		  //returns data
		  return outResponseTransferThirdPartyAccount;
		}
	   

       /**
       * Update Account Beneficiary
       */
	   @Override
		//Have DTO
		public UpdateBeneficiaryResponse updateAccountBeneficiary(UpdateBeneficiaryRequest inUpdateBeneficiaryRequest  )throws CTSRestException{
		  LOGGER.logDebug("Start service execution: updateAccountBeneficiary");
	   UpdateBeneficiaryResponse outUpdateBeneficiaryResponse  = new UpdateBeneficiaryResponse();
	       
	   //create procedure
	   ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_bvirtual..sp_beneficiaries_mant_api");
	   
	     procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500126");
	   procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inUpdateBeneficiaryRequest.getExternalCustomerId()));
	   procedureRequestAS.addInputParam("@i_numero_producto",ICTSTypes.SQLVARCHAR,inUpdateBeneficiaryRequest.getAccount());
	   procedureRequestAS.addInputParam("@i_operacion",ICTSTypes.SQLCHAR,"U");
	   
	   Gson gson = new Gson();
		String JSON = gson.toJson(inUpdateBeneficiaryRequest.getBeneficiaries());
		procedureRequestAS.addInputParam("@i_json_beneficiaries", ICTSTypes.SQLVARCHAR, JSON);

	   //execute procedure
	   ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
	
	   List<MessageBlock> errors = ErrorUtil.getErrors(response);
	   //throw error
	   if(errors!= null && errors.size()> 0){
	   LOGGER.logDebug("Procedure execution returns error");
	   if ( LOGGER.isDebugEnabled() ) {
	   for (int i = 0; i < errors.size(); i++) {
	   LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
	   }
	   }
	   throw new CTSRestException("Procedure Response has errors", null, errors);
	   }
	   LOGGER.logDebug("Procedure ok");
	   //Init map returns
	   int mapTotal=0;
	   int mapBlank=0;
	   
	         mapTotal++;
	         if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									UpdateBeneficiaryResponse returnUpdateBeneficiaryResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<UpdateBeneficiaryResponse>() { 
	                 @Override
	                 public UpdateBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
	                 UpdateBeneficiaryResponse dto = new UpdateBeneficiaryResponse();
	                 
	                       dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
	                 return dto;
	                 }
	                 },false);
	
	                 outUpdateBeneficiaryResponse.setSuccess(returnUpdateBeneficiaryResponse.isSuccess());
	                     // break;
	                   
	         }else {
	         mapBlank++;
	
	         }
	       
	         mapTotal++;
	         if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									UpdateBeneficiaryResponse returnUpdateBeneficiaryResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<UpdateBeneficiaryResponse>() { 
	                 @Override
	                 public UpdateBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
	                 UpdateBeneficiaryResponse dto = new UpdateBeneficiaryResponse();
	                 
								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
	                 return dto;
	                 }
	                 },false);
	
	                 outUpdateBeneficiaryResponse.setResponse(returnUpdateBeneficiaryResponse.getResponse());
	                     // break;
	                   
	         }else {
	         mapBlank++;
	
	         }
	       
	   //End map returns
	   if(mapBlank!=0&&mapBlank==mapTotal){
	   LOGGER.logDebug("No data found");
	   throw new CTSRestException("404",null);
	   }
	   
	     LOGGER.logDebug("Ends service execution: updateAccountBebeficiary");
	     //returns data
	     return outUpdateBeneficiaryResponse;
	   }
	   
		/**
		 * Update Account Status
		 */
		@Override
		// Have DTO
		public ResponseUpdateAccountStatus updateAccountStatus(RequestUpdateAccountStatus inRequestUpdateAccountStatus)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: updateAccountStatus");
			ResponseUpdateAccountStatus outResponseUpdateAccountStatus = new ResponseUpdateAccountStatus();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS(
					"cob_procesador..sp_update_account_status_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500131");
			procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
					String.valueOf(inRequestUpdateAccountStatus.getExternalCustomerId()));
			procedureRequestAS.addInputParam("@i_account_status", ICTSTypes.SQLVARCHAR,
					inRequestUpdateAccountStatus.getAccountStatus());
			procedureRequestAS.addInputParam("@i_account_number", ICTSTypes.SQLVARCHAR,
					inRequestUpdateAccountStatus.getAccountNumber());
			procedureRequestAS.addInputParam("@i_blockingValue",ICTSTypes.SQLMONEY,String.valueOf(inRequestUpdateAccountStatus.getBlockingValue()));
      procedureRequestAS.addInputParam("@i_period",ICTSTypes.SQLINT4,String.valueOf(inRequestUpdateAccountStatus.getPeriod()));

			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseUpdateAccountStatus returnResponseUpdateAccountStatus = MapperResultUtil.mapOneRowToObject(
						response.getResultSets().get(0), new RowMapper<ResponseUpdateAccountStatus>() {
							@Override
							public ResponseUpdateAccountStatus mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseUpdateAccountStatus dto = new ResponseUpdateAccountStatus();

								dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
								return dto;
							}
						}, false);

				outResponseUpdateAccountStatus.setSuccess(returnResponseUpdateAccountStatus.isSuccess());
				// break;

			} else {
				mapBlank++;

			}

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseUpdateAccountStatus returnResponseUpdateAccountStatus = MapperResultUtil.mapOneRowToObject(
						response.getResultSets().get(1), new RowMapper<ResponseUpdateAccountStatus>() {
							@Override
							public ResponseUpdateAccountStatus mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseUpdateAccountStatus dto = new ResponseUpdateAccountStatus();

								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
								return dto;
							}
						}, false);

				outResponseUpdateAccountStatus.setResponse(returnResponseUpdateAccountStatus.getResponse());
				// break;

			} else {
				mapBlank++;

			}

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}

			LOGGER.logDebug("Ends service execution: updateAccountStatus");
			// returns data
			return outResponseUpdateAccountStatus;
		}
		
        /**
        * Update Card Status
        */
			@Override
			//Have DTO
			public ResponseUpdateCardStatus updateCardStatus(RequestUpdateCardStatus inRequestUpdateCardStatus  )throws CTSRestException{
			  LOGGER.logDebug("Start service execution: updateCardStatus");
		    ResponseUpdateCardStatus outResponseUpdateCardStatus  = new ResponseUpdateCardStatus();
		        
		    //create procedure
		    ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_card_status_api");
		    
		      procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500130");
		    procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inRequestUpdateCardStatus.getExternalCustomerId()));
		    procedureRequestAS.addInputParam("@i_card_status",ICTSTypes.SQLVARCHAR,inRequestUpdateCardStatus.getCardStatus());
		    procedureRequestAS.addInputParam("@i_status_reason",ICTSTypes.SQLVARCHAR,inRequestUpdateCardStatus.getStatusReason());
		    procedureRequestAS.addInputParam("@i_account_number",ICTSTypes.SQLVARCHAR,inRequestUpdateCardStatus.getAccountNumber());
		    procedureRequestAS.addInputParam("@i_type_card",ICTSTypes.SQLVARCHAR,inRequestUpdateCardStatus.getTypeCard());
		    procedureRequestAS.addInputParam("@i_mode",ICTSTypes.SQLVARCHAR,inRequestUpdateCardStatus.getMode());
		    procedureRequestAS.addInputParam("@i_card_id",ICTSTypes.SQLVARCHAR,inRequestUpdateCardStatus.getCardId());
		    
		    //execute procedure
		    ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		    List<MessageBlock> errors = ErrorUtil.getErrors(response);
		    //throw error
		    if(errors!= null && errors.size()> 0){
		    LOGGER.logDebug("Procedure execution returns error");
		    if ( LOGGER.isDebugEnabled() ) {
		    for (int i = 0; i < errors.size(); i++) {
		    LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		    }
		    }
		    throw new CTSRestException("Procedure Response has errors", null, errors);
		    }
		    LOGGER.logDebug("Procedure ok");
		    //Init map returns
		    int mapTotal=0;
		    int mapBlank=0;
		    
		          mapTotal++;
		          if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
										//---------NO Array
										ResponseUpdateCardStatus returnResponseUpdateCardStatus = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseUpdateCardStatus>() { 
		                  @Override
		                  public ResponseUpdateCardStatus mapRow(ResultSetMapper resultSetMapper, int index) {
		                  ResponseUpdateCardStatus dto = new ResponseUpdateCardStatus();
		                  
		                        dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
		                  return dto;
		                  }
		                  },false);
		
		                  outResponseUpdateCardStatus.setSuccess(returnResponseUpdateCardStatus.isSuccess());
		                      // break;
		                    
		          }else {
		          mapBlank++;
		
		          }
		        
		          mapTotal++;
		          if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
										//---------NO Array
										ResponseUpdateCardStatus returnResponseUpdateCardStatus = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseUpdateCardStatus>() { 
		                  @Override
		                  public ResponseUpdateCardStatus mapRow(ResultSetMapper resultSetMapper, int index) {
		                  ResponseUpdateCardStatus dto = new ResponseUpdateCardStatus();
		                  
									dto.responseInstance().setCode(resultSetMapper.getInteger(1));
									dto.responseInstance().setMessage(resultSetMapper.getString(2));
		                  return dto;
		                  }
		                  },false);
		
		                  outResponseUpdateCardStatus.setResponse(returnResponseUpdateCardStatus.getResponse());
		                      // break;
		                    
		          }else {
		          mapBlank++;
		
		          }
		          
		          mapTotal++;
		            if (response.getResultSets()!=null&&response.getResultSets().size()>2&&response.getResultSets().get(2).getData().getRows().size()>0 ) {	
										//---------NO Array
										ResponseUpdateCardStatus returnResponseUpdateCardStatus = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseUpdateCardStatus>() { 
		                    @Override
		                    public ResponseUpdateCardStatus mapRow(ResultSetMapper resultSetMapper, int index) {
		                    ResponseUpdateCardStatus dto = new ResponseUpdateCardStatus();
		                    
		                          dto.setCardId(resultSetMapper.getString(1));
		                    return dto;
		                    }
		                    },false);

		                    outResponseUpdateCardStatus.setCardId(returnResponseUpdateCardStatus.getCardId());
		                        // break;
		                      
		            }else {
		            mapBlank++;

		            }
		        
		    //End map returns
		    if(mapBlank!=0&&mapBlank==mapTotal){
		    LOGGER.logDebug("No data found");
		    throw new CTSRestException("404",null);
		    }
		    
		      LOGGER.logDebug("Ends service execution: updateCardStatus");
		      //returns data
		      return outResponseUpdateCardStatus;
		    }
	   
	/**
	 * Validate Identity
	 */
	@Override
	// Have DTO
	public ResponseValidateIdentity validateIdentity(RequestValidateIdentity inRequestValidateIdentity)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: validateIdentity");
		ResponseValidateIdentity outResponseValidateIdentity = new ResponseValidateIdentity();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_validate_identity");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500091");
		procedureRequestAS.addInputParam("@i_type", ICTSTypes.SQLVARCHAR, inRequestValidateIdentity.getType());
		procedureRequestAS.addInputParam("@i_imageAnverso", ICTSTypes.SQLVARCHAR,
				inRequestValidateIdentity.getImageAnverso());
		procedureRequestAS.addInputParam("@i_imageReverso", ICTSTypes.SQLVARCHAR,
				inRequestValidateIdentity.getImageReverso());
		procedureRequestAS.addInputParam("@i_imageDomicile", ICTSTypes.SQLVARCHAR,
				inRequestValidateIdentity.getImageDomicile());
		procedureRequestAS.addOutputParam("@salida", ICTSTypes.SQLVARCHAR, "0");

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateIdentity returnResponseValidateIdentity = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseValidateIdentity>() {
						@Override
						public ResponseValidateIdentity mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseValidateIdentity dto = new ResponseValidateIdentity();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outResponseValidateIdentity.setSuccess(returnResponseValidateIdentity.isSuccess());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			Response returnResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1),
					new RowMapper<Response>() {
						@Override
						public Response mapRow(ResultSetMapper resultSetMapper, int index) {
							Response dto = new Response();

							dto.setCode(resultSetMapper.getInteger(1));
							dto.setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseValidateIdentity.setResponse(returnResponse);
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(2).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateIdentity returnResponseValidateIdentity = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseValidateIdentity>() {
						@Override
						public ResponseValidateIdentity mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseValidateIdentity dto = new ResponseValidateIdentity();

							dto.setVerificationNumber(resultSetMapper.getString(1));
							return dto;
						}
					}, false);

			outResponseValidateIdentity.setVerificationNumber(returnResponseValidateIdentity.getVerificationNumber());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(3).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateIdentity returnResponseValidateIdentity = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(3), new RowMapper<ResponseValidateIdentity>() {
						@Override
						public ResponseValidateIdentity mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseValidateIdentity dto = new ResponseValidateIdentity();

							dto.setEventName(resultSetMapper.getString(1));
							return dto;
						}
					}, false);

			outResponseValidateIdentity.setEventName(returnResponseValidateIdentity.getEventName());
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}
		// outResponseValidateIdentity.setSuccess(getOutValue(String.class, "@salida",
		// response.getParams()));

		LOGGER.logDebug("Ends service execution: validateIdentity");
		// returns data
		return outResponseValidateIdentity;
	}

	protected void setctsRestIntegrationService(ICTSRestIntegrationService ctsRestIntegrationService) {
		this.ctsRestIntegrationService = ctsRestIntegrationService;
	}

	protected void unsetctsRestIntegrationService(ICTSRestIntegrationService ctsRestIntegrationService) {
		this.ctsRestIntegrationService = null;
	}

	@SuppressWarnings("unchecked")
	private <T extends Object> T getOutValue(Class<T> type, String name, List<ProcedureResponseParam> params)
			throws CTSRestException {
		for (ProcedureResponseParam param : params) {
			if (param.getName().equals(name)) {
				if (type.getCanonicalName() == "java.lang.String") {
					return (T) param.getValue();
				}
				return parse(type, param.getValue());
			}
		}
		LOGGER.logError("Output param " + name + " not found");
		throw new CTSRestException("404", null);
	}

	@SuppressWarnings("unchecked")
	private <T extends Object> T parse(Class<T> type, String value) {
		if (value != null && !"null".equals(value)) {
			if (value.trim().length() == 0) {
				if (type.getCanonicalName().equals("java.lang.Character")) {
					Character ch = ' ';
					return (T) ch;
				} else {
					return null;
				}
			} else {
				switch (type.getCanonicalName()) {
				case "java.lang.Byte":
					return (T) new Byte(value);
				case "java.lang.Long":
					return (T) new Long(value);
				case "java.lang.Double":
					return (T) new Double(value);
				case "java.lang.Integer":
					return (T) new Integer(value);
				case "java.util.Calendar":
					return (T) ConverterUtil.stringToCalendar(value);
				case "java.lang.Boolean":
					return (T) new Boolean(value);
				case "java.math.BigDecimal":
					return (T) new BigDecimal(value);
				case "java.lang.Character":
					Character ch = value.substring(0, value.length() - 1).charAt(0);
					return (T) ch;
				default:
					break;
				}
			}
		}
		return null;
	}
	
	/**
	 * Activate Device
	 */
	@Override
	// Have DTO
	public ResponseDeviceActivation activateDevice(RequestDeviceActivation inRequestDeviceActivation)
			throws CTSRestException {
		LOGGER.logDebug("Start service execution: activateDevice");
		ResponseDeviceActivation outResponseDeviceActivation = new ResponseDeviceActivation();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_activate_device_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500116");
		procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
				String.valueOf(inRequestDeviceActivation.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_phone_number", ICTSTypes.SQLVARCHAR,
				inRequestDeviceActivation.getPhoneNumber());
		procedureRequestAS.addInputParam("@i_alias_device", ICTSTypes.SQLVARCHAR,
				inRequestDeviceActivation.getAliasDevice());

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), "SQLCANALES",
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseDeviceActivation returnResponseDeviceActivation = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseDeviceActivation>() {
						@Override
						public ResponseDeviceActivation mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseDeviceActivation dto = new ResponseDeviceActivation();

							dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							return dto;
						}
					}, false);

			outResponseDeviceActivation.setSuccess(returnResponseDeviceActivation.isSuccess());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseDeviceActivation returnResponseDeviceActivation = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseDeviceActivation>() {
						@Override
						public ResponseDeviceActivation mapRow(ResultSetMapper resultSetMapper, int index) {
							ResponseDeviceActivation dto = new ResponseDeviceActivation();

							dto.responseInstance().setCode(resultSetMapper.getInteger(1));
							dto.responseInstance().setMessage(resultSetMapper.getString(2));
							return dto;
						}
					}, false);

			outResponseDeviceActivation.setResponse(returnResponseDeviceActivation.getResponse());
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: activateDevice");
		// returns data
		return outResponseDeviceActivation;
	}
	
	/**
	 * Validate Device Activation
	 */
	@Override
	// Have DTO
	public ResponseValidateDeviceActivation validateDeviceActivation(
			RequestValidateDeviceActivation inRequestValidateDeviceActivation) throws CTSRestException {
		LOGGER.logDebug("Start service execution: validateDeviceActivation");
		ResponseValidateDeviceActivation outResponseValidateDeviceActivation = new ResponseValidateDeviceActivation();

		// create procedure
		ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_val_device_activation_api");

		procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500117");
		procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
				String.valueOf(inRequestValidateDeviceActivation.getExternalCustomerId()));
		procedureRequestAS.addInputParam("@i_phone_number", ICTSTypes.SQLVARCHAR,
				inRequestValidateDeviceActivation.getPhoneNumber());

		// execute procedure
		ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
				procedureRequestAS);

		List<MessageBlock> errors = ErrorUtil.getErrors(response);
		// throw error
		if (errors != null && errors.size() > 0) {
			LOGGER.logDebug("Procedure execution returns error");
			if (LOGGER.isDebugEnabled()) {
				for (int i = 0; i < errors.size(); i++) {
					LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
				}
			}
			throw new CTSRestException("Procedure Response has errors", null, errors);
		}
		LOGGER.logDebug("Procedure ok");
		// Init map returns
		int mapTotal = 0;
		int mapBlank = 0;

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateDeviceActivation returnResponseValidateDeviceActivation = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(0),
							new RowMapper<ResponseValidateDeviceActivation>() {
								@Override
								public ResponseValidateDeviceActivation mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseValidateDeviceActivation dto = new ResponseValidateDeviceActivation();

									dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
									return dto;
								}
							}, false);

			outResponseValidateDeviceActivation.setSuccess(returnResponseValidateDeviceActivation.isSuccess());
			// break;

		} else {
			mapBlank++;

		}

		mapTotal++;
		if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
			// ---------NO Array
			ResponseValidateDeviceActivation returnResponseValidateDeviceActivation = MapperResultUtil
					.mapOneRowToObject(response.getResultSets().get(1),
							new RowMapper<ResponseValidateDeviceActivation>() {
								@Override
								public ResponseValidateDeviceActivation mapRow(ResultSetMapper resultSetMapper,
										int index) {
									ResponseValidateDeviceActivation dto = new ResponseValidateDeviceActivation();

									dto.responseInstance().setCode(resultSetMapper.getInteger(1));
									dto.responseInstance().setMessage(resultSetMapper.getString(2));
									return dto;
								}
							}, false);

			outResponseValidateDeviceActivation.setResponse(returnResponseValidateDeviceActivation.getResponse());
			// break;

		} else {
			mapBlank++;

		}

		// End map returns
		if (mapBlank != 0 && mapBlank == mapTotal) {
			LOGGER.logDebug("No data found");
			throw new CTSRestException("404", null);
		}

		LOGGER.logDebug("Ends service execution: validateDeviceActivation");
		// returns data
		return outResponseValidateDeviceActivation;
	}

		/**
	     * Customer Card Application API
	     */
	    @Override
			// Return Dto
			public  CardApplicationResponse  customerCardApplication(CardApplicationRequest inCardApplicationRequest  )throws CTSRestException{
		 LOGGER.logDebug("Start service execution: customerCardApplication");
		 CardApplicationResponse outSingleCardApplicationResponse  = new CardApplicationResponse();
		     
		 //create procedure
		 ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_card_application_api");
		 
		   procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500112");
		 procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inCardApplicationRequest.getExternalCustomerId()));
		 procedureRequestAS.addInputParam("@i_accountNumber",ICTSTypes.SQLVARCHAR,inCardApplicationRequest.getAccountNumber());
		 procedureRequestAS.addInputParam("@i_street",ICTSTypes.SQLVARCHAR,inCardApplicationRequest.getStreet());
		 procedureRequestAS.addInputParam("@i_complement",ICTSTypes.SQLVARCHAR,inCardApplicationRequest.getComplement());
		 procedureRequestAS.addInputParam("@i_number",ICTSTypes.SQLVARCHAR,inCardApplicationRequest.getNumber());
		 procedureRequestAS.addInputParam("@i_city",ICTSTypes.SQLVARCHAR,inCardApplicationRequest.getCity());
		 procedureRequestAS.addInputParam("@i_administrative_area_code",ICTSTypes.SQLVARCHAR,inCardApplicationRequest.getAdministrativeAreaCode());
		 procedureRequestAS.addInputParam("@i_country_code",ICTSTypes.SQLVARCHAR,inCardApplicationRequest.getCountryCode());
		 procedureRequestAS.addInputParam("@i_postal_code",ICTSTypes.SQLVARCHAR,inCardApplicationRequest.getPostalCode());
		 
		 //execute procedure
		 ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
		
		 List<MessageBlock> errors = ErrorUtil.getErrors(response);
		 //throw error
		 if(errors!= null && errors.size()> 0){
		 LOGGER.logDebug("Procedure execution returns error");
		 if ( LOGGER.isDebugEnabled() ) {
		 for (int i = 0; i < errors.size(); i++) {
		 LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
		 }
		 }
		 throw new CTSRestException("Procedure Response has errors", null, errors);
		 }
		 LOGGER.logDebug("Procedure ok");
		 //Init map returns
		 int mapTotal=0;
		 int mapBlank=0;
		 
		       mapTotal++;
		       if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
		               //----------------Assume Array return
		               CardApplicationResponse returnCardApplicationResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<CardApplicationResponse>() { 
		               @Override
		               public CardApplicationResponse mapRow(ResultSetMapper resultSetMapper, int index) {
		               CardApplicationResponse dto = new CardApplicationResponse();
		               LOGGER.logInfo("result xcxc" + resultSetMapper.toString());
		                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							dto.responseInstance().setCode(resultSetMapper.getInteger(2));
							dto.responseInstance().setMessage(resultSetMapper.getString(3));
		               return dto;
		               }
		               },false);
		               outSingleCardApplicationResponse=returnCardApplicationResponse ;
		               
		       }else {
		       mapBlank++;
		
		       }
		     
		 //End map returns
		 if(mapBlank!=0&&mapBlank==mapTotal){
		 LOGGER.logDebug("No data found");
		 throw new CTSRestException("404",null);
		 }
		 
		   LOGGER.logDebug("Ends service execution: customerCardApplication");
		   //returns data
		   return outSingleCardApplicationResponse;
		 }

	  /**
          * Service to apply debit account
          */
         @Override
			// Return DTO
			public  DebitAccountResponse  debitOperation(DebitAccountRequest inDebitAccountRequest  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: debitOperation");
      DebitAccountResponse outSingleDebitAccountResponse  = new DebitAccountResponse();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_debit_operation_api");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500118");
      procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inDebitAccountRequest.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_accountNumber",ICTSTypes.SQLVARCHAR,inDebitAccountRequest.getAccountNumber());
      procedureRequestAS.addInputParam("@i_amount",ICTSTypes.SQLMONEY,String.valueOf(inDebitAccountRequest.getAmount()));
      procedureRequestAS.addInputParam("@i_commission",ICTSTypes.SQLMONEY,String.valueOf(inDebitAccountRequest.getCommission()));
      procedureRequestAS.addInputParam("@i_latitude",ICTSTypes.SQLFLT8i,String.valueOf(inDebitAccountRequest.getLatitude()));
      procedureRequestAS.addInputParam("@i_longitude",ICTSTypes.SQLFLT8i,String.valueOf(inDebitAccountRequest.getLongitude()));
      procedureRequestAS.addInputParam("@i_referenceNumber",ICTSTypes.SQLVARCHAR,inDebitAccountRequest.getReferenceNumber());
      procedureRequestAS.addInputParam("@i_debitConcept",ICTSTypes.SQLVARCHAR,inDebitAccountRequest.getDebitConcept());
      procedureRequestAS.addInputParam("@i_originCode",ICTSTypes.SQLINT4,String.valueOf(inDebitAccountRequest.getOriginCode()));
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    DebitAccountResponse returnDebitAccountResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<DebitAccountResponse>() { 
                    @Override
                    public DebitAccountResponse mapRow(ResultSetMapper resultSetMapper, int index) {
                    DebitAccountResponse dto = new DebitAccountResponse();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                          dto.setReferenceCode(resultSetMapper.getString(4));
							dto.responseInstance().setCode(resultSetMapper.getInteger(2));
							dto.responseInstance().setMessage(resultSetMapper.getString(3));
                    return dto;
                    }
                    },false);
                    outSingleDebitAccountResponse=returnDebitAccountResponse ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: debitOperation");
        //returns data
        return outSingleDebitAccountResponse;
      }
         

         
         
         
         /**
          * Get All Customer Questions
          */
         @Override
			//Have DTO
			public ResponseAllCustomerQuestions getAllCustomerQuestions(RequestAllCustomerQuestions inRequestAllCustomerQuestions  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: getAllCustomerQuestions");
      ResponseAllCustomerQuestions outResponseAllCustomerQuestions  = new ResponseAllCustomerQuestions();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_bvirtual..sp_get_all_quest_api");
      
      procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500122");
      procedureRequestAS.addInputParam("@i_customer",ICTSTypes.SQLINT4,String.valueOf(inRequestAllCustomerQuestions.getExternalCustomerId()));
      procedureRequestAS.addOutputParam("@o_success",ICTSTypes.SQLBIT,"0");
      procedureRequestAS.addOutputParam("@o_code",ICTSTypes.SQLINT4,"1");
      procedureRequestAS.addOutputParam("@o_message",ICTSTypes.SQLVARCHAR,"X");
      
      //execute procedure
      ProcedureResponseAS resp = ctsRestIntegrationService.execute(SessionManager.getSessionId(), "local",procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(resp);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (resp.getResultSets()!=null && resp.getResultSets().size()>0  &&resp.getResultSets().get(0).getData().getRows().size()>0) {	
								//---------NO Array
								CstmrQuestions [] returnCstmrQuestions = MapperResultUtil.mapToArray(resp.getResultSets().get(0), new RowMapper<CstmrQuestions>() { 
                    @Override
                    public CstmrQuestions mapRow(ResultSetMapper resultSetMapper, int index) {
                    CstmrQuestions dto = new CstmrQuestions();
                    
                          dto.setId(resultSetMapper.getInteger(1));
                          dto.setDescription(resultSetMapper.getString(2));
                    return dto;
                    }
                    },false);

                    outResponseAllCustomerQuestions.setCstmrQuestionsList(returnCstmrQuestions);
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (resp.getResultSets()!=null&& resp.getResultSets().size()>1 &&resp.getResultSets().get(1).getData().getRows().size()>0) {	
								//---------NO Array
								CstmrAnswers [] returnCstmrAnswers = MapperResultUtil.mapToArray(resp.getResultSets().get(1), new RowMapper<CstmrAnswers>() { 
                    @Override
                    public CstmrAnswers mapRow(ResultSetMapper resultSetMapper, int index) {
                    CstmrAnswers dto = new CstmrAnswers();
                    
                          dto.setQuestionId(resultSetMapper.getInteger(1));
                          dto.setResponseId(resultSetMapper.getInteger(2));
                          dto.setDescription(resultSetMapper.getString(3));
                    return dto;
                    }
                    },false);

                    outResponseAllCustomerQuestions.setCstmrAnswersList(returnCstmrAnswers);
                        // break;
                      
            }else {
            mapBlank++;

            }
          

      
      Response response=new Response();
      response.setCode(getOutValue(Integer.class, "@o_code", resp.getParams()));
      response.setMessage(getOutValue(String.class, "@o_message", resp.getParams())); 
      outResponseAllCustomerQuestions.setResponse(response);

     	if (response != null && response.getCode() == 0) {
     		outResponseAllCustomerQuestions.setSuccess(true);
     	} else
     		outResponseAllCustomerQuestions.setSuccess(false);   
        LOGGER.logDebug("Ends service execution: getAllCustomerQuestions");
        //returns data
        return outResponseAllCustomerQuestions;
      }    
         
		/**
		 * Define Security Question and Answer
		 */
		@Override
		// Have DTO
		public ResponseDefineSecurityQA defineSecurityQA(RequestDefineSecurityQA inRequestDefineSecurityQA)
				throws CTSRestException {
			LOGGER.logDebug("Start service execution: defineSecurityQA");
			ResponseDefineSecurityQA outResponseDefineSecurityQA = new ResponseDefineSecurityQA();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_define_security_qa_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500123");
			procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
					String.valueOf(inRequestDefineSecurityQA.getExternalCustomerId()));
			procedureRequestAS.addInputParam("@i_question_1_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestDefineSecurityQA.getCstmrAnswer1().getQuestionId()));
			procedureRequestAS.addInputParam("@i_answer_1_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestDefineSecurityQA.getCstmrAnswer1().getResponseId()));
			procedureRequestAS.addInputParam("@i_question_2_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestDefineSecurityQA.getCstmrAnswer2().getQuestionId()));
			procedureRequestAS.addInputParam("@i_answer_2_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestDefineSecurityQA.getCstmrAnswer2().getResponseId()));
			procedureRequestAS.addInputParam("@i_question_desc", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestDefineSecurityQA.getCstmrAnswer3().getQuestionDescription()));
			procedureRequestAS.addInputParam("@i_answer_desc", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestDefineSecurityQA.getCstmrAnswer3().getResponseDescription()));
			

			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseDefineSecurityQA returnResponseDefineSecurityQA = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseDefineSecurityQA>() {
							@Override
							public ResponseDefineSecurityQA mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseDefineSecurityQA dto = new ResponseDefineSecurityQA();

								dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
								return dto;
							}
						}, false);

				outResponseDefineSecurityQA.setSuccess(returnResponseDefineSecurityQA.isSuccess());
				// break;

			} else {
				mapBlank++;

			}

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseDefineSecurityQA returnResponseDefineSecurityQA = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseDefineSecurityQA>() {
							@Override
							public ResponseDefineSecurityQA mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseDefineSecurityQA dto = new ResponseDefineSecurityQA();

								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
								return dto;
							}
						}, false);

				outResponseDefineSecurityQA.setResponse(returnResponseDefineSecurityQA.getResponse());
				// break;

			} else {
				mapBlank++;

			}
			
			mapTotal++;
			if (response.getResultSets()!=null&&response.getResultSets().size()>2&&response.getResultSets().get(2).getData().getRows().size()>0) {
				// ---------NO Array
				ResponseDefineSecurityQA returnResponseDefineSecurityQA = MapperResultUtil
						.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseDefineSecurityQA>() {
							@Override
							public ResponseDefineSecurityQA mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseDefineSecurityQA dto = new ResponseDefineSecurityQA();

								dto.setCustomQuestionId(resultSetMapper.getInteger(1));
								return dto;
							}
						}, false);

				outResponseDefineSecurityQA.setCustomQuestionId(returnResponseDefineSecurityQA.getCustomQuestionId());
				// break;

			} else {
				mapBlank++;

			}

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}

			LOGGER.logDebug("Ends service execution: defineSecurityQA");
			// returns data
			return outResponseDefineSecurityQA;
		}
		
		/**
		 * Validate All Security Questions and Answers
		 */
		@Override
		// Have DTO
		public ResponseValidateAllSecurityQA validateAllSecurityQA(
				RequestValidateAllSecurityQA inRequestValidateAllSecurityQA) throws CTSRestException {
			LOGGER.logDebug("Start service execution: validateAllSecurityQA");
			ResponseValidateAllSecurityQA outResponseValidateAllSecurityQA = new ResponseValidateAllSecurityQA();

			// create procedure
			ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS(
					"cob_procesador..sp_val_all_security_qa_api");

			procedureRequestAS.addInputParam("@t_trn", ICTSTypes.SQLINT4, "18500124");
			procedureRequestAS.addInputParam("@i_external_customer_id", ICTSTypes.SQLINT4,
					String.valueOf(inRequestValidateAllSecurityQA.getExternalCustomerId()));
			procedureRequestAS.addInputParam("@i_question_1_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestValidateAllSecurityQA.getCstmrVal1().getQuestionId()));
			procedureRequestAS.addInputParam("@i_answer_1_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestValidateAllSecurityQA.getCstmrVal1().getResponseId()));
			procedureRequestAS.addInputParam("@i_question_2_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestValidateAllSecurityQA.getCstmrVal2().getQuestionId()));
			procedureRequestAS.addInputParam("@i_answer_2_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestValidateAllSecurityQA.getCstmrVal2().getResponseId()));
			procedureRequestAS.addInputParam("@i_question_3_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestValidateAllSecurityQA.getCstmrVal3().getCustomQuestionId()));
			procedureRequestAS.addInputParam("@i_answer_3_id", ICTSTypes.SQLVARCHAR,
					String.valueOf(inRequestValidateAllSecurityQA.getCstmrVal3().getResponseDescription()));

			// execute procedure
			ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,
					procedureRequestAS);

			List<MessageBlock> errors = ErrorUtil.getErrors(response);
			// throw error
			if (errors != null && errors.size() > 0) {
				LOGGER.logDebug("Procedure execution returns error");
				if (LOGGER.isDebugEnabled()) {
					for (int i = 0; i < errors.size(); i++) {
						LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
					}
				}
				throw new CTSRestException("Procedure Response has errors", null, errors);
			}
			LOGGER.logDebug("Procedure ok");
			// Init map returns
			int mapTotal = 0;
			int mapBlank = 0;

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(0).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseValidateAllSecurityQA returnResponseValidateAllSecurityQA = MapperResultUtil.mapOneRowToObject(
						response.getResultSets().get(0), new RowMapper<ResponseValidateAllSecurityQA>() {
							@Override
							public ResponseValidateAllSecurityQA mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseValidateAllSecurityQA dto = new ResponseValidateAllSecurityQA();

								dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
								return dto;
							}
						}, false);

				outResponseValidateAllSecurityQA.setSuccess(returnResponseValidateAllSecurityQA.isSuccess());
				// break;

			} else {
				mapBlank++;

			}

			mapTotal++;
			if (response.getResultSets() != null && response.getResultSets().get(1).getData().getRows().size() > 0) {
				// ---------NO Array
				ResponseValidateAllSecurityQA returnResponseValidateAllSecurityQA = MapperResultUtil.mapOneRowToObject(
						response.getResultSets().get(1), new RowMapper<ResponseValidateAllSecurityQA>() {
							@Override
							public ResponseValidateAllSecurityQA mapRow(ResultSetMapper resultSetMapper, int index) {
								ResponseValidateAllSecurityQA dto = new ResponseValidateAllSecurityQA();

								dto.responseInstance().setCode(resultSetMapper.getInteger(1));
								dto.responseInstance().setMessage(resultSetMapper.getString(2));
								return dto;
							}
						}, false);

				outResponseValidateAllSecurityQA.setResponse(returnResponseValidateAllSecurityQA.getResponse());
				// break;

			} else {
				mapBlank++;

			}

			// End map returns
			if (mapBlank != 0 && mapBlank == mapTotal) {
				LOGGER.logDebug("No data found");
				throw new CTSRestException("404", null);
			}

			LOGGER.logDebug("Ends service execution: validateAllSecurityQA");
			// returns data
			return outResponseValidateAllSecurityQA;
		}
              

	  /**
          * Valdate token transaction factor API
          */
         @Override
			// Return DTO
			public  ValidateTokenResponse validateTransactionFactor(ValidateTokenRequest inValidateTokenRequest  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: validateTransactionFactor");
      ValidateTokenResponse outSingleValidateTokenResponse  = new ValidateTokenResponse();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_validate_otp");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500120");
      procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inValidateTokenRequest.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_token",ICTSTypes.SQLVARCHAR,inValidateTokenRequest.getToken());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    ValidateTokenResponse returnValidateTokenResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ValidateTokenResponse>() { 
                    @Override
                    public ValidateTokenResponse mapRow(ResultSetMapper resultSetMapper, int index) {
                    ValidateTokenResponse dto = new ValidateTokenResponse();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							dto.responseInstance().setCode(resultSetMapper.getInteger(2));
							dto.responseInstance().setMessage(resultSetMapper.getString(3));
                    return dto;
                    }
                    },false);
                    outSingleValidateTokenResponse=returnValidateTokenResponse ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: validateTransactionFactor");
        //returns data
        return outSingleValidateTokenResponse;
      }

	  /**
          * Service to Update Credentials
          */
         @Override
			// Return Dto
			public  ResponseUpdateCredentials  updateCredentials(RequestUpdateCredentials inRequestUpdateCredentials  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: updateCredentials");
      ResponseUpdateCredentials outSingleResponseUpdateCredentials  = new ResponseUpdateCredentials();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_updateCredentials");
      
      procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500125");
      procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inRequestUpdateCredentials.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_userName",ICTSTypes.SQLVARCHAR,inRequestUpdateCredentials.getUserName());
      procedureRequestAS.addInputParam("@i_password",ICTSTypes.SQLVARCHAR,inRequestUpdateCredentials.getPassword());
	  procedureRequestAS.addInputParam("@i_oldPassword",ICTSTypes.SQLVARCHAR,inRequestUpdateCredentials.getOldPassword());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    ResponseUpdateCredentials returnResponseUpdateCredentials = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseUpdateCredentials>() { 
                    @Override
                    public ResponseUpdateCredentials mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseUpdateCredentials dto = new ResponseUpdateCredentials();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							dto.responseInstance().setCode(resultSetMapper.getInteger(2));
							dto.responseInstance().setMessage(resultSetMapper.getString(3));
                    return dto;
                    }
                    },false);
                    outSingleResponseUpdateCredentials=returnResponseUpdateCredentials ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: updateCredentials");
        //returns data
        return outSingleResponseUpdateCredentials;
      }

	  /**
          * Authorize Reversal Dock
          */
         @Override
			// Return DTO
			public  ResponseAuthorizeReversalDock  authorizeReversalDock(String legacyid,String clientid,String uuid,String xapigwapiid,RequestAuthorizeReversalDock inRequestAuthorizeReversalDock  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: authorizeReversalDock");
      ResponseAuthorizeReversalDock outSingleResponseAuthorizeReversalDock  = new ResponseAuthorizeReversalDock();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_auth_reversal_dock_api");
	  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500139");
      procedureRequestAS.addInputParam("@i_account_id",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getAccount_id());
      procedureRequestAS.addInputParam("@i_person_id",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getPerson_id());
      procedureRequestAS.addInputParam("@i_card_id",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getCard_id());
      procedureRequestAS.addInputParam("@i_product_id",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getProduct_id());
      procedureRequestAS.addInputParam("@i_product_status",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getProduct_status());
      procedureRequestAS.addInputParam("@i_bank_branch_number",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getBank_branch_number());
      procedureRequestAS.addInputParam("@i_bank_account_number",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getBank_account_number());
      procedureRequestAS.addInputParam("@i_transmission_date_time",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getTransmission_date_time_gmt());
      procedureRequestAS.addInputParam("@i_terminal_date",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getTerminal_date());
      procedureRequestAS.addInputParam("@i_terminal_time",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getTerminal_time());
      procedureRequestAS.addInputParam("@i_mti",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getMti());
      procedureRequestAS.addInputParam("@i_processing_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getProcessing().getType());
      procedureRequestAS.addInputParam("@i_processing_origin_account_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getProcessing().getOrigin_account_type());
      procedureRequestAS.addInputParam("@i_processing_destiny_account_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getProcessing().getDestiny_account_type());
      procedureRequestAS.addInputParam("@i_processing_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getProcessing().getCode());
      procedureRequestAS.addInputParam("@i_nsu",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getNsu());
      procedureRequestAS.addInputParam("@i_authorization_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getAuthorization_code());
      procedureRequestAS.addInputParam("@i_card_number",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getCard_number());
      procedureRequestAS.addInputParam("@i_card_expiration_date",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getCard_expiration_date());
      procedureRequestAS.addInputParam("@i_transaction_origin",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getTransaction_origin());
      procedureRequestAS.addInputParam("@i_installments",ICTSTypes.SQLINT4,String.valueOf(inRequestAuthorizeReversalDock.getInstallments()));
      procedureRequestAS.addInputParam("@i_installment_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getInstallment_type());
      procedureRequestAS.addInputParam("@i_card_entry_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getCard_entry().getCode());
      procedureRequestAS.addInputParam("@i_card_entry_pin",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getCard_entry().getPin());
      procedureRequestAS.addInputParam("@i_card_entry_mode",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getCard_entry().getMode());
      procedureRequestAS.addInputParam("@i_mechant_category_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getMerchant_category_code());
      procedureRequestAS.addInputParam("@i_values_updated_transaction_value",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getUpdated_transaction_value());
      procedureRequestAS.addInputParam("@i_values_source_currency_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getSource_currency_code());
      procedureRequestAS.addInputParam("@i_values_settlement_currency_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getSettlement_currency_code());
      procedureRequestAS.addInputParam("@i_values_billing_currency_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getBilling_currency_code());
      procedureRequestAS.addInputParam("@i_values_source_value",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getSource_value());
      procedureRequestAS.addInputParam("@i_values_settlement_value",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getSettlement_value());
      procedureRequestAS.addInputParam("@i_values_billing_value",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getBilling_value());
      procedureRequestAS.addInputParam("@i_values_billing_conversion_rate",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getBilling_conversion_rate());
      procedureRequestAS.addInputParam("@i_values_cash_back_value",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getCash_back_value());
      procedureRequestAS.addInputParam("@i_values_credit__line_usage_fee",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getValues().getCredit_line_usage_fee());
      procedureRequestAS.addInputParam("@i_establishment",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getEstablishment());
      procedureRequestAS.addInputParam("@i_terminal_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getTerminal_code());
      procedureRequestAS.addInputParam("@i_establishment_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getEstablishment_code());
      procedureRequestAS.addInputParam("@i_retrieval_reference_number",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getRetrieval_reference_number());
      procedureRequestAS.addInputParam("@i_brand_response_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getBrand_response_code());
      procedureRequestAS.addInputParam("@i_advice_reason",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getAdvice_reason());
      procedureRequestAS.addInputParam("@i_advice_reason_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getAdvice_reason_code());
      procedureRequestAS.addInputParam("@i_pos_postal_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getPos_postal_code());
      procedureRequestAS.addInputParam("@i_acquirer_country_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getAcquirer_country_code());
      procedureRequestAS.addInputParam("@i_preauthorization_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getPreauthorization().getType());
      procedureRequestAS.addInputParam("@i_preauthorization_initial_transaction_uuid",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getPreauthorization().getInitial_transaction_uuid());
      procedureRequestAS.addInputParam("@i_preauthorization_life_cycle",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getPreauthorization().getLife_cycle());
      procedureRequestAS.addInputParam("@i_token_data_token",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getToken_data().getToken());
      procedureRequestAS.addInputParam("@i_token_data_requestor_id_token",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getToken_data().getRequestor_id_token());
      procedureRequestAS.addInputParam("@i_token_data_expiration_date",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getToken_data().getExpiration_date());
      procedureRequestAS.addInputParam("@i_token_data_status",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getToken_data().getStatus());
      procedureRequestAS.addInputParam("@i_funds_transfer_type",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getFunds_transfer().getType());
      procedureRequestAS.addInputParam("@i_transaction_indicators_card_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isCard_present()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_cardholder_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isCardholder_present()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_password_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isPassword_present()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_cvv1_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isCvv1_present()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_ccv2_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isCvv2_present()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_ccv3_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isCvv3_present()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_token_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isToken_present()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_is_3ds_present",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isIs_3ds_present()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_is_3ds_valid",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isIs_3ds_valid()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_recurring",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isRecurring()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_allows_partial_approval",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isAllows_partial_approval()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_pin_validated_offline",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isPin_validated_offline()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_partially_reversed",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isPartially_reversed()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_preauthorization",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isPreauthorization()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_is_crossborder",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isIs_crossborder()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_is_dcc",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isIs_dcc()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_only_supports_purchase",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isOnly_supports_purchase()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_is_international",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isIs_international()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_is_funds_transfer",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isIs_funds_transfer()));
      procedureRequestAS.addInputParam("@i_transaction_indicators_is_automated_fuel_dispenser",ICTSTypes.SQLBIT,String.valueOf(inRequestAuthorizeReversalDock.getTransaction_indicators().isIs_automated_fuel_dispenser()));
      procedureRequestAS.addInputParam("@i_original_transaction_data_transaction_uuid",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getOriginal_transaction_data().getTransaction_uuid());
      procedureRequestAS.addInputParam("@i_original_transaction_data_nsu",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getOriginal_transaction_data().getNsu());
      procedureRequestAS.addInputParam("@i_original_transaction_data_mti",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getOriginal_transaction_data().getMti());
      procedureRequestAS.addInputParam("@i_original_transaction_data_transmission_date_time_gmt",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getOriginal_transaction_data().getTransmission_date_time_gmt());
      procedureRequestAS.addInputParam("@i_original_transaction_data_institution_code",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getOriginal_transaction_data().getInstitution_code());
      procedureRequestAS.addInputParam("@i_original_transaction_data_institutiion_name",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getOriginal_transaction_data().getInstitution_name());
      procedureRequestAS.addInputParam("@i_original_transaction_data_accounting_date",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getOriginal_transaction_data().getAccounting_date());
      procedureRequestAS.addInputParam("@i_original_transaction_data_retrieval_reference_number",ICTSTypes.SQLVARCHAR,inRequestAuthorizeReversalDock.getOriginal_transaction_data().getRetrieval_reference_number());
      procedureRequestAS.addInputParam("@i_legacy-id",ICTSTypes.SQLVARCHAR,legacyid);
      procedureRequestAS.addInputParam("@i_client-id",ICTSTypes.SQLVARCHAR,clientid);
      procedureRequestAS.addInputParam("@i_uuid",ICTSTypes.SQLVARCHAR,uuid);
      procedureRequestAS.addInputParam("@i_x-apigw-api-id",ICTSTypes.SQLVARCHAR,xapigwapiid);

	  Gson gson = new Gson();
	  String jsonReq = gson.toJson(inRequestAuthorizeReversalDock);
	  procedureRequestAS.addInputParam("@i_json_req", ICTSTypes.SQLVARCHAR, jsonReq);
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    ResponseAuthorizeReversalDock returnResponseAuthorizeReversalDock = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseAuthorizeReversalDock>() { 
                    @Override
                    public ResponseAuthorizeReversalDock mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseAuthorizeReversalDock dto = new ResponseAuthorizeReversalDock();
                    
                          dto.setResponse(resultSetMapper.getString(1));
                          dto.setReason(resultSetMapper.getString(2));
                    return dto;
                    }
                    },false);
                    outSingleResponseAuthorizeReversalDock=returnResponseAuthorizeReversalDock ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: authorizeReversalDock");
        //returns data
        return outSingleResponseAuthorizeReversalDock;
      }
    
}
