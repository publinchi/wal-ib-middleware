
    /************************************************************/
    /*                     IMPORTANTE                           */
    /*   Esta aplicacion es parte de los  paquetes bancarios    */
    /*   propiedad de COBISCORP.                                */
    /*   Su uso no autorizado queda  expresamente  prohibido    */
    /*   asi como cualquier alteracion o agregado hecho  por    */
    /*   alguno de sus usuarios sin el debido consentimiento    */
    /*   por escrito de COBISCORP.                              */
    /*   Este programa esta protegido por la ley de derechos    */
    /*   de autor y por las y por las convenciones              */
    /*   internacionales de  propiedad intelectual. Su uso no   */
    /*   autorizado dara  derecho a  COBISCORP para obtener     */
    /*   ordenes de  secuestro o retencion y  para perseguir    */
    /*   penalmente a los autores de cualquier infraccion.      */
    /************************************************************/
    /*   This code was generated by CEN-SG.                     */
    /*   Changes to this file may cause incorrect behavior      */
    /*   and will be lost if the code is regenerated.           */
    /************************************************************/
    
    package  cobiscorp.ecobis.servicioclientes.service.rest;
    
    import com.cobiscorp.cobis.cts.rest.client.api.exception.CTSRestException;
    
    import cobiscorp.ecobis.servicioclientes.service.IObtenerClientesService;
    import cobiscorp.ecobis.clientesdto.dto.ClientesRequest;
    import cobiscorp.ecobis.clientesdto.dto.ClientesResponse;
    import cobiscorp.ecobis.clientesdto.dto.Message;
    import cobiscorp.ecobis.clientesdto.dto.DatosClientes;
    
    import org.apache.felix.scr.annotations.*;
    import com.cobiscorp.cobis.commons.log.ILogger;
    import com.cobiscorp.cobis.commons.log.LogFactory;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Null;
    import javax.ws.rs.*;
    import javax.ws.rs.core.Response;
    import java.util.ArrayList;
    import java.util.List;
    import java.io.PrintWriter;
    import java.io.StringWriter;
    @Path("/cobis/api/clientes/ente")
    @Component
    @Service({ObtenerClientesRest.class})
    public class ObtenerClientesRest {

    @Reference(name = "iObtenerClientesService", referenceInterface = IObtenerClientesService.class,
    bind = "setiObtenerClientesService", unbind = "unsetiObtenerClientesService", cardinality = ReferenceCardinality.MANDATORY_UNARY,
    policy = ReferencePolicy.DYNAMIC)
    IObtenerClientesService iObtenerClientesService;
    private static final ILogger LOGGER = LogFactory.getLogger(ObtenerClientesRest.class);
    protected void setiObtenerClientesService(IObtenerClientesService iObtenerClientesService){
    this.iObtenerClientesService = iObtenerClientesService;
    }

    protected void unsetiObtenerClientesService(IObtenerClientesService iObtenerClientesService){
    this.iObtenerClientesService = null;
    }
    @POST
      @Path("/Lista/Clientes")
      @Consumes({"application/json"})
      @Produces({"application/json"})
       public Response  obtenerClientesCobis(ClientesRequest inClientesRequest ){
	  LOGGER.logDebug("Start service execution REST: obtenerClientesCobis");
      ClientesResponse outClientesResponse  = new ClientesResponse();
          
      if(!validateMandatory(new Data("limite", inClientesRequest.getLimite()))) {
        LOGGER.logDebug("400 is returned - Required fields are missing");
        return Response.status(400).entity("El mensaje de solicitud no se encuentra debidamente formateado").build();
      }
	    
      try {
      outClientesResponse=iObtenerClientesService.obtenerClientesCobis( inClientesRequest );
      } catch (CTSRestException e) {
      LOGGER.logError("CTSRestException",e);
      if ("404".equals(e.getMessage())) {
      LOGGER.logDebug("404 is returned - No data found");
      return Response.status(404).entity("No data found").build();
      }

      LOGGER.logDebug("409 is returned - The stored procedure raise an error");
      return Response.status(409).entity(e.getMessageBlockList()).build();
      } catch (Exception e){
      LOGGER.logDebug("500 is returned - Code exception");
      LOGGER.logError("Exception",e);
      return Response.status(500).entity(e.getMessage()).build();
      }
      
          LOGGER.logDebug("Ends service execution REST: obtenerClientesCobis");
          return Response.ok(outClientesResponse).build();
        
      }
    
    private class Data {
      private String name;
      private Object value;
      public Data(String name, Object value) {
        super();
        this.name = name;
        this.value = value;
      }
      public String getName() {
        return name;
      }
      public Object getValue() {
        return value;
      }
    }

    private boolean validateMandatory(Data... args) {
      boolean res = true;
      for (Data arg : args) {
        if ( arg.getValue() == null ) {
          LOGGER.logError("Attribute " + arg.getName() + " is null");
          res = false;
        }
      }
      return res;
    }
    
    }
  