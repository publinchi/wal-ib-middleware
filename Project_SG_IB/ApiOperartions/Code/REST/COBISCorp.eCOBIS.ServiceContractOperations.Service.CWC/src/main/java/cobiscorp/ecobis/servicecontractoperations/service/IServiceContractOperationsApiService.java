
/************************************************************/
/*                     IMPORTANTE                           */
/*   Esta aplicacion es parte de los  paquetes bancarios    */
/*   propiedad de COBISCORP.                                */
/*   Su uso no autorizado queda  expresamente  prohibido    */
/*   asi como cualquier alteracion o agregado hecho  por    */
/*   alguno de sus usuarios sin el debido consentimiento    */
/*   por escrito de COBISCORP.                              */
/*   Este programa esta protegido por la ley de derechos    */
/*   de autor y por las y por las convenciones              */
/*   internacionales de  propiedad intelectual. Su uso no   */
/*   autorizado dara  derecho a  COBISCORP para obtener     */
/*   ordenes de  secuestro o retencion y  para perseguir    */
/*   penalmente a los autores de cualquier infraccion.      */
/************************************************************/
/*   This code was generated by CEN-SG.                     */
/*   Changes to this file may cause incorrect behavior      */
/*   and will be lost if the code is regenerated.           */
/************************************************************/

package cobiscorp.ecobis.servicecontractoperations.service;

import cobiscorp.ecobis.datacontractoperations.dto.RequestAffiliateCustomer;
import cobiscorp.ecobis.datacontractoperations.dto.RequestAllCustomerQuestions;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseAffiliateCustomer;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseAllCustomerQuestions;
import cobiscorp.ecobis.datacontractoperations.dto.CreateCustomerRequest;
import cobiscorp.ecobis.datacontractoperations.dto.CreateCustomerResponse;
import cobiscorp.ecobis.datacontractoperations.dto.Message;
import cobiscorp.ecobis.datacontractoperations.dto.RequestDeleteBeneficiary;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseDeleteBeneficiary;
import cobiscorp.ecobis.datacontractoperations.dto.RequestCreateSavingAccount;
import cobiscorp.ecobis.datacontractoperations.dto.RequestDefineSecurityQA;
import cobiscorp.ecobis.datacontractoperations.dto.RequestDeviceActivation;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseCreateSavingAccount;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseDefineSecurityQA;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseDeviceActivation;
import cobiscorp.ecobis.datacontractoperations.dto.CreditAccountRequest;
import cobiscorp.ecobis.datacontractoperations.dto.CreditAccountResponse;
import cobiscorp.ecobis.datacontractoperations.dto.RequestEncriptData;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseEncriptData;
import cobiscorp.ecobis.datacontractoperations.dto.RequestOtp;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseOtp;
import cobiscorp.ecobis.datacontractoperations.dto.RequestGetBalancesDetail;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseGetBalancesDetail;
import cobiscorp.ecobis.datacontractoperations.dto.GetBeneficiaryRequest;
import cobiscorp.ecobis.datacontractoperations.dto.GetBeneficiaryResponse;
import cobiscorp.ecobis.datacontractoperations.dto.BeneficiariesResponse;
import cobiscorp.ecobis.datacontractoperations.dto.RequestCatalog;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseCatalog;
import cobiscorp.ecobis.datacontractoperations.dto.CatalogueItems;
import cobiscorp.ecobis.datacontractoperations.dto.RequestGetColonyByMunicipality;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseGetColonyByMunicipality;
import cobiscorp.ecobis.datacontractoperations.dto.AddressTypeItems;
import cobiscorp.ecobis.datacontractoperations.dto.RequestGetMovementsDetail;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseGetMovementsDetail;
import cobiscorp.ecobis.datacontractoperations.dto.RequestMunicipalityByState;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseMunicipalityByState;
import cobiscorp.ecobis.datacontractoperations.dto.RequestOwnAccountsView;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseOwnAccountsView;
import cobiscorp.ecobis.datacontractoperations.dto.AccountsArray;
import cobiscorp.ecobis.datacontractoperations.dto.StateByZipCodeRequest;
import cobiscorp.ecobis.datacontractoperations.dto.StateByZipCodeResponse;
import cobiscorp.ecobis.datacontractoperations.dto.RequestGetUserEntityInformation;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseGetUserEntityInformation;
import cobiscorp.ecobis.datacontractoperations.dto.RequestRegisterAccountSpei;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseRegisterAccountSpei;
import cobiscorp.ecobis.datacontractoperations.dto.RegisterBeneficiaryRequest;
import cobiscorp.ecobis.datacontractoperations.dto.RegisterBeneficiaryResponse;
import cobiscorp.ecobis.datacontractoperations.dto.RequestSearchLocationCatalog;
import cobiscorp.ecobis.datacontractoperations.dto.RequestTransferSpi;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseSearchLocationCatalog;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseTransferSpi;
import cobiscorp.ecobis.datacontractoperations.dto.SearchZipCodeRequest;
import cobiscorp.ecobis.datacontractoperations.dto.SearchZipCodeResponse;
import cobiscorp.ecobis.datacontractoperations.dto.ListZipCode;
import cobiscorp.ecobis.datacontractoperations.dto.RequestTransferThirdPartyAccount;
import cobiscorp.ecobis.datacontractoperations.dto.RequestUpdateAccountStatus;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseTransferThirdPartyAccount;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseUpdateAccountStatus;
import cobiscorp.ecobis.datacontractoperations.dto.UpdateBeneficiaryRequest;
import cobiscorp.ecobis.datacontractoperations.dto.UpdateBeneficiaryResponse;
import cobiscorp.ecobis.datacontractoperations.dto.UpdateCustomerAddressRequest;
import cobiscorp.ecobis.datacontractoperations.dto.UpdateCustomerAddressResponse;
import cobiscorp.ecobis.datacontractoperations.dto.RequestUpdateProfile;
import cobiscorp.ecobis.datacontractoperations.dto.RequestValidateAllSecurityQA;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseUpdateProfile;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseValidateAllSecurityQA;
import cobiscorp.ecobis.datacontractoperations.dto.RequestValidateCustomerIdentityCard;
import cobiscorp.ecobis.datacontractoperations.dto.RequestValidateDeviceActivation;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseValidateCustomerIdentityCard;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseValidateDeviceActivation;
import cobiscorp.ecobis.datacontractoperations.dto.RequestValidateIdentity;
import cobiscorp.ecobis.datacontractoperations.dto.ResponseValidateIdentity;
import cobiscorp.ecobis.datacontractoperations.dto.CardApplicationRequest;
import cobiscorp.ecobis.datacontractoperations.dto.CardApplicationResponse;
import cobiscorp.ecobis.datacontractoperations.dto.DebitAccountRequest;
import cobiscorp.ecobis.datacontractoperations.dto.DebitAccountResponse;
import cobiscorp.ecobis.datacontractoperations.dto.ValidateTokenRequest;
import cobiscorp.ecobis.datacontractoperations.dto.ValidateTokenResponse;
import   cobiscorp.ecobis.datacontractoperations.dto.RequestUpdateCredentials;
import   cobiscorp.ecobis.datacontractoperations.dto.ResponseUpdateCredentials;

import com.cobiscorp.cobis.cts.rest.client.api.exception.CTSRestException;
import java.util.List;

public interface IServiceContractOperationsApiService {

	/**
	 * Afiliate Customer
	 */

	// Return list
	public ResponseAffiliateCustomer affiliateCustomer(RequestAffiliateCustomer inRequestAffiliateCustomer)
			throws CTSRestException;

	/**
	 * Create new customers
	 */

	// Have DTO
	public CreateCustomerResponse createCustomer(CreateCustomerRequest inCreateCustomerRequest) throws CTSRestException;

	/**
	 * Service to create a savings account for an existing customer
	 */

	// Have DTO
	public ResponseCreateSavingAccount createSavingAccount(RequestCreateSavingAccount inRequestCreateSavingAccount)
			throws CTSRestException;

	/**
	 * Service to apply credit account
	 */

	// Return list
	public CreditAccountResponse creditOperation(CreditAccountRequest inCreditAccountRequest) throws CTSRestException;

	/**
	 * Encrypt Data
	 */

	// Return list
	public ResponseEncriptData encryptData(RequestEncriptData inRequestEncriptData) throws CTSRestException;

	/**
	 * Delete Beneficiary
	 */
	 
	//Return
	public ResponseDeleteBeneficiary deleteBeneficiary(RequestDeleteBeneficiary inRequestDeleteBeneficiary  )throws CTSRestException;
	
	/**
	 * Service to generate and send an OTP to the client
	 */

	// Have only one return single result
	public ResponseOtp generateTransactionFactor(RequestOtp inRequestOtp) throws CTSRestException;

	/**
	 * Check Account Details
	 */

	// Return list
	public ResponseGetBalancesDetail getBalancesDetail(RequestGetBalancesDetail inRequestGetBalancesDetail)
			throws CTSRestException;

	/**
	 * Get Beneficiary Saving Account
	 */

	// Have DTO
	public GetBeneficiaryResponse getBeneficiary(GetBeneficiaryRequest inGetBeneficiaryRequest) throws CTSRestException;

	/**
	 * Get catalog
	 */

	// Have DTO
	public ResponseCatalog getCatalog(RequestCatalog inRequestCatalog) throws CTSRestException;

	/**
	 * Get Colony by Municipality
	 */

	// Have DTO
	public ResponseGetColonyByMunicipality getColonyByMunicipality(
			RequestGetColonyByMunicipality inRequestGetColonyByMunicipality) throws CTSRestException;

	/**
	 * Service to obtain the detail of movements of an existing savings account
	 */

	// Have DTO
	public ResponseGetMovementsDetail getMovementsDetail(RequestGetMovementsDetail inRequestGetMovementsDetail)
			throws CTSRestException;

	/**
	 * Municipality By State
	 */

	// Have DTO
	public ResponseMunicipalityByState getMunicipalityByState(RequestMunicipalityByState inRequestMunicipalityByState)
			throws CTSRestException;

	/**
	 * Get Own Accounts View
	 */

	// Have DTO
	public ResponseOwnAccountsView getOwnAccountsView(RequestOwnAccountsView inRequestOwnAccountsView)
			throws CTSRestException;

	/**
	 * Find State By zip Code API
	 */

	// Have DTO
	public StateByZipCodeResponse getStateByZipCode(StateByZipCodeRequest inStateByZipCodeRequest)
			throws CTSRestException;

	/**
	 * View Customer Information
	 */

	// Have DTO
	public ResponseGetUserEntityInformation getUserEntityInformation(
			RequestGetUserEntityInformation inRequestGetUserEntityInformation) throws CTSRestException;

	/**
	 * Service to register beneficiaries for spei transfers.
	 */

	// Have DTO
	public ResponseRegisterAccountSpei registerAccount(RequestRegisterAccountSpei inRequestRegisterAccountSpei)
			throws CTSRestException;

	/**
	 * Register Beneficiary Saving Account
	 */

	// Have DTO
	public RegisterBeneficiaryResponse registerBeneficiary(RegisterBeneficiaryRequest inRegisterBeneficiaryRequest)
			throws CTSRestException;

	/**
	 * Catalogue Of Locations
	 */

	// Have DTO
	public ResponseSearchLocationCatalog searchLocationCatalog(
			RequestSearchLocationCatalog inRequestSearchLocationCatalog) throws CTSRestException;

	/**
	 * Search Zip Code API
	 */

	// Have DTO
	public SearchZipCodeResponse searchZipCode(SearchZipCodeRequest inSearchZipCodeRequest) throws CTSRestException;

	/**
	 * Transfer Spei
	 */

	// Have DTO
	public ResponseTransferSpi transferSpei(RequestTransferSpi inRequestTransferSpi) throws CTSRestException;

	/**
	 * Service for transfer to a third party account
	 */

	// Have DTO
	public ResponseTransferThirdPartyAccount transferThirdPartyAccount(
			RequestTransferThirdPartyAccount inRequestTransferThirdPartyAccount) throws CTSRestException;

	/**
    * Update Account Beneficiary
    */
	//Have DTO
	public UpdateBeneficiaryResponse updateAccountBeneficiary(UpdateBeneficiaryRequest inUpdateBeneficiaryRequest  )throws CTSRestException;
		  
	/**
	 * Update customer address
	 */

	// Have DTO
	public UpdateCustomerAddressResponse updateCustomerAddress(
			UpdateCustomerAddressRequest inUpdateCustomerAddressRequest) throws CTSRestException;

	/**
	 * Service to Update Profile
	 */

	// Return list
	public List<ResponseUpdateProfile> updateProfile(RequestUpdateProfile inRequestUpdateProfile)
			throws CTSRestException;

	// Have DTO
	public ResponseValidateCustomerIdentityCard validateCustomerIdentityCard(
			RequestValidateCustomerIdentityCard inRequestValidateCustomerIdentityCard) throws CTSRestException;

	/**
	 * Activate Device
	 */

	// Have DTO
	public ResponseDeviceActivation activateDevice(RequestDeviceActivation inRequestDeviceActivation)
			throws CTSRestException;

	/**
	 * Validate Device Activation
	 */

	// Have DTO
	public ResponseValidateDeviceActivation validateDeviceActivation(
			RequestValidateDeviceActivation inRequestValidateDeviceActivation) throws CTSRestException;

	/**
	 * Validate Identity
	 */

	// Have DTO
	public ResponseValidateIdentity validateIdentity(RequestValidateIdentity inRequestValidateIdentity)
			throws CTSRestException;

	// Return DTO
	public CardApplicationResponse customerCardApplication(CardApplicationRequest inCardApplicationRequest)
			throws CTSRestException;

	/**
	 * Get All Customer Questions
	 */

	// Have DTO
	public ResponseAllCustomerQuestions getAllCustomerQuestions(
			RequestAllCustomerQuestions inRequestAllCustomerQuestions) throws CTSRestException;
	
	/**
	 * Define Security Question and Answer
	 */

	// Have DTO
	public ResponseDefineSecurityQA defineSecurityQA(RequestDefineSecurityQA inRequestDefineSecurityQA)
			throws CTSRestException;
	
	/**
	 * Validate All Security Questions and Answers
	 */

	// Have DTO
	public ResponseValidateAllSecurityQA validateAllSecurityQA(
			RequestValidateAllSecurityQA inRequestValidateAllSecurityQA) throws CTSRestException;
	
	/**
	 * Update Account Status
	 */

	// Have DTO
	public ResponseUpdateAccountStatus updateAccountStatus(RequestUpdateAccountStatus inRequestUpdateAccountStatus)
			throws CTSRestException;

	/**
	 * Service to apply debit account
	 */

	// Return DTO
	public DebitAccountResponse debitOperation(DebitAccountRequest inDebitAccountRequest) throws CTSRestException;

	/**
	 * Valdate token transaction factor API
	 */

	// Return DTO
	public ValidateTokenResponse validateTransactionFactor(ValidateTokenRequest inValidateTokenRequest)
			throws CTSRestException;

	/**
	* Service to Update Credentials
    */
        
	// Return DTO
	public ResponseUpdateCredentials updateCredentials(RequestUpdateCredentials inRequestUpdateCredentials  )throws CTSRestException;

}
