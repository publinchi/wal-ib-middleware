
    /************************************************************/
    /*                     IMPORTANTE                           */
    /*   Esta aplicacion es parte de los  paquetes bancarios    */
    /*   propiedad de COBISCORP.                                */
    /*   Su uso no autorizado queda  expresamente  prohibido    */
    /*   asi como cualquier alteracion o agregado hecho  por    */
    /*   alguno de sus usuarios sin el debido consentimiento    */
    /*   por escrito de COBISCORP.                              */
    /*   Este programa esta protegido por la ley de derechos    */
    /*   de autor y por las y por las convenciones              */
    /*   internacionales de  propiedad intelectual. Su uso no   */
    /*   autorizado dara  derecho a  COBISCORP para obtener     */
    /*   ordenes de  secuestro o retencion y  para perseguir    */
    /*   penalmente a los autores de cualquier infraccion.      */
    /************************************************************/
    /*   This code was generated by CEN-SG.                     */
    /*   Changes to this file may cause incorrect behavior      */
    /*   and will be lost if the code is regenerated.           */
    /************************************************************/
    
    package  cobiscorp.ecobis.servicecontractoperations.service;
    
    import com.cobiscorp.cobis.cts.rest.client.api.exception.CTSRestException;
    import com.cobiscorp.cobis.commons.log.ILogger;
    import com.cobiscorp.cobis.commons.log.LogFactory;
    import com.cobiscorp.cobis.cts.rest.client.api.RowMapper;
    import com.cobiscorp.cobis.cts.rest.client.dto.MessageBlock;
    import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureRequestAS;
    import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureResponseAS;
    import com.cobiscorp.cobis.cts.rest.client.dto.ProcedureResponseParam;
    import com.cobiscorp.cobis.cts.rest.client.mapper.MapperResultUtil;
    import com.cobiscorp.cobis.cts.rest.client.mapper.ResultSetMapper;
    import com.cobiscorp.cobis.cts.rest.client.util.ErrorUtil;
    import com.cobiscorp.cobis.cwc.cts.rest.ICTSRestIntegrationService;
    import com.cobiscorp.cobis.jaxrs.publisher.SessionManager;
import com.google.gson.Gson;

import org.apache.felix.scr.annotations.*;
    import java.math.BigDecimal;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Arrays;
    
    import com.cobiscorp.cobis.cts.rest.client.util.ConverterUtil;
    import com.cobiscorp.cobis.cts.rest.client.util.ICTSTypes;
    
    import cobiscorp.ecobis.servicecontractoperations.service.IServiceContractOperationsApiService;
    import cobiscorp.ecobis.datacontractoperations.dto.*;
   
        @Component
    @Service({IServiceContractOperationsApiService.class})
    public class ServiceContractOperationsApiService implements IServiceContractOperationsApiService{

    @Reference(name = "ctsRestIntegrationService", referenceInterface = ICTSRestIntegrationService.class,
    bind = "setctsRestIntegrationService", unbind = "unsetctsRestIntegrationService", cardinality = ReferenceCardinality.MANDATORY_UNARY,
    policy = ReferencePolicy.DYNAMIC)
    private ICTSRestIntegrationService ctsRestIntegrationService;
    private static final ILogger LOGGER = LogFactory.getLogger(ServiceContractOperationsApiService.class);

    
    /**
    * Create new customers
    */
   @Override
		//Have DTO
		public CreateCustomerResponse createCustomer(CreateCustomerRequest inCreateCustomerRequest  )throws CTSRestException{
LOGGER.logDebug("Start service execution: createCustomer");
CreateCustomerResponse outCreateCustomerResponse  = new CreateCustomerResponse();
    
//create procedure
ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_api_create_customer");

  procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500094");
procedureRequestAS.addInputParam("@i_activity_code",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getActivity());
procedureRequestAS.addInputParam("@i_address",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getReferenceAddress());
procedureRequestAS.addInputParam("@i_address_type_code",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getAddressTypeCode());
procedureRequestAS.addInputParam("@i_amount_transaction",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getAmountTransaction());
procedureRequestAS.addInputParam("@i_average_balance",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getAverageBalance());
procedureRequestAS.addInputParam("@i_birthdate",ICTSTypes.SQLDATETIME,String.valueOf(ConverterUtil.calendarToString(inCreateCustomerRequest.getBirthDate())));
procedureRequestAS.addInputParam("@i_city_code",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getCity()));
procedureRequestAS.addInputParam("@i_countrybirth_code",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getCountryBirth()));
procedureRequestAS.addInputParam("@i_civil_status",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getCivilStatus());
procedureRequestAS.addInputParam("@i_company_name",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getCompanyName());
procedureRequestAS.addInputParam("@i_electronic_transfer",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getElectronicTransfer()));
procedureRequestAS.addInputParam("@i_externalnumber",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getExternalNumber()));
procedureRequestAS.addInputParam("@i_gender_code",ICTSTypes.SQLCHAR,String.valueOf(inCreateCustomerRequest.getGender()));
procedureRequestAS.addInputParam("@i_geolocatization_latitude",ICTSTypes.SQLDECIMAL,String.valueOf(inCreateCustomerRequest.getGeolocalizationLatitude()));
procedureRequestAS.addInputParam("@i_geolocatization_longitude",ICTSTypes.SQLDECIMAL,String.valueOf(inCreateCustomerRequest.getGeolocalizationLongitude()));
procedureRequestAS.addInputParam("@i_identification_number",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getIdNumber());
procedureRequestAS.addInputParam("@i_identity_validated",ICTSTypes.SQLCHAR,String.valueOf(inCreateCustomerRequest.getIdentityValidated()));
procedureRequestAS.addInputParam("@i_incomelevel",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getIncomeLevel());
procedureRequestAS.addInputParam("@i_incomelevel_entity",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getIncomeLevelEntity());
procedureRequestAS.addInputParam("@i_internalnumber",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getInternalNumber()));
procedureRequestAS.addInputParam("@i_lastname",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getLastName());
procedureRequestAS.addInputParam("@i_legalincomesource",ICTSTypes.SQLCHAR,String.valueOf(inCreateCustomerRequest.getLegalIncomeSource()));
procedureRequestAS.addInputParam("@i_mail",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getEmail());
procedureRequestAS.addInputParam("@i_name",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getFirstName());
procedureRequestAS.addInputParam("@i_nationality",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getNationality());
procedureRequestAS.addInputParam("@i_noconnectiontoillegalnetworks",ICTSTypes.SQLCHAR,String.valueOf(inCreateCustomerRequest.getNoConnectionIllegalNetworks()));
procedureRequestAS.addInputParam("@i_number",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getPhoneNumber());
procedureRequestAS.addInputParam("@i_number_transaction",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getNumberTransaction());
procedureRequestAS.addInputParam("@i_occupation_code",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getOccupation());
procedureRequestAS.addInputParam("@i_operation_type",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getOperationType());
procedureRequestAS.addInputParam("@i_other_mexican_account",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getOtherMexicanAccount());
procedureRequestAS.addInputParam("@i_otherlastname",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getSecondLastName());
procedureRequestAS.addInputParam("@i_othername",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getSecondName());
procedureRequestAS.addInputParam("@i_payment_card",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getPaymentCard()));
procedureRequestAS.addInputParam("@i_payment_recharge",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getPaymentRecharge()));
procedureRequestAS.addInputParam("@i_payment_service",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getServicesPay()));
procedureRequestAS.addInputParam("@i_propertytype_code",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getPropertyTypeCode());
procedureRequestAS.addInputParam("@i_province_code",ICTSTypes.SQLINT2,String.valueOf(inCreateCustomerRequest.getProvince()));
procedureRequestAS.addInputParam("@i_provincebirth_code",ICTSTypes.SQLINT2,String.valueOf(inCreateCustomerRequest.getProvinceBirth()));
procedureRequestAS.addInputParam("@i_provision_cash",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getProvisionCash()));
procedureRequestAS.addInputParam("@i_rfc",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getRfc());
procedureRequestAS.addInputParam("@i_secondaryidentification_number",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getIdentificationNumber());
procedureRequestAS.addInputParam("@i_secondaryidentification_type_code",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getIdentificationType());
procedureRequestAS.addInputParam("@i_street",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getStreet());
procedureRequestAS.addInputParam("@i_subdivision_code",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getSubdivisioncode()));
procedureRequestAS.addInputParam("@i_timeincurrentresidence",ICTSTypes.SQLINT4,String.valueOf(inCreateCustomerRequest.getTimeCurrentRecide()));
procedureRequestAS.addInputParam("@i_town_code",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getTownCode());
procedureRequestAS.addInputParam("@i_validity_date",ICTSTypes.SQLDATETIME,String.valueOf(ConverterUtil.calendarToString(inCreateCustomerRequest.getValidityDate())));
procedureRequestAS.addInputParam("@i_zipcode_code",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getZipcode());
procedureRequestAS.addInputParam("@i_economic_sector",ICTSTypes.SQLVARCHAR,inCreateCustomerRequest.getEconomicSector());

//execute procedure
ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

List<MessageBlock> errors = ErrorUtil.getErrors(response);
//throw error
if(errors!= null && errors.size()> 0){
LOGGER.logDebug("Procedure execution returns error");
if ( LOGGER.isDebugEnabled() ) {
for (int i = 0; i < errors.size(); i++) {
LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
}
}
throw new CTSRestException("Procedure Response has errors", null, errors);
}
LOGGER.logDebug("Procedure ok");
//Init map returns
int mapTotal=0;
int mapBlank=0;

      mapTotal++;
      if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
							//---------NO Array
							CreateCustomerResponse returnCreateCustomerResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<CreateCustomerResponse>() { 
              @Override
              public CreateCustomerResponse mapRow(ResultSetMapper resultSetMapper, int index) {
              CreateCustomerResponse dto = new CreateCustomerResponse();
              
                    dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
              return dto;
              }
              },false);

              outCreateCustomerResponse = returnCreateCustomerResponse;
                  // break;
                
      }else {
      mapBlank++;

      }
    
      mapTotal++;
      if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
							//---------NO Array
							CreateCustomerResponse returnCreateCustomerResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<CreateCustomerResponse>() { 
              @Override
              public CreateCustomerResponse mapRow(ResultSetMapper resultSetMapper, int index) {
              CreateCustomerResponse dto = new CreateCustomerResponse();
              
						dto.messageInstance().setCode(resultSetMapper.getInteger(1));
						dto.messageInstance().setMessage(resultSetMapper.getString(2));
              return dto;
              }
              },false);

              outCreateCustomerResponse.setMessage(returnCreateCustomerResponse.getMessage());
                  // break;
                
      }else {
      mapBlank++;

      }
    
      mapTotal++;
      if (response.getResultSets()!=null&&response.getResultSets().get(2).getData().getRows().size()>0) {	
							//---------NO Array
							CreateCustomerResponse returnCreateCustomerResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<CreateCustomerResponse>() { 
              @Override
              public CreateCustomerResponse mapRow(ResultSetMapper resultSetMapper, int index) {
              CreateCustomerResponse dto = new CreateCustomerResponse();
              
                    dto.setCustomerCobisCode(resultSetMapper.getInteger(1));
              return dto;
              }
              },false);

              outCreateCustomerResponse.setCustomerCobisCode(returnCreateCustomerResponse.getCustomerCobisCode());
                  // break;
                
      }else {
      mapBlank++;

      }
    
//End map returns
if(mapBlank!=0&&mapBlank==mapTotal){
LOGGER.logDebug("No data found");
throw new CTSRestException("404",null);
}

  LOGGER.logDebug("Ends service execution: createCustomer");
  //returns data
  return outCreateCustomerResponse;
}

          /**
          * Encrypt Data
          */
         @Override
			// Return List
			public  List<ResponseEncriptData>  encryptData(RequestEncriptData inRequestEncriptData  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: encryptData");
      List<ResponseEncriptData> outSingleResponseEncriptData  = new ArrayList<>();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_encryptData");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500088");
      procedureRequestAS.addInputParam("@i_external_customer_id",ICTSTypes.SQLINT4,String.valueOf(inRequestEncriptData.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_password",ICTSTypes.SQLVARCHAR,inRequestEncriptData.getPassword());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    List<ResponseEncriptData> returnResponseEncriptData = MapperResultUtil.mapToList(response.getResultSets().get(0), new RowMapper<ResponseEncriptData>() { 
                    @Override
                    public ResponseEncriptData mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseEncriptData dto = new ResponseEncriptData();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                          dto.setPassword(resultSetMapper.getString(2));
							dto.messageInstance().setMessage(resultSetMapper.getString(3));
							dto.messageInstance().setCode(resultSetMapper.getInteger(4));
                    return dto;
                    }
                    },false);
                    outSingleResponseEncriptData=returnResponseEncriptData ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: encryptData");
        //returns data
        return outSingleResponseEncriptData;
      }
    
          /**
          * Service to generate and send an OTP to the client
          */
         @Override
			// Have only one return single result
			public  ResponseOtp generateTransactionFactor(RequestOtp inRequestOtp  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: generateTransactionFactor");
      ResponseOtp outSingleResponseOtp  = new ResponseOtp();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..administra_token");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500090");
      procedureRequestAS.addInputParam("@i_external_customer_id",ICTSTypes.SQLINT4,String.valueOf(inRequestOtp.getExternalCustomerId()));
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume SingleResult
                    ResponseOtp returnResponseOtp = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseOtp>() { 
                    @Override
                    public ResponseOtp mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseOtp dto = new ResponseOtp();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							dto.messageInstance().setCode(resultSetMapper.getInteger(2));
							dto.messageInstance().setMessage(resultSetMapper.getString(3));
                    return dto;
                    }
                    },false);
                    outSingleResponseOtp=returnResponseOtp ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: generateTransactionFactor");
        //returns data
        return outSingleResponseOtp;
      }
    
          /**
          * Get catalog
          */
         @Override
			//Have DTO
			public ResponseCatalog getCatalog(RequestCatalog inRequestCatalog  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: getCatalog");
      ResponseCatalog outResponseCatalog  = new ResponseCatalog();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_get_catalog_data");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500087");
      procedureRequestAS.addInputParam("@i_catalog",ICTSTypes.SQLVARCHAR,inRequestCatalog.getCatalogueTable());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
								//---------NO Array
								CatalogueItems [] returnCatalogueItems = MapperResultUtil.mapToArray(response.getResultSets().get(0), new RowMapper<CatalogueItems>() { 
                    @Override
                    public CatalogueItems mapRow(ResultSetMapper resultSetMapper, int index) {
                    CatalogueItems dto = new CatalogueItems();
                    
                          dto.setCode(resultSetMapper.getString(1));
                          dto.setName(resultSetMapper.getString(2));
                    return dto;
                    }
                    },false);

                    outResponseCatalog.setCatalogueItems(returnCatalogueItems);
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
								//---------NO Array
								Message returnMessage = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<Message>() { 
                    @Override
                    public Message mapRow(ResultSetMapper resultSetMapper, int index) {
                    Message dto = new Message();
                    
                          dto.setCode(resultSetMapper.getInteger(1));
                          dto.setMessage(resultSetMapper.getString(2));
                    return dto;
                    }
                    },false);

                    outResponseCatalog.setMessage(returnMessage);
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(2).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseCatalog returnResponseCatalog = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseCatalog>() { 
                    @Override
                    public ResponseCatalog mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseCatalog dto = new ResponseCatalog();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                    return dto;
                    }
                    },false);

                    outResponseCatalog.setSuccess(true);
                        // break;
                      
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: getCatalog");
        //returns data
        return outResponseCatalog;
      }
    
          /**
          * View Customer Information
          */
         @Override
			//Have DTO
			public ResponseGetUserEntityInformation getUserEntityInformation(RequestGetUserEntityInformation inRequestGetUserEntityInformation  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: getUserEntityInformation");
      ResponseGetUserEntityInformation outResponseGetUserEntityInformation  = new ResponseGetUserEntityInformation();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_getCustomer");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500092");
      procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inRequestGetUserEntityInformation.getExternalCustomerId()));
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseGetUserEntityInformation returnResponseGetUserEntityInformation = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseGetUserEntityInformation>() { 
                    @Override
                    public ResponseGetUserEntityInformation mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseGetUserEntityInformation dto = new ResponseGetUserEntityInformation();
                    
                    dto.setSuccess(resultSetMapper.getBooleanWrapper(17));
                    dto.setRegistrationDate(resultSetMapper.getCalendar(1));
                    dto.setModifyDate(resultSetMapper.getCalendar(2));
                    dto.setCompleteName(resultSetMapper.getString(3));
                    dto.setEntityType(resultSetMapper.getString(4));
                    dto.setIdentityCard(resultSetMapper.getString(5));
                    dto.setFirstSurName(resultSetMapper.getString(6));
                    dto.setSecondSurName(resultSetMapper.getString(7));
                    dto.setGender(resultSetMapper.getString(8));
                    dto.setBirthDate(resultSetMapper.getCalendar(9));
                    dto.setFirstName(resultSetMapper.getString(10));
                    dto.setSecondName(resultSetMapper.getString(11));
                    dto.setRFC(resultSetMapper.getString(12));
                    dto.setMail(resultSetMapper.getString(13));
                    dto.setPhoneNumber(resultSetMapper.getString(14));
                    dto.setCustomerLevel(resultSetMapper.getString(15));
                    dto.setAddressId(resultSetMapper.getInteger(16));
                    dto.messageInstance().setCode(resultSetMapper.getInteger(18));
                    dto.messageInstance().setMessage(resultSetMapper.getString(19));
                    return dto;
                    }
                    },false);

               //    outResponseGetUserEntityInformation.set(returnResponseGetUserEntityInformation);
                        // break;
                    			outResponseGetUserEntityInformation=	returnResponseGetUserEntityInformation;
                      
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: getUserEntityInformation");
        //returns data
        return outResponseGetUserEntityInformation;
      }
         
    		/**
          * Register Beneficiary Saving Account
          */
         @Override
			//Have DTO
			public RegisterBeneficiaryResponse registerBeneficiary(RegisterBeneficiaryRequest inRegisterBeneficiaryRequest  )throws CTSRestException{
		  LOGGER.logDebug("Start service execution: registerBeneficiary");
	      RegisterBeneficiaryResponse outRegisterBeneficiaryResponse  = new RegisterBeneficiaryResponse();
	          
	      //create procedure
	      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_bvirtual..sp_beneficiaries_mant_api");
	      
	        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500096");
	      procedureRequestAS.addInputParam("@i_ente",ICTSTypes.SQLINT4,String.valueOf(inRegisterBeneficiaryRequest.getExternalCustomerId()));
	      procedureRequestAS.addInputParam("@i_numero_producto",ICTSTypes.SQLVARCHAR,inRegisterBeneficiaryRequest.getAccount());
	      procedureRequestAS.addInputParam("@i_operacion",ICTSTypes.SQLCHAR,"I");
	      
	      Gson gson = new Gson();
	      String JSON = gson.toJson(inRegisterBeneficiaryRequest.getBeneficiaries());
	      procedureRequestAS.addInputParam("@i_json_beneficiaries",ICTSTypes.SQLVARCHAR,JSON);
	      
	      //execute procedure
	      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);
	
	      List<MessageBlock> errors = ErrorUtil.getErrors(response);
	      //throw error
	      if(errors!= null && errors.size()> 0){
	      LOGGER.logDebug("Procedure execution returns error");
	      if ( LOGGER.isDebugEnabled() ) {
	      for (int i = 0; i < errors.size(); i++) {
	      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
	      }
	      }
	      throw new CTSRestException("Procedure Response has errors", null, errors);
	      }
	      LOGGER.logDebug("Procedure ok");
	      //Init map returns
	      int mapTotal=0;
	      int mapBlank=0;
	      
	            mapTotal++;
	            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
									//---------NO Array
									RegisterBeneficiaryResponse returnRegisterBeneficiaryResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<RegisterBeneficiaryResponse>() { 
	                    @Override
	                    public RegisterBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
	                    RegisterBeneficiaryResponse dto = new RegisterBeneficiaryResponse();
	                    
	                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
	                    return dto;
	                    }
	                    },false);
	
	                    outRegisterBeneficiaryResponse.setSuccess(returnRegisterBeneficiaryResponse.isSuccess());
	                        // break;
	                      
	            }else {
	            mapBlank++;
	
	            }
	          
	            mapTotal++;
	            if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
									//---------NO Array
									RegisterBeneficiaryResponse returnRegisterBeneficiaryResponse = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<RegisterBeneficiaryResponse>() { 
	                    @Override
	                    public RegisterBeneficiaryResponse mapRow(ResultSetMapper resultSetMapper, int index) {
	                    RegisterBeneficiaryResponse dto = new RegisterBeneficiaryResponse();
	                    
								dto.messageInstance().setCode(resultSetMapper.getInteger(1));
								dto.messageInstance().setMessage(resultSetMapper.getString(2));
	                    return dto;
	                    }
	                    },false);
	
	                    outRegisterBeneficiaryResponse.setMessage(returnRegisterBeneficiaryResponse.getMessage());
	                        // break;
	                      
	            }else {
	            mapBlank++;
	
	            }
	          
	      //End map returns
	      if(mapBlank!=0&&mapBlank==mapTotal){
	      LOGGER.logDebug("No data found");
	      throw new CTSRestException("404",null);
	      }
	      
	        LOGGER.logDebug("Ends service execution: registerBeneficiary");
	        //returns data
	        return outRegisterBeneficiaryResponse;
	      }         

         
          /**
          * Service to Update Profile
          */
         @Override
			// Return List
			public  List<ResponseUpdateProfile>  updateProfile(RequestUpdateProfile inRequestUpdateProfile  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: updateProfile");
      List<ResponseUpdateProfile> outSingleResponseUpdateProfile  = new ArrayList<>();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_updateProfile");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500095");
      procedureRequestAS.addInputParam("@i_externalCustomerId",ICTSTypes.SQLINT4,String.valueOf(inRequestUpdateProfile.getExternalCustomerId()));
      procedureRequestAS.addInputParam("@i_email",ICTSTypes.SQLVARCHAR,inRequestUpdateProfile.getEmail());
      procedureRequestAS.addInputParam("@i_phoneNumber",ICTSTypes.SQLVARCHAR,inRequestUpdateProfile.getPhoneNumber());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------Assume Array return
                    List<ResponseUpdateProfile> returnResponseUpdateProfile = MapperResultUtil.mapToList(response.getResultSets().get(0), new RowMapper<ResponseUpdateProfile>() { 
                    @Override
                    public ResponseUpdateProfile mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseUpdateProfile dto = new ResponseUpdateProfile();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
							dto.messageInstance().setMessage(resultSetMapper.getString(2));
							dto.messageInstance().setCode(resultSetMapper.getInteger(3));
                    return dto;
                    }
                    },false);
                    outSingleResponseUpdateProfile=returnResponseUpdateProfile ;
                    
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: updateProfile");
        //returns data
        return outSingleResponseUpdateProfile;
      }
      
     @Override
			//Have DTO
			public ResponseValidateCustomerIdentityCard validateCustomerIdentityCard(RequestValidateCustomerIdentityCard inRequestValidateCustomerIdentityCard  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: validateCustomerIdentityCard");
      ResponseValidateCustomerIdentityCard outResponseValidateCustomerIdentityCard  = new ResponseValidateCustomerIdentityCard();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_validate_identity_card_api");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500093");
      procedureRequestAS.addInputParam("@curp",ICTSTypes.SQLVARCHAR,inRequestValidateCustomerIdentityCard.getIdentityCard());
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {
                    //----------------SingleResult
                    ResponseValidateCustomerIdentityCard returnResponseValidateCustomerIdentityCard = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseValidateCustomerIdentityCard>() { 
                        //----------------isOutDTO
                        @Override
                        public ResponseValidateCustomerIdentityCard mapRow(ResultSetMapper resultSetMapper, int index) {
                        ResponseValidateCustomerIdentityCard dto = new ResponseValidateCustomerIdentityCard();
                        
                              dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                        return dto;
                        }
                        },false);
                        outResponseValidateCustomerIdentityCard.setSuccess(returnResponseValidateCustomerIdentityCard.isSuccess());
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseValidateCustomerIdentityCard returnResponseValidateCustomerIdentityCard = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<ResponseValidateCustomerIdentityCard>() { 
                    @Override
                    public ResponseValidateCustomerIdentityCard mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseValidateCustomerIdentityCard dto = new ResponseValidateCustomerIdentityCard();
                    
							dto.messageInstance().setCode(resultSetMapper.getInteger(1));
							dto.messageInstance().setMessage(resultSetMapper.getString(2));
                    return dto;
                    }
                    },false);

                    outResponseValidateCustomerIdentityCard.setMessage(returnResponseValidateCustomerIdentityCard.getMessage());
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(2).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseValidateCustomerIdentityCard returnResponseValidateCustomerIdentityCard = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseValidateCustomerIdentityCard>() { 
                    @Override
                    public ResponseValidateCustomerIdentityCard mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseValidateCustomerIdentityCard dto = new ResponseValidateCustomerIdentityCard();
                    
                          dto.setExternalCustomerId(resultSetMapper.getInteger(1));
                    return dto;
                    }
                    },false);

                    outResponseValidateCustomerIdentityCard.setExternalCustomerId(returnResponseValidateCustomerIdentityCard.getExternalCustomerId());
                        // break;
                      
            }else {
            mapBlank++;

            }
            
            
            
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: validateCustomerIdentityCard");
        //returns data
        return outResponseValidateCustomerIdentityCard;
      }
    
     
 	
	 /**
          * Service to create a savings account for an existing customer
          */
         @Override
			//Have DTO
			public ResponseCreateSavingAccount createSavingAccount(RequestCreateSavingAccount inRequestCreateSavingAccount  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: createSavingAccount");
      ResponseCreateSavingAccount outResponseCreateSavingAccount  = new ResponseCreateSavingAccount();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cobis..sp_apertura_aut_bv_api");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500097");
      procedureRequestAS.addInputParam("@i_cli",ICTSTypes.SQLINT4,String.valueOf(inRequestCreateSavingAccount.getCustomerId()));
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseCreateSavingAccount returnResponseCreateSavingAccount = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseCreateSavingAccount>() { 
                    @Override
                    public ResponseCreateSavingAccount mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseCreateSavingAccount dto = new ResponseCreateSavingAccount();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                    return dto;
                    }
                    },false);

                    outResponseCreateSavingAccount.setSuccess(returnResponseCreateSavingAccount.isSuccess());
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
								//---------NO Array
								Message returnMessage = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<Message>() { 
                    @Override
                    public Message mapRow(ResultSetMapper resultSetMapper, int index) {
                    Message dto = new Message();
                    
                          dto.setCode(resultSetMapper.getInteger(1));
                          dto.setMessage(resultSetMapper.getString(2));
                    return dto;
                    }
                    },false);

                    outResponseCreateSavingAccount.setMessage(returnMessage);
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(2).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseCreateSavingAccount returnResponseCreateSavingAccount = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseCreateSavingAccount>() { 
                    @Override
                    public ResponseCreateSavingAccount mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseCreateSavingAccount dto = new ResponseCreateSavingAccount();
                    
                          dto.setAccountNumber(resultSetMapper.getString(1));
                    return dto;
                    }
                    },false);

                    outResponseCreateSavingAccount.setAccountNumber(returnResponseCreateSavingAccount.getAccountNumber());
                        // break;
                      
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
      
        LOGGER.logDebug("Ends service execution: createSavingAccount");
        //returns data
        return outResponseCreateSavingAccount;
      }
          /**
          * Validate Identity
          */
         @Override
			//Have DTO
			public ResponseValidateIdentity validateIdentity(RequestValidateIdentity inRequestValidateIdentity  )throws CTSRestException{
	  LOGGER.logDebug("Start service execution: validateIdentity");
      ResponseValidateIdentity outResponseValidateIdentity  = new ResponseValidateIdentity();
          
      //create procedure
      ProcedureRequestAS procedureRequestAS = new ProcedureRequestAS("cob_procesador..sp_validate_identity");
      
        procedureRequestAS.addInputParam("@t_trn",ICTSTypes.SQLINT4,"18500091");
      procedureRequestAS.addInputParam("@i_type",ICTSTypes.SQLVARCHAR,inRequestValidateIdentity.getType());
      procedureRequestAS.addInputParam("@i_imageAnverso",ICTSTypes.SQLVARCHAR,inRequestValidateIdentity.getImageAnverso());
      procedureRequestAS.addInputParam("@i_imageReverso",ICTSTypes.SQLVARCHAR,inRequestValidateIdentity.getImageReverso());
      procedureRequestAS.addInputParam("@i_imageDomicile",ICTSTypes.SQLVARCHAR,inRequestValidateIdentity.getImageDomicile());
      procedureRequestAS.addOutputParam("@salida",ICTSTypes.SQLVARCHAR,"0");
      
      //execute procedure
      ProcedureResponseAS response = ctsRestIntegrationService.execute(SessionManager.getSessionId(), null,procedureRequestAS);

      List<MessageBlock> errors = ErrorUtil.getErrors(response);
      //throw error
      if(errors!= null && errors.size()> 0){
      LOGGER.logDebug("Procedure execution returns error");
      if ( LOGGER.isDebugEnabled() ) {
      for (int i = 0; i < errors.size(); i++) {
      LOGGER.logDebug("CTSErrorMessage: " + errors.get(i));
      }
      }
      throw new CTSRestException("Procedure Response has errors", null, errors);
      }
      LOGGER.logDebug("Procedure ok");
      //Init map returns
      int mapTotal=0;
      int mapBlank=0;
      
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(0).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseValidateIdentity returnResponseValidateIdentity = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(0), new RowMapper<ResponseValidateIdentity>() { 
                    @Override
                    public ResponseValidateIdentity mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseValidateIdentity dto = new ResponseValidateIdentity();
                    
                          dto.setSuccess(resultSetMapper.getBooleanWrapper(1));
                    return dto;
                    }
                    },false);

                    outResponseValidateIdentity.setSuccess(returnResponseValidateIdentity.isSuccess());
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(1).getData().getRows().size()>0) {	
								//---------NO Array
								Message returnMessage = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(1), new RowMapper<Message>() { 
                    @Override
                    public Message mapRow(ResultSetMapper resultSetMapper, int index) {
                    Message dto = new Message();
                    
                          dto.setCode(resultSetMapper.getInteger(1));
                          dto.setMessage(resultSetMapper.getString(2));
                    return dto;
                    }
                    },false);

                    outResponseValidateIdentity.setMessage(returnMessage);
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(2).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseValidateIdentity returnResponseValidateIdentity = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(2), new RowMapper<ResponseValidateIdentity>() { 
                    @Override
                    public ResponseValidateIdentity mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseValidateIdentity dto = new ResponseValidateIdentity();
                    
                          dto.setVerificationNumber(resultSetMapper.getString(1));
                    return dto;
                    }
                    },false);

                    outResponseValidateIdentity.setVerificationNumber(returnResponseValidateIdentity.getVerificationNumber());
                        // break;
                      
            }else {
            mapBlank++;

            }
          
            mapTotal++;
            if (response.getResultSets()!=null&&response.getResultSets().get(3).getData().getRows().size()>0) {	
								//---------NO Array
								ResponseValidateIdentity returnResponseValidateIdentity = MapperResultUtil.mapOneRowToObject(response.getResultSets().get(3), new RowMapper<ResponseValidateIdentity>() { 
                    @Override
                    public ResponseValidateIdentity mapRow(ResultSetMapper resultSetMapper, int index) {
                    ResponseValidateIdentity dto = new ResponseValidateIdentity();
                    
                          dto.setEventName(resultSetMapper.getString(1));
                    return dto;
                    }
                    },false);

                    outResponseValidateIdentity.setEventName(returnResponseValidateIdentity.getEventName());
                        // break;
                      
            }else {
            mapBlank++;

            }
          
      //End map returns
      if(mapBlank!=0&&mapBlank==mapTotal){
      LOGGER.logDebug("No data found");
      throw new CTSRestException("404",null);
      }
     //  outResponseValidateIdentity.setSuccess(getOutValue(String.class, "@salida", response.getParams()));
            
        LOGGER.logDebug("Ends service execution: validateIdentity");
        //returns data
        return outResponseValidateIdentity;
      }
    

    protected void setctsRestIntegrationService(ICTSRestIntegrationService ctsRestIntegrationService){
      this.ctsRestIntegrationService = ctsRestIntegrationService;
    }

    protected void unsetctsRestIntegrationService(ICTSRestIntegrationService ctsRestIntegrationService){
      this.ctsRestIntegrationService = null;
    }

    @SuppressWarnings("unchecked")
    private <T extends Object> T getOutValue(Class<T> type, String name, List<ProcedureResponseParam> params) throws CTSRestException {
      for (ProcedureResponseParam param : params) {
        if(param.getName().equals(name)) {
          if(type.getCanonicalName() == "java.lang.String") {
            return (T) param.getValue();
          }
          return parse(type, param.getValue());
        }
      }
      LOGGER.logError("Output param " + name + " not found");
      throw new CTSRestException("404",null);
    }
    
    @SuppressWarnings("unchecked")
    private <T extends Object> T parse(Class<T> type, String value) {
      if (value != null && !"null".equals(value)) {
        if (value.trim().length() == 0) {
          if (type.getCanonicalName().equals("java.lang.Character")) {
            Character ch = ' ';
            return (T) ch;
          } else {
            return null;
          }
        } else {
          switch (type.getCanonicalName()) {
            case "java.lang.Byte":
              return (T) new Byte(value);
            case "java.lang.Long":
              return (T) new Long(value);
            case "java.lang.Double":
              return (T) new Double(value);
            case "java.lang.Integer":
              return (T) new Integer(value);
            case "java.util.Calendar":
              return (T) ConverterUtil.stringToCalendar(value);
            case "java.lang.Boolean":
              return (T) new Boolean(value);
            case "java.math.BigDecimal":
              return (T) new BigDecimal(value);
            case "java.lang.Character":
              Character ch = value.substring(0, value.length() - 1).charAt(0);
              return (T) ch;
            default:
              break;
          }
        }
      }
      return null;
    }
    
    }

  