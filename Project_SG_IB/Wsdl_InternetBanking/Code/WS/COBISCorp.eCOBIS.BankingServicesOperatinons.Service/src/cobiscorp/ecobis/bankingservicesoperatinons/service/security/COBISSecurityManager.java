
    /************************************************************/
    /*                     IMPORTANTE                           */
    /*   Esta aplicacion es parte de los  paquetes bancarios    */
    /*   propiedad de COBISCORP.                                */
    /*   Su uso no autorizado queda  expresamente  prohibido    */
    /*   asi como cualquier alteracion o agregado hecho  por    */
    /*   alguno de sus usuarios sin el debido consentimiento    */
    /*   por escrito de COBISCORP.                              */
    /*   Este programa esta protegido por la ley de derechos    */
    /*   de autor y por las y por las convenciones              */
    /*   internacionales de  propiedad intelectual. Su uso no   */
    /*   autorizado dara  derecho a  COBISCORP para obtener     */
    /*   ordenes de  secuestro o retencion y  para perseguir    */
    /*   penalmente a los autores de cualquier infraccion.      */
    /************************************************************/
    /*   This code was generated by CEN-SG.                     */
    /*   Changes to this file may cause incorrect behavior      */
    /*   and will be lost if the code is regenerated.           */
    /************************************************************/

    package cobiscorp.ecobis.bankingservicesoperatinons.service.security;

    import java.io.File;
    import java.util.Properties;
	  import java.util.HashMap;
    import java.util.concurrent.*;
    import java.util.Map;
	  import javax.annotation.Resource;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;

    import cobiscorp.ecobis.commons.dto2.MessageTO;
    import cobiscorp.ecobis.cts.integration.services.ICTSServiceIntegration;
    import cobiscorp.ecobis.cts.integration.services.dto.CTSSessionRequest;

    import com.cobiscorp.cobis.commons.crypt.ReadAlgn;
    import com.cobiscorp.cobis.commons.exceptions.COBISException;
    import com.cobiscorp.cobis.commons.log.ILogger;
    import com.cobiscorp.cobis.commons.log.LogFactory;
    import com.cobiscorp.cobis.cts.sdf.dto2.CTSServiceResponseTO;

    public class COBISSecurityManager {
    private static ILogger logger = LogFactory.getLogger(COBISSecurityManager.class);
	
    private static String externalUserId = null;
    private static String externalApplicationId = null;
    private static String password = null;

    public static synchronized <T extends CTSServiceResponseTO> String initializeSession(ICTSServiceIntegration ctsServiceIntegration, SessionSecurityKey secKey,T response, Boolean isRestart) {
    String wSessionId = null;
    try {
    if (logger.isTraceEnabled()) {
    logger.logTrace("START initializeSession, secKey: "+secKey);
    }

    String backendId=secKey.getBackendId() ;
	
    //if user is sent in header
    if(secKey.getLogin() != null  && secKey.getApplicationId() != null ){
    if (logger.isDebugEnabled()) {
    logger.logDebug("Initializing session using header params");
    }

    CTSSessionRequest sessionReq = new CTSSessionRequest();
    sessionReq.setExternalApplicationId(secKey.getApplicationId());
    sessionReq.setExternalUserId(secKey.getLogin());
    sessionReq.setPassword(secKey.getPassword());
	
    sessionReq.addData("restartSession", isRestart);
	
    if( backendId != null ){
    sessionReq.setBackEndId(backendId);
    }

    if (logger.isDebugEnabled()) {
    logger.logDebug("externalUserId: " + secKey.getLogin() + ", externalApplicationId: " + secKey.getApplicationId() +", backendId: " + backendId );
    }
    wSessionId = ctsServiceIntegration.initializeSession(sessionReq);
    
    if (logger.isTraceEnabled()) {
    logger.logTrace("END initializeSession. sessionId = " + wSessionId );
    }
    return wSessionId;
    }
	
    if(externalUserId == null || externalApplicationId == null){
    // algn File
    if (logger.isDebugEnabled()) {
    logger.logDebug("Initializing session using Algn file");
    }
    String algnFile = null;
    try
    {
    Context env = (Context) new InitialContext().lookup("java:comp/env");
    algnFile = (String)env.lookup("ALGN_FILE");
    }
    catch (NamingException e) {
    if (logger.isWarningEnabled()) {
    logger.logWarning("Environment variable [ALGN_FILE] not found.", e);
    }
    }

    if (algnFile == null || algnFile.equals(""))
    {
    algnFile = "karpay.algncon";
    }
    algnFile = System.getProperty("COBIS_HOME") + "/CLIENT_ALGNS/" + algnFile;

    File file = new File(algnFile);
    if (!file.exists()) {
    response.setSuccess(false);
    MessageTO errorMessage = new MessageTO();
    errorMessage.setMessage("File doesn't exist : " + algnFile);
    MessageTO[] messages = { errorMessage };
    response.setMessages(messages);
    if (logger.isErrorEnabled()) {
    logger.logError("File doesn't exist : " + algnFile);
    }
    return null;
    }
    ReadAlgn wAlgReader = new ReadAlgn(algnFile);
    Properties wProperties = wAlgReader.leerParametros();
    externalUserId = wProperties.getProperty("l");
    externalApplicationId = wProperties.getProperty("s");
    password = wProperties.getProperty("p");
    }

    CTSSessionRequest sessionReq = new CTSSessionRequest();
    sessionReq.setExternalApplicationId(externalApplicationId);
    sessionReq.setExternalUserId(externalUserId);
    sessionReq.setPassword(password);
    sessionReq.addData("restartSession", isRestart);
    if( backendId != null ){
    sessionReq.setBackEndId(backendId);
    }
    if (logger.isDebugEnabled()) {
    logger.logDebug("externalUserId: " + externalUserId + ", externalApplicationId: " + externalApplicationId+", backendId: " + backendId);
    }
    secKey.setLogin(externalUserId);
    secKey.setApplicationId(externalApplicationId);
    if(wSessionId == null){
    wSessionId = ctsServiceIntegration.initializeSession(sessionReq);
    }
    if (logger.isTraceEnabled()) {
    logger.logTrace("END initializeSession. sessionId = " + wSessionId);
    }
    return wSessionId;
    } catch (COBISException e) {
    if (logger.isErrorEnabled()) {
    logger.logError( "Initializing session failed", e);
    }
    response.setSuccess(false);
    MessageTO errorMessage = new MessageTO();
    errorMessage.setCode(String.valueOf(e.getClientErrorCode()));
    errorMessage.setMessage(e.getClientErrorMessage());
    MessageTO[] messages = { errorMessage };
    response.setMessages(messages);
    }
    return null;
    }
	
    }

  